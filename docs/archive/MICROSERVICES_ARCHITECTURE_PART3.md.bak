# Microservices Architecture Specification (Part 3 - Final)
## Complete Workflow Automation System - Core Runtime & Support Services

---

## 8. Agent Orchestration Service

#### Objectives
- **Primary Purpose**: Core LangGraph-based orchestration engine that powers **chatbot workflows** using dynamic YAML configurations
- **Business Value**: Enables multi-tenant chatbot deployment with configuration-driven behavior, supports 10,000+ concurrent conversations, 99.9% uptime
- **Product Scope**: This service is **chatbot-specific** (product_type: chatbot). Voicebots use LiveKit framework instead (see Voice Agent Service).
- **Architecture Reference**: Implements the two-node pattern from [LangGraph Customer Support Tutorial](https://langchain-ai.github.io/langgraph/tutorials/customer-support/customer-support/)
- **Scope Boundaries**:
  - **Does**: Load YAML configs (with external integrations), orchestrate LangGraph chatbot workflows, manage conversation state, execute tools, handle escalations
  - **Does Not**: Generate configs (Automation Engine does), implement tools (developers do), manage voice infrastructure (Voice Service does), power voicebots (separate LiveKit implementation)

#### Requirements

**Functional Requirements:**
1. Load and hot-reload YAML configs per tenant
2. Implement LangGraph two-node workflow (agent node + tools node)
3. Manage conversation state with PostgreSQL checkpointing
4. Execute tools based on YAML config
5. Handle human escalation triggers
6. Support multi-turn conversations with memory management
7. Implement PII collection and storage
8. Enable cross-sell/upsell based on config
9. Concurrent conversation handling (1000+ per instance)

**Non-Functional Requirements:**
- Response time: <2s P95 latency for chatbot
- Checkpoint persistence: <100ms
- Tool execution timeout: 30s with graceful fallback
- Memory management: Compress context >10K tokens
- Horizontal scalability: 1000+ conversations per pod

**Dependencies:**
- **Automation Engine** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 7]* (YAML config source)
- **Configuration Management** *[See Service 10 below]* (config distribution)
- **LLM Gateway Service** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 16]* (model inference)
- **RAG Pipeline Service** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 17]* (knowledge retrieval)
- **CRM Integration Service** (tool execution)
- **Supabase PostgreSQL** (state checkpoints, conversation logs)

**Data Storage:**
- PostgreSQL: Conversation threads, checkpoints, PII data, analytics events
- Redis: Short-term memory cache, active session state
- Pinecone: Long-term memory (user preferences, historical facts)

#### Features

**Must-Have:**
1. ✅ YAML-driven agent configuration
2. ✅ LangGraph two-node orchestration (agent + tools)
3. ✅ State checkpointing with fault tolerance
4. ✅ Tool execution framework (dynamic tool loading)
5. ✅ Human escalation workflows
6. ✅ PII collection and storage
7. ✅ Cross-sell/upsell execution
8. ✅ Memory management (short-term + long-term)
9. ✅ Multi-tenant isolation

**Nice-to-Have:**
10. 🔄 Autonomous agents with planning capabilities
11. 🔄 Multi-agent collaboration (supervisor-worker patterns)
12. 🔄 Streaming responses with tool call visibility
13. 🔄 Context window optimization (RAG-based retrieval)

**Feature Interactions:**
- Config hot-reload → Gracefully updates agent behavior mid-conversation
- Tool execution failure → Fallback to alternative tool or escalate
- PII detected → Auto-store with encryption, update user profile

#### Chatbot LangGraph Architecture

**Framework Pattern**: Two-node workflow following [LangGraph Customer Support Tutorial](https://langchain-ai.github.io/langgraph/tutorials/customer-support/customer-support/)

**Core Components:**

1. **StateGraph Implementation**
   - **Agent Node**: LLM-powered decision making, tool selection, response generation
   - **Tools Node**: Dynamic tool execution based on YAML config
   - **Conditional Edges**: Routes between agent ↔ tools based on tool calls
   - **Checkpointing**: PostgreSQL-backed state persistence for fault tolerance

2. **State Schema (TypedDict)**
   ```python
   class ChatbotState(TypedDict):
       messages: List[BaseMessage]
       conversation_id: str
       user_id: str
       config_id: str
       pii_collected: Dict[str, Any]
       tool_history: List[ToolCall]
       escalation_triggered: bool
       checkpoint_id: str
   ```

3. **YAML Configuration Structure (Chatbot)**
   ```yaml
   product_type: chatbot  # Required: differentiates from voicebot
   system_prompt: "You are a helpful customer support agent..."
   tools:
     - name: fetch_order_status
       description: "Retrieves order status by order ID"
       parameters: {...}
     - name: initiate_refund
       description: "Initiates refund process"
       parameters: {...}
   external_integrations:  # ONLY in chatbot configs (NOT voicebot)
     - type: salesforce
       credentials_ref: "salesforce_prod"
       enabled: true
     - type: stripe
       credentials_ref: "stripe_live"
       enabled: true
   escalation_rules:
     - trigger: "user_frustrated"
       action: "human_handoff"
   ```

4. **Cross-Product Communication**
   - **Use Case**: Medical prescription image during voice call
   - **Flow**: Voicebot active → Chatbot receives image upload → Chatbot processes image silently (no conversational response) → Chatbot publishes `cross_product_image_processed` event → Voicebot receives event → Voicebot continues conversation with parsed prescription data
   - **Implementation**: Kafka topic `cross_product_events` (see Event Schemas section)

5. **Hot-Reload Mechanism**
   - Kafka `config_events` topic triggers config refresh
   - Version pinning prevents mid-conversation updates (waits for conversation end)
   - New conversations immediately use latest config

#### API Specification

**1. Start Conversation**
```http
POST /api/v1/orchestration/conversations
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "config_id": "uuid",
  "channel": "webchat",
  "user_id": "uuid",
  "initial_message": "I want to check my order status",
  "context": {
    "customer_id": "C12345",
    "session_id": "uuid",
    "user_agent": "Mozilla/5.0...",
    "ip_address": "192.168.1.1"
  }
}

Response (201 Created):
{
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "thread_id": "uuid",
  "status": "active",
  "agent_response": {
    "message": "I'd be happy to help you check your order status! Could you please provide your order number?",
    "message_id": "uuid",
    "metadata": {
      "intent": "order_inquiry",
      "confidence": 0.92,
      "tool_calls": [],
      "escalation_suggested": false
    }
  },
  "conversation_state": {
    "turn_count": 1,
    "pii_collected": {},
    "checkpoint_id": "uuid"
  },
  "created_at": "2025-10-11T10:00:00Z"
}
```

**2. Continue Conversation**
```http
POST /api/v1/orchestration/conversations/{conversation_id}/messages
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "message": "My order number is ORD-78945",
  "attachments": []
}

Response (200 OK):
{
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "message_id": "uuid",
  "agent_response": {
    "message": "Thank you! I've found your order ORD-78945. It's currently in transit and expected to arrive on October 15th. Would you like me to send tracking details to your email?",
    "metadata": {
      "intent": "order_status_check",
      "confidence": 0.95,
      "tool_calls": [
        {
          "tool": "fetch_order_status",
          "input": {"order_id": "ORD-78945"},
          "output": {
            "status": "in_transit",
            "expected_delivery": "2025-10-15",
            "tracking_number": "1Z999AA10123456784"
          },
          "execution_time_ms": 345
        }
      ],
      "escalation_suggested": false,
      "personalization_applied": {
        "cohort": "active_power_users",
        "system_prompt_override": true,
        "experiment_id": "uuid",
        "variant_id": "v3"
      }
    }
  },
  "conversation_state": {
    "turn_count": 2,
    "pii_collected": {
      "order_id": "ORD-78945",
      "email": "john@example.com"
    },
    "checkpoint_id": "uuid"
  },
  "cross_sell_opportunity": {
    "detected": true,
    "product": "Premium Shipping Upgrade",
    "suggestion": "For future orders, would you be interested in our Premium Shipping for guaranteed next-day delivery?",
    "confidence": 0.78
  },
  "updated_at": "2025-10-11T10:02:00Z"
}
```

**3. Trigger Human Escalation**
```http
POST /api/v1/orchestration/conversations/{conversation_id}/escalate
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "trigger": "user_requested",
  "reason": "Customer wants to speak with manager about delayed delivery",
  "urgency": "high"
}

Response (200 OK):
{
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "escalation_id": "uuid",
  "status": "escalated",
  "assigned_agent": {
    "agent_id": "uuid",
    "name": "Sarah Johnson",
    "role": "Senior Support Agent",
    "status": "available",
    "estimated_response_time": "2 minutes"
  },
  "handoff_summary": {
    "conversation_history": "User inquired about order ORD-78945...",
    "pii_collected": {"order_id": "ORD-78945", "email": "john@example.com"},
    "tools_used": ["fetch_order_status"],
    "sentiment_score": 0.32,
    "issue_category": "delivery_delay"
  },
  "escalated_at": "2025-10-11T10:05:00Z"
}

Event Published to Kafka:
Topic: escalation_events
{
  "event_type": "conversation_escalated",
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "escalation_id": "uuid",
  "trigger": "user_requested",
  "assigned_agent_id": "uuid",
  "timestamp": "2025-10-11T10:05:00Z"
}
```

**4. Get Conversation State**
```http
GET /api/v1/orchestration/conversations/{conversation_id}
Authorization: Bearer {jwt_token}

Response (200 OK):
{
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "thread_id": "uuid",
  "config_id": "uuid",
  "status": "active",
  "channel": "webchat",
  "user_id": "uuid",
  "turn_count": 5,
  "messages": [
    {
      "message_id": "uuid",
      "role": "user",
      "content": "I want to check my order status",
      "timestamp": "2025-10-11T10:00:00Z"
    },
    {
      "message_id": "uuid",
      "role": "assistant",
      "content": "I'd be happy to help...",
      "tool_calls": [],
      "timestamp": "2025-10-11T10:00:15Z"
    },
    ...
  ],
  "pii_collected": {
    "order_id": "ORD-78945",
    "email": "john@example.com",
    "phone": "+1-555-123-4567"
  },
  "tools_executed": [
    {"tool": "fetch_order_status", "count": 1},
    {"tool": "send_tracking_email", "count": 1}
  ],
  "cross_sell_attempted": true,
  "cross_sell_accepted": false,
  "sentiment_trajectory": [0.8, 0.7, 0.65, 0.32, 0.45],
  "checkpoint_ids": ["uuid1", "uuid2", "uuid3", "uuid4", "uuid5"],
  "created_at": "2025-10-11T10:00:00Z",
  "updated_at": "2025-10-11T10:08:00Z"
}
```

**5. Execute Survey**
```http
POST /api/v1/orchestration/conversations/{conversation_id}/survey
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "questions": [
    {
      "question_id": "uuid",
      "question": "How did you hear about us?",
      "type": "single_choice",
      "options": ["Google Search", "Social Media", "Friend Referral", "Advertisement"]
    },
    {
      "question_id": "uuid",
      "question": "On a scale of 1-10, how likely are you to recommend us?",
      "type": "nps_scale"
    }
  ]
}

Response (200 OK):
{
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "survey_id": "uuid",
  "status": "sent",
  "agent_message": "Before we finish, I'd love to get your quick feedback! How did you hear about us?",
  "survey_context": {
    "embedded_in_chat": true,
    "skippable": true
  }
}

Survey Response Handling:
{
  "survey_id": "uuid",
  "responses": [
    {"question_id": "uuid", "answer": "Google Search"},
    {"question_id": "uuid", "answer": 9}
  ],
  "nps_score": 9,
  "nps_category": "promoter",
  "stored_at": "2025-10-11T10:10:00Z"
}
```

**6. Handle Unavailable Human Agent**
```http
GET /api/v1/orchestration/escalations/{escalation_id}/status
Authorization: Bearer {jwt_token}

Response (200 OK):
{
  "escalation_id": "uuid",
  "conversation_id": "uuid",
  "product_type": "chatbot",
  "status": "agent_unavailable",
  "fallback_action": "queue_callback",
  "queue_position": 3,
  "estimated_wait_time": "15 minutes",
  "callback_options": [
    {
      "option": "schedule_callback",
      "description": "We can call you back when an agent is available",
      "estimated_callback_time": "2025-10-11T10:20:00Z"
    },
    {
      "option": "email_support",
      "description": "Send your issue via email and we'll respond within 2 hours"
    },
    {
      "option": "continue_with_ai",
      "description": "Continue working with our AI assistant"
    }
  ],
  "agent_message": "I'm sorry, all our agents are currently assisting other customers. You're #3 in queue with an estimated wait time of 15 minutes. Would you like to schedule a callback, email us, or continue working with me?"
}
```

**Rate Limiting:**
- 1000 concurrent conversations per tenant
- 100 messages per minute per conversation
- 50 tool executions per minute per conversation
- Escalations: 500 per hour per tenant

#### Frontend Components

**1. Chat Widget (Embeddable)**
- Component: `ChatWidget.tsx`
- Features:
  - Customizable branding (colors, logo)
  - Message bubbles with typing indicators
  - Tool execution status (loading states)
  - File upload support
  - Emoji picker
  - Read receipts

**2. Conversation Dashboard (Admin)**
- Component: `ConversationDashboard.tsx`
- Features:
  - Live conversation monitoring
  - Real-time metrics (active, queued, escalated)
  - Agent performance stats
  - Filters (status, sentiment, channel)
  - Bulk actions (reassign, close, export)

**3. Escalation Queue**
- Component: `EscalationQueue.tsx`
- Features:
  - Priority-sorted queue
  - Agent assignment interface
  - Conversation context preview
  - Sentiment indicators
  - SLA countdown timers
  - Bulk assignment

**4. PII Collection Tracker**
- Component: `PIICollectionTracker.tsx`
- Features:
  - Real-time PII detection visualization
  - Field completeness indicators
  - Data enrichment suggestions
  - Encryption status
  - Export capabilities (encrypted)

**5. Cross-Sell Dashboard**
- Component: `CrossSellDashboard.tsx`
- Features:
  - Opportunity detection metrics
  - Conversion rates by product
  - A/B test results
  - Revenue attribution
  - Recommendation quality scores

**State Management:**
- WebSocket for real-time conversation updates
- Redux Toolkit for conversation state
- React Query for API data fetching
- Optimistic UI updates for message sending

---

## Config Hot-Reload Strategy

### Overview

When tools/integrations are completed or config changes are pushed, services must reload configurations WITHOUT restarting and WITHOUT disrupting active conversations.

### Hot-Reload Trigger

**Event-Driven Reload:**
```
Developer closes GitHub issue (#156: "Implement initiate_refund tool")
  ↓
GitHub webhook → Automation Engine
  ↓
Automation Engine publishes to Kafka:
Topic: config_events
{
  "event_type": "config_updated",
  "config_id": "uuid",
  "product_type": "chatbot",
  "organization_id": "uuid",
  "updated_by": "github_issue_closed_webhook",
  "changes": ["tool_attached:initiate_refund"],
  "hot_reload_required": true,
  "timestamp": "2025-10-20T10:00:00Z"
}
  ↓
Agent Orchestration Service & Voice Agent Service (Kafka consumers) receive event
  ↓
Each service filters by product_type:
  - Agent Orchestration: Only processes if product_type == "chatbot"
  - Voice Agent: Only processes if product_type == "voicebot"
  - Prevents unnecessary reloads for irrelevant product configs
```

### Active Conversation Handling (CRITICAL)

**Strategy: Version Pinning + Graceful Migration**

#### For In-Flight Conversations:
1. **Continue with Current Config Version:**
   - Active conversations (mid-flow) continue using config version they started with
   - Conversation state stores `config_version: "v3"` in checkpoint
   - No mid-conversation config changes (prevents tool disappearing/appearing unexpectedly)

2. **Config Version Tracking:**
```python
# Stored in conversation checkpoint
{
  "thread_id": "uuid",
  "config_id": "uuid",
  "config_version": "v3",  # Locked at conversation start
  "conversation_state": {...},
  "created_at": "2025-10-20T10:00:00Z"
}
```

#### For New Conversations:
1. **Use Latest Config Version:**
   - New conversations (started AFTER hot-reload event) use config version v4
   - `config_version: "v4"` stamped in checkpoint at conversation creation

2. **Config Version Lookup:**
```python
# On conversation start
if new_conversation:
    config_version = get_latest_config_version(config_id)  # Returns "v4"
else:
    config_version = load_from_checkpoint(thread_id).config_version  # Returns "v3"
```

### Implementation Details

**Service-Level Hot-Reload Process:**

1. **Agent Orchestration Service receives `config_updated` event**

2. **Background Config Fetch:**
   - Call Configuration Management Service: `GET /api/v1/configs/{config_id}`
   - Download new YAML config (v4)
   - Parse and validate config schema
   - Load new tools into tool registry

3. **Version Registry Update:**
```python
# In-memory version registry
config_versions = {
    "uuid": {
        "v3": {...},  # Old config still in memory for active conversations
        "v4": {...}   # New config loaded
    }
}
```

4. **Active Conversation Check:**
   - Query PostgreSQL: `SELECT COUNT(*) FROM conversations WHERE config_id = 'uuid' AND status = 'active'`
   - If active conversations exist using v3:
     - Keep v3 in memory (DO NOT unload)
     - Log: "Config v3 retained for 12 active conversations"

5. **Garbage Collection:**
   - Monitor conversation completion events
   - When last conversation using v3 completes:
     - Wait 5 minutes (grace period)
     - Unload v3 from memory
     - Log: "Config v3 unloaded - no active conversations"

### Breaking Config Changes

**Non-Breaking Changes (Auto Hot-Reload):**
- Tool added (e.g., `initiate_refund`)
- Integration added
- System prompt updated
- Escalation rule tweaked

**Breaking Changes (Require Manual Intervention):**
- Tool removed (active conversations may be calling it)
- Required PII field removed (violates schema)
- Conversation flow restructured (state incompatible)

**Breaking Change Detection:**
```yaml
# In config YAML metadata
metadata:
  version: "v4"
  breaking_change: true  # Platform Engineer sets this manually
  migration_required: true
  migration_script: "migrate_v3_to_v4.py"
```

**Breaking Change Workflow:**
1. Platform Engineer marks `breaking_change: true` in new config
2. Hot-reload event includes `breaking_change: true`
3. Services receive event but DO NOT auto-reload
4. Platform Engineer dashboard shows alert: "Manual migration required for config_id={uuid}"
5. Platform Engineer:
   - Drains active conversations (soft block new conversations using v3)
   - Runs migration script to upgrade checkpoints to v4 schema
   - Manually triggers reload: `POST /api/v1/orchestration/reload-config/{config_id}`

### Rollback Strategy

**If Hot-Reload Fails (>10% error rate):**

1. **Auto-Rollback Trigger:**
```
Hot-reload event processed → 15% of new conversations fail with errors
  ↓
Monitoring Engine detects spike in conversation_failed events
  ↓
Auto-rollback triggered within 60 seconds
```

2. **Rollback Process:**
   - Publish `config_rollback` event to Kafka
   - Services revert to previous config version (v3)
   - New conversations use v3 again
   - Alert Platform Engineer: "Config v4 rolled back due to high error rate"

3. **Manual Investigation:**
   - Platform Engineer reviews error logs
   - Identifies root cause (e.g., tool syntax error in v4)
   - Fixes config offline
   - Re-deploys with fix validation

### Monitoring & Alerts

**Metrics to Track:**
- `config_reload_success_rate` (target: >99%)
- `active_conversations_per_config_version` (for GC decisions)
- `config_reload_latency` (target: <5s)
- `conversation_error_rate_post_reload` (auto-rollback threshold: >10%)

**Alerts:**
- Hot-reload failed for config_id={uuid}
- Breaking change detected, manual intervention required
- Config version v3 retained for >24 hours (possible memory leak)
- Rollback triggered for config_id={uuid}

---

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Support Agent**
   - Role: Handles escalated conversations
   - Access: Assigned conversations, escalation queue
   - Permissions: read:escalated_conversations, write:messages, resolve:tickets
   - Workflows: Receives escalation, reviews context, resolves issue, collects feedback

2. **Support Manager**
   - Role: Monitors agent performance, manages escalations
   - Access: All conversations, analytics
   - Permissions: read:all_conversations, reassign:escalations, admin:agents
   - Workflows: Monitors queues, reassigns complex cases, reviews performance metrics

3. **Platform Engineer**
   - Role: Monitors orchestration health, manages configs
   - Access: All conversations (read-only), config management
   - Permissions: admin:orchestration, debug:conversations, manage:configs
   - Workflows: Investigates failures, optimizes performance, deploys config updates

**AI Agents:**

1. **LangGraph Agent (Primary)**
   - Responsibility: Conducts conversations, invokes tools, manages state, applies personalization
   - Tools: Dynamic (loaded from YAML config)
   - Autonomy: Fully autonomous within config constraints
   - Escalation: Human handoff triggered by config rules (sentiment, complexity, user request)
   - Personalization Integration: Fetches cohort-based overrides from Hyperpersonalization Engine before generating responses

2. **Memory Management Agent**
   - Responsibility: Compresses context, manages checkpoints, retrieves long-term memory
   - Tools: Token counters, summarizers, Pinecone retrieval
   - Autonomy: Fully autonomous
   - Escalation: Alerts on checkpoint failures

3. **PII Collection Agent**
   - Responsibility: Detects and extracts PII, validates formats, encrypts storage
   - Tools: NER models, regex patterns, encryption libraries
   - Autonomy: Fully autonomous
   - Escalation: None (runs in background)

4. **Cross-Sell Agent**
   - Responsibility: Identifies opportunities, generates recommendations, tracks acceptance
   - Tools: Recommendation engines, product catalogs, CRM data
   - Autonomy: Suggests only (user approval required)
   - Escalation: None

5. **Personalization Context Agent (NEW)**
   - Responsibility: Fetches user cohort, lifecycle stage, and experiment assignments from Hyperpersonalization Engine
   - Tools: Hyperpersonalization Engine API, Redis cache
   - Autonomy: Fully autonomous
   - Escalation: None (falls back to base config if unavailable)

**Approval Workflows:**
1. Conversation Start → Auto-approved
2. Tool Execution → Auto-executed (config-defined tools)
3. Human Escalation → Auto-routed to available agent
4. Cross-Sell Recommendation → User acceptance required
5. Survey Sending → Auto-sent at conversation end (if config enabled)

---

## 9. Voice Agent Service

#### Objectives
- **Primary Purpose**: Real-time voice conversation handling using **LiveKit Agents framework** with sub-500ms latency
- **Business Value**: Enables voice automation for phone support/sales, reduces call costs from $13/call to $2-3/call
- **Product Scope**: This service is **voicebot-specific** (product_type: voicebot). Chatbots use LangGraph framework instead (see Agent Orchestration Service).
- **Architecture**: Uses LiveKit VoicePipelineAgent (STT-LLM-TTS pipeline), NOT LangGraph. Shares conceptual agent+tools pattern but different implementation.
- **Scope Boundaries**:
  - **Does**: Handle voice calls, STT/TTS processing, LiveKit session management, SIP integration (Twilio/Telnyx), voicebot workflows with YAML-configured tools
  - **Does Not**: Generate configs (Automation Engine), use LangGraph (chatbot-only), include external integrations in YAML (SIP endpoint provided separately)

#### Requirements

**Functional Requirements:**
1. LiveKit-based voice session management
2. STT integration (Deepgram Nova-3) with streaming
3. TTS integration (ElevenLabs Flash v2.5) with low latency
4. VoicePipelineAgent workflow (LiveKit framework, YAML-driven tools only)
5. SIP integration for phone calls (Twilio/Telnyx)
6. DTMF support for IVR navigation
7. Hot transfer to human agents
8. Call recording and transcription
9. Turn detection optimization (<300ms)

**Non-Functional Requirements:**
- End-to-end latency: <500ms P95
- Concurrent calls: 10-25 per worker pod
- STT accuracy: >90% for clear audio
- TTS naturalness: >4.0/5.0 rating
- Uptime: 99.9%

**Dependencies:**
- **Automation Engine** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 7]* (YAML configs)
- **Agent Orchestration Service** *[See Service 8 above]* (business logic for cross-product coordination)
- **Configuration Management** *[See Service 10 below]* (voice-specific configs)
- **External**: LiveKit Cloud/Self-hosted, Deepgram, ElevenLabs, Twilio/Telnyx

**Data Storage:**
- PostgreSQL: Call metadata, transcripts, analytics
- S3: Call recordings (encrypted)
- Redis: Active session state

#### Features

**Must-Have:**
1. ✅ LiveKit distributed mesh architecture
2. ✅ Deepgram STT streaming
3. ✅ ElevenLabs TTS with dual streaming
4. ✅ YAML-driven voice workflows
5. ✅ SIP integration for PSTN calls
6. ✅ Human agent hot transfer
7. ✅ Call recording and storage
8. ✅ Turn detection optimization

**Nice-to-Have:**
9. 🔄 Noise cancellation (Krisp AI)
10. 🔄 Emotion detection from voice
11. 🔄 Multi-language support
12. 🔄 Voice biometrics authentication

#### Voicebot LiveKit Architecture

**Framework**: LiveKit Agents (Python SDK) - NOT LangGraph

**Core Components:**

1. **VoicePipelineAgent Implementation**
   - **STT Pipeline**: Deepgram Nova-3 streaming transcription
   - **LLM Integration**: Same LLM Gateway as chatbots, but optimized for voice latency
   - **TTS Pipeline**: ElevenLabs Flash v2.5 with dual streaming
   - **Turn Detection**: VAD (Voice Activity Detection) for <300ms latency
   - **Agent Logic**: Shares conceptual agent+tools pattern with chatbots but implemented in LiveKit framework

2. **LiveKit SIP Integration**
   - **SIP Bridge**: LiveKit SIP server connects PSTN calls to LiveKit rooms
   - **Providers**: Twilio (primary), Telnyx (failover)
   - **Inbound Flow**: PSTN → Twilio SIP → LiveKit SIP Bridge → VoicePipelineAgent
   - **Outbound Flow**: VoicePipelineAgent → LiveKit SIP Bridge → Twilio SIP → PSTN

3. **YAML Configuration Structure (Voicebot)**
   ```yaml
   product_type: voicebot  # Required: differentiates from chatbot
   system_prompt: "You are a helpful voice assistant..."
   tools:
     - name: fetch_account_info
       description: "Retrieves account information"
       parameters: {...}
     - name: schedule_appointment
       description: "Schedules an appointment"
       parameters: {...}
   # NO external_integrations field (unlike chatbot)
   # SIP endpoint configured separately via SIP trunk provisioning
   escalation_rules:
     - trigger: "user_frustrated"
       action: "human_transfer"
   voice_config:
     stt_provider: deepgram
     tts_provider: elevenlabs
     voice_id: "sarah_professional"
     turn_detection_threshold_ms: 300
     # Client-configurable voice parameters (matching visual UI)
     background_sound:
       type: "office"  # office | cafe | silence | custom
       custom_url: null
     input_min_characters: 10
     punctuation_boundaries: [".", "!", "?", "..."]
     model_settings:
       model: "gpt-4"
       clarity_similarity: 0.75
       speed: 1.0
       style_exaggeration: 0
       optimize_streaming_latency: 4
       use_speaker_boost: true
       auto_mode: false
     max_tokens: 150
     stop_speaking_plan:
       number_of_words: 3
       voice_seconds: 0.5
       back_off_seconds: 2
   ```

4. **Cross-Product Communication**
   - **Use Case**: Medical prescription image uploaded during voice call
   - **Flow**: Voicebot active on call → User uploads prescription image via chatbot widget → Chatbot processes image (OCR/LLM parsing) → Chatbot publishes `cross_product_image_processed` event → Voicebot receives event → Voicebot continues call: "I see you've uploaded a prescription for Amoxicillin 500mg..."
   - **Implementation**: Kafka topic `cross_product_events` enables coordination
   - **Key Constraint**: Chatbot does NOT send conversational responses when voicebot is active (silent processing only)

5. **Key Differences from Chatbot**
   | Aspect | Chatbot (LangGraph) | Voicebot (LiveKit) |
   |--------|---------------------|-------------------|
   | Framework | LangGraph | LiveKit Agents |
   | State Management | StateGraph + Checkpointing | LiveKit room state |
   | YAML Config | Includes `external_integrations` | NO `external_integrations` |
   | SIP Integration | N/A | Twilio/Telnyx SIP trunks |
   | Latency Target | <2s P95 | <500ms P95 |
   | Tool Execution | Via LangGraph tools node | Via LiveKit agent callbacks |

#### API Specification

**1. Initiate Voice Call (Outbound)**
```http
POST /api/v1/voice/calls/initiate
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "config_id": "uuid",
  "phone_number": "+15551234567",
  "caller_id": "+15559876543",
  "context": {
    "customer_id": "C12345",
    "call_purpose": "followup",
    "campaign_id": "uuid"
  }
}

Response (202 Accepted):
{
  "call_id": "uuid",
  "product_type": "voicebot",
  "status": "initiating",
  "sip_session_id": "uuid",
  "estimated_connect_time": "5 seconds"
}

Event Published to Kafka:
Topic: voice_events
{
  "event_type": "call_initiated",
  "call_id": "uuid",
  "product_type": "voicebot",
  "phone_number": "+15551234567",
  "timestamp": "2025-10-11T11:00:00Z"
}
```

**2. Get Call Status**
```http
GET /api/v1/voice/calls/{call_id}
Authorization: Bearer {jwt_token}

Response (200 OK):
{
  "call_id": "uuid",
  "product_type": "voicebot",
  "status": "in_progress",
  "phone_number": "+15551234567",
  "direction": "outbound",
  "started_at": "2025-10-11T11:00:05Z",
  "duration_seconds": 145,
  "transcript": [
    {
      "speaker": "agent",
      "text": "Hello! This is Sarah from Acme Corp. Is this John?",
      "timestamp": "2025-10-11T11:00:07Z",
      "confidence": 0.98
    },
    {
      "speaker": "user",
      "text": "Yes, this is John.",
      "timestamp": "2025-10-11T11:00:10Z",
      "confidence": 0.95
    },
    ...
  ],
  "tools_executed": [
    {"tool": "fetch_account_info", "timestamp": "2025-10-11T11:00:12Z"}
  ],
  "sentiment_score": 0.72,
  "recording_url": "https://storage.workflow.com/recordings/uuid.mp3",
  "livekit_room_id": "room_xyz",
  "participant_count": 2
}
```

**3. Transfer to Human Agent**
```http
POST /api/v1/voice/calls/{call_id}/transfer
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "agent_id": "uuid",
  "transfer_type": "hot",
  "reason": "complex_technical_issue",
  "summary": "Customer needs help with API integration issue"
}

Response (200 OK):
{
  "call_id": "uuid",
  "product_type": "voicebot",
  "transfer_id": "uuid",
  "status": "transferring",
  "target_agent": {
    "agent_id": "uuid",
    "name": "Technical Support - Mike",
    "phone_number": "+15551112222",
    "estimated_connect_time": "10 seconds"
  },
  "call_summary": {
    "transcript": "...",
    "pii_collected": {...},
    "tools_used": [...]
  }
}

Event Published to Kafka:
Topic: voice_events
{
  "event_type": "call_transferred",
  "call_id": "uuid",
  "product_type": "voicebot",
  "transfer_type": "hot",
  "target_agent_id": "uuid",
  "timestamp": "2025-10-11T11:02:30Z"
}
```

**4. WebSocket - Live Transcription**
```
wss://voice.workflow.com/calls/{call_id}/transcript
Authorization: Bearer {jwt_token}

Server → Client Events:
{
  "event": "transcript_interim",
  "speaker": "user",
  "text": "I'm having trouble with...",
  "is_final": false,
  "timestamp": "2025-10-11T11:01:45Z"
}

{
  "event": "transcript_final",
  "speaker": "user",
  "text": "I'm having trouble with my API integration.",
  "confidence": 0.94,
  "timestamp": "2025-10-11T11:01:48Z"
}

{
  "event": "agent_response",
  "speaker": "agent",
  "text": "I understand you're having API integration issues. Let me pull up your account details.",
  "tool_calls": [
    {"tool": "fetch_account_info", "status": "executing"}
  ],
  "timestamp": "2025-10-11T11:01:50Z"
}

{
  "event": "sentiment_update",
  "sentiment_score": 0.45,
  "emotion": "frustrated",
  "escalation_suggested": true,
  "timestamp": "2025-10-11T11:01:51Z"
}
```

**5. End Call**
```http
POST /api/v1/voice/calls/{call_id}/end
Authorization: Bearer {jwt_token}
Content-Type: application/json

Request Body:
{
  "reason": "completed",
  "resolution_status": "resolved",
  "followup_required": false
}

Response (200 OK):
{
  "call_id": "uuid",
  "product_type": "voicebot",
  "status": "ended",
  "ended_at": "2025-10-11T11:05:00Z",
  "duration_seconds": 295,
  "summary": {
    "transcript_url": "https://storage.workflow.com/transcripts/uuid.txt",
    "recording_url": "https://storage.workflow.com/recordings/uuid.mp3",
    "pii_collected": {
      "phone": "+15551234567",
      "account_id": "A78945"
    },
    "tools_executed": ["fetch_account_info", "create_support_ticket"],
    "sentiment_avg": 0.68,
    "resolution_status": "resolved",
    "csat_score": null
  },
  "analytics": {
    "stt_latency_avg_ms": 350,
    "tts_latency_avg_ms": 75,
    "llm_latency_avg_ms": 1200,
    "total_latency_p95_ms": 480
  }
}

Event Published to Kafka:
Topic: voice_events
{
  "event_type": "call_ended",
  "call_id": "uuid",
  "product_type": "voicebot",
  "duration_seconds": 295,
  "resolution_status": "resolved",
  "timestamp": "2025-10-11T11:05:00Z"
}
```

**6. Get Call Analytics**
```http
GET /api/v1/voice/analytics?start_date=2025-10-01&end_date=2025-10-11
Authorization: Bearer {jwt_token}

Response (200 OK):
{
  "period": {
    "start": "2025-10-01",
    "end": "2025-10-11"
  },
  "total_calls": 1547,
  "call_breakdown": {
    "inbound": 892,
    "outbound": 655
  },
  "avg_call_duration_seconds": 287,
  "completion_rate": 0.94,
  "transfer_rate": 0.12,
  "resolution_rate": 0.88,
  "performance_metrics": {
    "avg_latency_ms": 425,
    "stt_accuracy": 0.92,
    "tts_naturalness": 4.3
  },
  "cost_analysis": {
    "total_cost": 4641.00,
    "cost_per_call": 3.00,
    "breakdown": {
      "stt": 1200.00,
      "tts": 980.00,
      "llm": 1850.00,
      "telephony": 611.00
    }
  },
  "top_escalation_reasons": [
    {"reason": "complex_technical_issue", "count": 87},
    {"reason": "user_frustrated", "count": 52},
    {"reason": "billing_dispute", "count": 43}
  ]
}
```

**Rate Limiting:**
- 1000 concurrent calls per tenant
- 100 outbound calls per hour per tenant (configurable)
- 1000 API requests per minute per tenant

#### Frontend Components

**1. Voice Call Dashboard**
- Component: `VoiceCallDashboard.tsx`
- Features:
  - Active calls grid (real-time status)
  - Call controls (mute, hold, transfer, end)
  - Live transcription viewer
  - Sentiment indicators
  - Recording playback

**2. Live Transcription Panel**
- Component: `LiveTranscriptionPanel.tsx`
- Features:
  - Real-time transcript streaming
  - Speaker diarization visualization
  - Confidence scores
  - Keyword highlighting
  - Export options

**3. Call Transfer Interface**
- Component: `CallTransferInterface.tsx`
- Features:
  - Available agent directory
  - Transfer type selector (hot, warm, cold)
  - Call summary auto-population
  - Conference call option
  - Transfer history

**4. Voice Analytics Dashboard**
- Component: `VoiceAnalyticsDashboard.tsx`
- Features:
  - Call volume charts (hourly, daily, weekly)
  - Performance metrics (latency, accuracy)
  - Cost analysis with trends
  - Escalation pattern analysis
  - Quality scorecards

**State Management:**
- WebSocket for real-time call updates
- Redux Toolkit for call state management
- React Query for analytics data
- Audio player components for recording playback

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Phone Support Agent**
   - Role: Handles transferred voice calls
   - Access: Assigned calls, transfer queue
   - Permissions: receive:transfers, read:call_context, end:calls
   - Workflows: Receives transfer, reviews context, resolves issue

2. **Voice Operations Manager**
   - Role: Monitors voice infrastructure, manages quality
   - Access: All calls, analytics, infrastructure metrics
   - Permissions: admin:voice, monitor:calls, manage:agents
   - Workflows: Monitors performance, investigates quality issues, optimizes configs

**AI Agents:**

1. **Voice Agent (LiveKit-based)**
   - Responsibility: Conducts voice conversations using VoicePipelineAgent
   - Tools: YAML-configured tools (similar pattern to chatbot but LiveKit implementation)
   - Framework: LiveKit Agents (NOT LangGraph)
   - Autonomy: Fully autonomous within config constraints
   - Escalation: Hot transfer triggered by config rules

2. **Turn Detection Agent**
   - Responsibility: Detects speaker turns, minimizes latency
   - Tools: VAD models, audio processing
   - Autonomy: Fully autonomous
   - Escalation: None

3. **Audio Quality Agent**
   - Responsibility: Monitors audio quality, triggers noise cancellation
   - Tools: Audio analyzers, Krisp AI, quality metrics
   - Autonomy: Fully autonomous
   - Escalation: Alerts operations on persistent quality issues

**Approval Workflows:**
1. Outbound Calls → Auto-approved within quota limits
2. Human Transfer → Auto-routed to available agent
3. Call Recording → Auto-enabled (GDPR/compliance consent pre-obtained)
4. Call Analytics → Auto-generated

---

## Voice Infrastructure Architecture (SIP Provider Details)

### SIP Provider: Twilio Elastic SIP Trunking (Primary)

**Why Twilio:**
- 99.999% uptime SLA (vs. Telnyx 99.99%)
- Global PSTN coverage (150+ countries)
- Mature LiveKit integration libraries
- Enterprise support (response < 1 hour)

**Cost Structure:**
- SIP trunk capacity: $2/month per channel
- Inbound calls: $0.0085/minute (US)
- Outbound calls: $0.0100/minute (US)
- Phone numbers: $1/month per number
- Estimated monthly cost (1000 concurrent calls): $2,000 + $510/hr usage

### Configuration

**SIP Trunk Provisioning:**
```
Trunk Name: workflow-prod-trunk-1
SIP URI: sip:workflow.pstn.twilio.com
Capacity: 1000 concurrent channels
Authentication: IP ACL (LiveKit SIP bridge IPs)
Codec Priority: PCMU (G.711), Opus
```

**Phone Number Pool:**
- **Auto-Provisioning**: 100 numbers per tenant (configurable)
- **Number Types**: Local (US), Toll-Free (800/888/etc.), International
- **Assignment Strategy**: Geographic (match tenant headquarters location)
- **Example**: Tenant "Acme Corp" (HQ: San Francisco) → +1 (415) xxx-xxxx

**Inbound SIP URI Routing:**
```
PSTN Call → Twilio SIP Trunk → LiveKit SIP Bridge
  ↓
SIP INVITE with header: X-Tenant-Slug: acme-corp
  ↓
LiveKit SIP bridge extracts tenant_slug
  ↓
Configuration Management Service: GET /api/v1/tenants/acme-corp/config_id
  ↓
Returns: config_id = "uuid"
  ↓
Voice Agent Service initializes session with config_id
  ↓
STT → Agent Orchestration → TTS → Caller (PSTN)
```

**Outbound Call Flow:**
```
Voice Agent Service: POST /api/v1/voice/calls/initiate
  ↓
LiveKit creates SIP session
  ↓
LiveKit SIP bridge → Twilio SIP Trunk
  ↓
Twilio routes to PSTN (caller ID: tenant's phone number)
  ↓
Call connects to recipient +15551234567
  ↓
Voice conversation begins (STT → Agent → TTS)
```

### Failover Strategy: Telnyx (Secondary)

**Automatic Failover Conditions:**
- Twilio SIP trunk unavailable (>5 minutes)
- Error rate >20% on Twilio
- Manual failover trigger by Platform Engineer

**Failover Process:**
1. Monitoring Engine detects Twilio degradation
2. Publishes `sip_provider_failover` event to Kafka
3. Voice Agent Service receives event
4. New calls routed to Telnyx SIP URI: `sip:workflow.sip.telnyx.com`
5. Existing calls continue on Twilio (no mid-call transfer)
6. Alert: "SIP provider failed over to Telnyx"

**Telnyx Configuration:**
```
Trunk Name: workflow-backup-trunk
Capacity: 500 concurrent channels (50% of primary)
Cost: $0.0095/minute (slightly cheaper, lower capacity)
Geographic: US-only (no international support)
```

### International Calling Support

**Supported Countries (Tier 1 - Low Cost):**
- US, Canada: $0.0100/min
- UK, Germany, France: $0.0150/min
- Australia: $0.0180/min

**Supported Countries (Tier 2 - Medium Cost):**
- India: $0.0250/min
- Mexico: $0.0220/min
- Brazil: $0.0300/min

**Unsupported Countries:**
- Cuba, North Korea, Syria (OFAC sanctions)
- Countries with poor PSTN quality (fallback to chat only)

**Compliance:**
- **GDPR Call Recording**: Explicit consent banner ("This call will be recorded") before STT starts
- **TCPA Compliance**: Outbound calls only to opted-in numbers, respect Do-Not-Call lists
- **PCI-DSS**: Credit card numbers detected in voice → masked in transcript, not stored

### Phone Number Management

**Provisioning API:**
```http
POST /api/v1/voice/numbers/provision
Authorization: Bearer {platform_admin_jwt}
Content-Type: application/json

Request Body:
{
  "tenant_id": "uuid",
  "number_type": "local",  // local | toll_free | international
  "area_code": "415",  // Optional, for local numbers
  "quantity": 10
}

Response (201 Created):
{
  "numbers": [
    {
      "phone_number": "+14155551001",
      "number_type": "local",
      "tenant_id": "uuid",
      "provisioned_at": "2025-10-20T10:00:00Z",
      "monthly_cost_usd": 1.00
    },
    ...
  ],
  "total_monthly_cost_usd": 10.00
}
```

**Number Rotation (Anti-Spam):**
- Outbound campaign calls rotate through 10+ numbers
- Prevents carrier spam flags on single number
- Auto-rotation every 500 calls

### Monitoring & SLAs

**SIP Trunk Health Metrics:**
- `sip_trunk_availability` (target: >99.99%)
- `call_connect_success_rate` (target: >95%)
- `call_quality_mos_score` (Mean Opinion Score, target: >4.0)
- `sip_latency_ms` (target: <100ms for SIP negotiation)

**Alerts:**
- SIP trunk capacity >80% (scale up warning)
- Call quality degradation (MOS < 3.5 for 5 minutes)
- Failover to Telnyx triggered
- International call to unsupported country attempted

**Cost Budgeting:**
- Daily limit per tenant: $500 (prevents runaway costs)
- Alert at 80% of daily budget
- Auto-pause outbound calls at 100% budget (emergency stop)

---

## 10. Configuration Management Service → CONVERTED TO LIBRARY

**Service 10 has been converted to @workflow/config-sdk library** - See "Supporting Libraries" section below for complete specification.

**Rationale**: Service 10 was a thin wrapper around S3 operations, adding 50-100ms latency to every configuration fetch. Converting to a library allows services to access S3 directly while still benefiting from JSON Schema validation, client-side caching, and hot-reload support.

**Migration Impact**:
- All services now import `@workflow/config-sdk` directly
- No API calls to Service 10
- Direct S3 access with client-side caching
- 50-100ms latency improvement per config fetch
- S3 credentials managed per-service (already required for infrastructure)

**Former Functionality** (now in library):
- YAML config storage in S3
- JSON Schema validation
- Hot-reload via Redis pub/sub
- Version control and rollback
- Namespace isolation per tenant
- Config comparison and diff generation
- Branch management (staging/production)
- Change history tracking

---

## 11. Monitoring Engine Service

#### Objectives
- **Primary Purpose**: Proactive observability for LLM workflows, agent execution, integration health, and system reliability with distributed tracing and incident management
- **Business Value**: Reduces MTTR from hours to <10 minutes, prevents 95% of customer-impacting incidents through early detection, enables real-time LLM quality monitoring
- **Product Differentiation**: Purpose-built for AI agent workflows with semantic tracing, LLM token-level observability, multi-agent orchestration debugging
- **Scope Boundaries**:
  - **Does**: Distributed tracing (OpenTelemetry), LLM call monitoring, agent workflow execution tracking, service health checks, incident detection/creation, alerting, RCA generation, SLA compliance monitoring, integration health dashboards
  - **Does Not**: Log storage (delegates to external logging platforms), metrics aggregation at scale (uses Prometheus), business analytics (Analytics Service does), customer success metrics (Customer Success Service does)

#### Requirements

**Functional Requirements:**
1. OpenTelemetry-based distributed tracing across all 17 microservices
2. LLM call monitoring with token usage, latency, and quality scoring per request
3. Agent workflow execution tracing with step-by-step debugging (LangGraph state inspection)
4. Semantic caching hit rate tracking and optimization recommendations
5. Integration health monitoring for external APIs (Salesforce, HubSpot, Zendesk, etc.)
6. Automated incident creation with severity classification (P0/P1/P2/P3)
7. Real-time alerting via PagerDuty, Slack, email with escalation policies
8. AI-generated Root Cause Analysis (RCA) reports using traces and logs
9. SLA compliance tracking per client with breach alerting
10. Service dependency mapping and failure impact analysis
11. LLM quality degradation detection (hallucinations, refusals, tone drift)
12. Custom metric tracking for business-critical workflows
13. Multi-tenant trace isolation with namespace-based filtering

**Non-Functional Requirements:**
- Trace ingestion latency: <100ms P95 from event generation to queryable
- Dashboard query performance: <2s for 24-hour trace visualization
- Support 10M+ trace spans per day across all tenants
- 99.95% uptime for monitoring service (more reliable than monitored services)
- Alert delivery: <30s from incident detection to first notification
- Trace retention: 30 days hot storage, 365 days cold storage (S3)
- Multi-tenant trace isolation with zero cross-tenant data leakage

**Dependencies:**
- **All Microservices (0-17)** *[See all MICROSERVICES_ARCHITECTURE*.md documents]* (instrumented with OpenTelemetry SDKs)
- **LLM Gateway Service** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 16]* (LLM call metadata and token usage)
- **Configuration Management Service** *[See Service 10 above]* (alerting rules, SLA thresholds per client)
- External APIs:
  - **OpenTelemetry Collector**: Trace/metrics aggregation and routing
  - **Prometheus**: Metrics storage and querying
  - **Grafana**: Visualization dashboards
  - **Traceloop/Helicone**: LLM-specific observability (evaluation as alternative to custom)
  - **PagerDuty**: Incident alerting and escalation
  - **Slack API**: Real-time notifications to engineering channels
  - **Arize AI**: LLM quality monitoring and evaluation (optional)

**Data Storage:**
- PostgreSQL: Incidents, alerts, SLA definitions, escalation policies, RCA reports
- ClickHouse: High-performance trace storage (alternative to Jaeger backend)
- Redis: Recent trace cache (last 5 minutes), alert deduplication state
- S3: Long-term trace archive (365 days), RCA report documents
- Prometheus: Metrics time-series data (CPU, memory, request rates, latencies)

#### Features

**Must-Have:**
1. ✅ OpenTelemetry instrumentation SDK for all services (Python, Node.js, Go)
2. ✅ Distributed trace visualization with service dependency graph
3. ✅ LLM call tracing with prompt/completion/tokens/latency per request
4. ✅ Agent workflow execution debugger (LangGraph state at each step)
5. ✅ Automated incident creation with P0/P1/P2/P3 severity classification
6. ✅ Real-time alerting to PagerDuty, Slack, email with escalation policies
7. ✅ AI-generated RCA reports using trace analysis and log correlation
8. ✅ SLA compliance dashboard per client with breach predictions
9. ✅ Integration health monitoring with uptime/latency/error rate tracking
10. ✅ Semantic cache hit rate monitoring with cost savings calculation
11. ✅ LLM quality degradation alerts (response quality drops below threshold)
12. ✅ Custom business metric tracking (demo-to-close rate, PRD approval time, etc.)

**Nice-to-Have:**
13. 🔄 Anomaly detection using ML models (e.g., Prophet for time-series forecasting)
14. 🔄 Automated incident remediation for known failure patterns
15. 🔄 Cost attribution per client based on LLM token usage and infrastructure
16. 🔄 A/B test performance comparison (trace latency, error rates by experiment variant)
17. 🔄 Predictive alerting (alert before incident occurs based on trend analysis)

**Feature Interactions:**
- Service publishes trace span → OpenTelemetry Collector ingests → ClickHouse stores → Grafana visualizes
- LLM Gateway completes request → Publishes `llm_request_completed` event → Monitoring ingests with token usage → Updates cost dashboard
- Trace shows error rate spike → Incident creation triggered → AI generates RCA → PagerDuty alert sent → Engineer acknowledges via Slack
- SLA breach predicted (95% of budget used) → Alert sent to Client Success → CSM proactively contacts client
- Integration health check fails 3x → Incident created → Escalation policy triggered → Platform engineer paged
- Agent workflow stuck (no state change for 5 minutes) → Timeout incident created → Trace shows Neo4j query hanging → Auto-escalate to database team

#### API Specification

**1. Ingest Trace Span (OpenTelemetry)**
```http
POST /api/v1/monitoring/traces
Authorization: Bearer {service_jwt}
X-Tenant-ID: {organization_id}
Content-Type: application/json

Request Body (OpenTelemetry Span JSON):
{
  "trace_id": "4bf92f3577b34da6a3ce929d0e0e4736",
  "span_id": "00f067aa0ba902b7",
  "parent_span_id": "0020000000000001",
  "name": "agent_orchestration.execute_workflow",
  "kind": "SPAN_KIND_INTERNAL",
  "start_time_unix_nano": 1696518000000000000,
  "end_time_unix_nano": 1696518002500000000,
  "attributes": {
    "service.name": "agent-orchestration-service",
    "organization_id": "uuid",
    "product_type": "voicebot",
    "workflow_id": "uuid",
    "agent_name": "discovery_voice_agent",
    "langgraph_state": "{...}",  // Serialized agent state
    "llm_calls": 3,
    "total_tokens": 1850
  },
  "status": {
    "code": "STATUS_CODE_OK"
  },
  "events": [
    {
      "time_unix_nano": 1696518001000000000,
      "name": "tool_invoked",
      "attributes": {
        "tool_name": "search_crunchbase",
        "tool_latency_ms": 450
      }
    }
  ]
}

Response (202 Accepted):
{
  "trace_id": "4bf92f3577b34da6a3ce929d0e0e4736",
  "span_id": "00f067aa0ba902b7",
  "ingested_at": "2025-10-15T10:00:02Z",
  "status": "accepted"
}
```

**2. Query Traces by Workflow**
```http
GET /api/v1/monitoring/traces/search
Authorization: Bearer {platform_engineer_jwt}
X-Tenant-ID: {organization_id}
Query Parameters:
- workflow_id: uuid
- start_time: 2025-10-15T00:00:00Z
- end_time: 2025-10-15T23:59:59Z
- service_name: agent-orchestration-service (optional)
- min_duration_ms: 5000 (optional - find slow traces)
- status: error (optional - filter by status)

Response (200 OK):
{
  "traces": [
    {
      "trace_id": "4bf92f3577b34da6a3ce929d0e0e4736",
      "root_span": {
        "name": "agent_orchestration.execute_workflow",
        "duration_ms": 2500,
        "status": "ok",
        "organization_id": "uuid",
        "workflow_id": "uuid"
      },
      "total_spans": 15,
      "service_count": 4,
      "services": ["agent-orchestration-service", "llm-gateway-service", "qdrant-service", "neo4j-service"],
      "total_llm_calls": 3,
      "total_tokens": 1850,
      "start_time": "2025-10-15T10:00:00Z",
      "end_time": "2025-10-15T10:00:02.5Z",
      "url": "https://monitoring.workflow.com/trace/4bf92f3577b34da6a3ce929d0e0e4736"
    }
  ],
  "total_results": 127,
  "page": 1,
  "page_size": 20
}
```

**3. Get Service Health Dashboard**
```http
GET /api/v1/monitoring/health
Authorization: Bearer {platform_engineer_jwt}
Query Parameters:
- time_window: 1h | 24h | 7d (default: 1h)

Response (200 OK):
{
  "timestamp": "2025-10-15T10:00:00Z",
  "services": [
    {
      "service_name": "agent-orchestration-service",
      "status": "healthy",
      "uptime_percentage": 99.98,
      "request_rate_rpm": 450,
      "error_rate_percentage": 0.02,
      "p50_latency_ms": 850,
      "p95_latency_ms": 2100,
      "p99_latency_ms": 3500,
      "active_incidents": 0,
      "last_deployment": "2025-10-14T15:30:00Z"
    },
    {
      "service_name": "llm-gateway-service",
      "status": "degraded",
      "uptime_percentage": 99.50,
      "request_rate_rpm": 2800,
      "error_rate_percentage": 1.2,  // Above 1% threshold
      "p50_latency_ms": 1200,
      "p95_latency_ms": 4500,
      "p99_latency_ms": 8000,
      "active_incidents": 1,
      "active_incident_ids": ["incident-uuid"],
      "last_deployment": "2025-10-15T09:00:00Z",
      "degradation_reason": "OpenAI API rate limiting detected"
    }
  ],
  "overall_system_health": "degraded",
  "active_incidents_total": 1
}
```

**4. Create Incident**
```http
POST /api/v1/monitoring/incidents
Authorization: Bearer {monitoring_service_jwt}  // Auto-created by monitoring or manual by engineer
Content-Type: application/json

Request Body:
{
  "title": "LLM Gateway error rate spike: 1.2% (threshold: 1.0%)",
  "severity": "P2",  // P0 (critical - system down) | P1 (high - major feature broken) | P2 (medium - degraded) | P3 (low - minor issue)
  "affected_services": ["llm-gateway-service"],
  "organization_id": "uuid",  // null for platform-wide incidents
  "description": "Error rate for LLM Gateway increased from 0.1% to 1.2% over the last 10 minutes. Primary errors: OpenAI rate limit (429) responses.",
  "detection_method": "automated_threshold",  // automated_threshold | manual | user_report
  "trace_ids": ["4bf92f3577b34da6a3ce929d0e0e4736", "..."],
  "metrics": {
    "error_rate_current": 1.2,
    "error_rate_threshold": 1.0,
    "affected_requests_count": 340,
    "time_window": "10m"
  }
}

Response (201 Created):
{
  "incident_id": "uuid",
  "title": "LLM Gateway error rate spike: 1.2% (threshold: 1.0%)",
  "severity": "P2",
  "status": "open",  // open | investigating | resolved | closed
  "created_at": "2025-10-15T10:00:00Z",
  "assigned_to": null,  // Will be assigned via PagerDuty escalation
  "pagerduty_incident_id": "PD12345",
  "slack_thread_url": "https://slack.com/archives/incidents/p1696518000",
  "url": "https://monitoring.workflow.com/incidents/uuid"
}

Event Published to Kafka:
Topic: monitoring_incidents
{
  "event_type": "incident_created",
  "incident_id": "uuid",
  "severity": "P2",
  "affected_services": ["llm-gateway-service"],
  "organization_id": "uuid",
  "timestamp": "2025-10-15T10:00:00Z"
}
```

**5. Get Incident Details with RCA**
```http
GET /api/v1/monitoring/incidents/{incident_id}
Authorization: Bearer {platform_engineer_jwt}

Response (200 OK):
{
  "incident_id": "uuid",
  "title": "LLM Gateway error rate spike: 1.2% (threshold: 1.0%)",
  "severity": "P2",
  "status": "investigating",
  "affected_services": ["llm-gateway-service"],
  "organization_id": "uuid",
  "created_at": "2025-10-15T10:00:00Z",
  "acknowledged_at": "2025-10-15T10:02:30Z",
  "acknowledged_by": {
    "user_id": "uuid",
    "name": "Sarah Chen",
    "role": "platform_engineer"
  },
  "timeline": [
    {
      "timestamp": "2025-10-15T10:00:00Z",
      "event": "Incident created (automated threshold breach)",
      "user": "system"
    },
    {
      "timestamp": "2025-10-15T10:01:00Z",
      "event": "PagerDuty alert sent to on-call engineer",
      "user": "system"
    },
    {
      "timestamp": "2025-10-15T10:02:30Z",
      "event": "Incident acknowledged by Sarah Chen",
      "user": "Sarah Chen"
    },
    {
      "timestamp": "2025-10-15T10:05:00Z",
      "event": "RCA generated by AI",
      "user": "system"
    }
  ],
  "ai_generated_rca": {
    "summary": "Root cause identified: OpenAI API rate limit exceeded due to traffic spike from new client onboarding (3 clients deployed simultaneously at 09:45 UTC).",
    "root_cause": "OpenAI API rate limit (10,000 RPM) exceeded. Current rate: 12,400 RPM.",
    "contributing_factors": [
      "3 new clients onboarded simultaneously without staggered deployment",
      "Semantic cache hit rate dropped from 60% to 20% due to novel use cases",
      "Rate limit alert threshold (8,000 RPM) was not configured"
    ],
    "affected_workflows": ["discovery_call", "demo_generation", "prd_creation"],
    "impact_analysis": {
      "total_affected_requests": 340,
      "failed_requests": 68,
      "degraded_requests": 272,
      "affected_clients": 3,
      "revenue_at_risk": "$0 (all trial clients)"
    },
    "recommendations": [
      "Configure rate limit alert at 80% threshold (8,000 RPM)",
      "Implement request queuing with exponential backoff for 429 errors",
      "Stagger client onboarding deployments (max 1 per hour)",
      "Increase semantic cache TTL to improve hit rate for common queries"
    ],
    "generated_at": "2025-10-15T10:05:00Z",
    "confidence": 0.92
  },
  "related_traces": [
    {
      "trace_id": "4bf92f3577b34da6a3ce929d0e0e4736",
      "workflow_id": "uuid",
      "error": "OpenAI API rate limit exceeded (429)",
      "timestamp": "2025-10-15T09:58:00Z"
    }
  ],
  "metrics_snapshot": {
    "error_rate_before": 0.1,
    "error_rate_peak": 1.2,
    "error_rate_current": 0.8,
    "request_rate_rpm_before": 8200,
    "request_rate_rpm_peak": 12400,
    "request_rate_rpm_current": 9500
  }
}
```

**6. Update Incident Status**
```http
PATCH /api/v1/monitoring/incidents/{incident_id}
Authorization: Bearer {platform_engineer_jwt}
Content-Type: application/json

Request Body:
{
  "status": "resolved",  // open | investigating | resolved | closed
  "resolution_notes": "Implemented request queuing with exponential backoff. Rate limit alert configured at 8,000 RPM. Semantic cache TTL increased to 24 hours.",
  "resolved_by": "uuid"
}

Response (200 OK):
{
  "incident_id": "uuid",
  "status": "resolved",
  "resolved_at": "2025-10-15T10:30:00Z",
  "resolution_duration_minutes": 30,
  "url": "https://monitoring.workflow.com/incidents/uuid"
}

Event Published to Kafka:
Topic: monitoring_incidents
{
  "event_type": "incident_resolved",
  "incident_id": "uuid",
  "severity": "P2",
  "resolution_duration_minutes": 30,
  "timestamp": "2025-10-15T10:30:00Z"
}
```

**7. Get SLA Compliance Dashboard**
```http
GET /api/v1/monitoring/sla/{organization_id}
Authorization: Bearer {csm_jwt}
Query Parameters:
- time_window: current_month | last_month | last_90_days

Response (200 OK):
{
  "organization_id": "uuid",
  "organization_name": "Acme Corp",
  "time_window": "current_month",
  "period": "2025-10-01 to 2025-10-31",
  "sla_commitments": {
    "uptime_percentage": 99.9,
    "p95_latency_ms": 3000,
    "error_rate_percentage": 0.5
  },
  "actual_performance": {
    "uptime_percentage": 99.95,
    "p95_latency_ms": 2100,
    "error_rate_percentage": 0.15
  },
  "compliance_status": "compliant",  // compliant | at_risk | breached
  "sla_budget_remaining": {
    "downtime_minutes_allowed": 43.2,  // 0.1% of month
    "downtime_minutes_used": 21.6,
    "downtime_minutes_remaining": 21.6,
    "percentage_used": 50.0
  },
  "incidents_this_period": [
    {
      "incident_id": "uuid",
      "title": "LLM Gateway error rate spike",
      "severity": "P2",
      "downtime_minutes": 0,  // Degraded but not down
      "sla_impacting": false
    }
  ],
  "breach_risk_alerts": [],
  "next_breach_prediction": null  // Null if no breach predicted
}
```

**8. Configure Alerting Rule**
```http
POST /api/v1/monitoring/alerts/rules
Authorization: Bearer {platform_engineer_jwt}
Content-Type: application/json

Request Body:
{
  "rule_name": "LLM Gateway Error Rate Alert",
  "service_name": "llm-gateway-service",
  "organization_id": null,  // null = platform-wide, uuid = client-specific
  "metric": "error_rate_percentage",
  "condition": "greater_than",
  "threshold": 1.0,
  "time_window": "10m",
  "severity": "P2",
  "notification_channels": ["pagerduty", "slack"],
  "escalation_policy_id": "uuid",
  "enabled": true
}

Response (201 Created):
{
  "rule_id": "uuid",
  "rule_name": "LLM Gateway Error Rate Alert",
  "created_at": "2025-10-15T10:00:00Z",
  "status": "active"
}
```

**9. Track LLM Quality Metrics**
```http
GET /api/v1/monitoring/llm/quality
Authorization: Bearer {platform_engineer_jwt}
X-Tenant-ID: {organization_id}
Query Parameters:
- start_time: 2025-10-15T00:00:00Z
- end_time: 2025-10-15T23:59:59Z
- model: gpt-4 (optional)
- workflow_type: discovery_call | demo_generation | prd_creation (optional)

Response (200 OK):
{
  "organization_id": "uuid",
  "time_window": "2025-10-15 00:00 - 23:59 UTC",
  "llm_metrics": {
    "total_requests": 12450,
    "total_tokens": 18500000,
    "total_cost_usd": 247.50,
    "average_latency_ms": 1200,
    "p95_latency_ms": 2800,
    "error_rate_percentage": 0.15,
    "semantic_cache_hit_rate": 0.58,
    "cost_saved_via_cache_usd": 144.00
  },
  "quality_metrics": {
    "average_quality_score": 0.87,  // 0-1 scale (based on human feedback, A/B test win rate)
    "hallucination_rate": 0.02,  // Detected via fact-checking tools
    "refusal_rate": 0.01,  // Model refused to answer
    "tone_consistency_score": 0.92,  // Matches system prompt tone
    "degradation_alerts": []
  },
  "model_breakdown": [
    {
      "model": "gpt-4",
      "requests": 8200,
      "tokens": 14500000,
      "cost_usd": 203.00,
      "average_latency_ms": 1500,
      "quality_score": 0.90
    },
    {
      "model": "gpt-3.5-turbo",
      "requests": 4250,
      "tokens": 4000000,
      "cost_usd": 44.50,
      "average_latency_ms": 600,
      "quality_score": 0.82
    }
  ],
  "workflow_breakdown": [
    {
      "workflow_type": "discovery_call",
      "requests": 5600,
      "average_quality_score": 0.88,
      "average_latency_ms": 1100
    }
  ]
}
```

**10. Get Integration Health Dashboard**
```http
GET /api/v1/monitoring/integrations/health
Authorization: Bearer {platform_engineer_jwt}
Query Parameters:
- time_window: 1h | 24h | 7d

Response (200 OK):
{
  "timestamp": "2025-10-15T10:00:00Z",
  "integrations": [
    {
      "integration_name": "Salesforce API",
      "provider": "salesforce",
      "status": "healthy",
      "uptime_percentage": 99.99,
      "request_rate_rpm": 120,
      "error_rate_percentage": 0.01,
      "average_latency_ms": 450,
      "p95_latency_ms": 850,
      "rate_limit_usage": {
        "limit_rpm": 1000,
        "current_rpm": 120,
        "percentage_used": 12.0
      },
      "active_clients_using": 24,
      "last_error": null
    },
    {
      "integration_name": "OpenAI API",
      "provider": "openai",
      "status": "degraded",
      "uptime_percentage": 99.50,
      "request_rate_rpm": 12400,
      "error_rate_percentage": 1.2,
      "average_latency_ms": 1200,
      "p95_latency_ms": 4500,
      "rate_limit_usage": {
        "limit_rpm": 10000,
        "current_rpm": 12400,
        "percentage_used": 124.0  // Exceeding limit!
      },
      "active_clients_using": 47,
      "last_error": {
        "error_code": "rate_limit_exceeded",
        "error_message": "Rate limit exceeded (429)",
        "occurred_at": "2025-10-15T09:58:00Z",
        "occurrences_last_hour": 68
      }
    }
  ],
  "overall_integration_health": "degraded"
}
```

#### Frontend Components

**1. Service Health Dashboard**
- Component: `ServiceHealthDashboard.tsx`
- Features:
  - Real-time service status grid (green/yellow/red) with uptime percentages
  - Request rate, error rate, and latency (P50/P95/P99) charts per service
  - Active incident count with severity badges
  - One-click drill-down to service-specific traces
  - Auto-refresh every 30 seconds
  - Filter by time window (1h/24h/7d)

**2. Distributed Trace Viewer**
- Component: `TraceViewer.tsx`
- Features:
  - Waterfall visualization of trace spans with service colors
  - LangGraph agent state inspection at each workflow step
  - LLM call details (prompt/completion/tokens/cost) in side panel
  - Span metadata with custom attributes (organization_id, workflow_id, etc.)
  - Error highlighting with stack traces
  - Export trace as JSON or share permalink
  - Search traces by workflow_id, trace_id, or service name

**3. Incident Management Dashboard**
- Component: `IncidentDashboard.tsx`
- Features:
  - Incident list with filters (severity, status, affected service)
  - AI-generated RCA report viewer with confidence score
  - Incident timeline with acknowledgment/resolution events
  - Assign incident to engineer with PagerDuty integration
  - Add notes and update status (open → investigating → resolved → closed)
  - Related traces and metrics snapshot visualization
  - MTTR (Mean Time To Resolution) analytics

**4. SLA Compliance Dashboard**
- Component: `SLAComplianceDashboard.tsx`
- Features:
  - Per-client SLA commitment vs actual performance comparison
  - Uptime budget remaining visualization (progress bar with remaining minutes)
  - Breach risk alerts with predicted breach date
  - Incident list filtered by SLA-impacting events
  - Historical compliance trend charts (monthly view)
  - Export SLA report as PDF for client QBRs

**5. LLM Quality Dashboard**
- Component: `LLMQualityDashboard.tsx`
- Features:
  - Token usage and cost breakdown by model (GPT-4 vs GPT-3.5)
  - Semantic cache hit rate with cost savings calculation
  - Quality score trends (based on human feedback and A/B tests)
  - Hallucination/refusal rate tracking
  - Latency distribution by model and workflow type
  - Degradation alerts with threshold breach visualization

**6. Integration Health Dashboard**
- Component: `IntegrationHealthDashboard.tsx`
- Features:
  - External API status grid (Salesforce, HubSpot, Zendesk, OpenAI, etc.)
  - Rate limit usage bars with percentage of limit consumed
  - Error rate and latency trends per integration
  - Active clients using each integration count
  - Last error details with occurrence count
  - Uptime percentage with SLA compliance indicators

**7. Alerting Rules Manager**
- Component: `AlertingRulesManager.tsx`
- Features:
  - Create/edit/delete alerting rules with visual rule builder
  - Select metric, condition, threshold, and time window via dropdowns
  - Configure notification channels (PagerDuty, Slack, email)
  - Assign escalation policies with multi-stage escalation
  - Enable/disable rules with toggle switch
  - Test alert rule before saving (simulate threshold breach)

**8. RCA Report Viewer**
- Component: `RCAReportViewer.tsx`
- Features:
  - AI-generated RCA summary with root cause and contributing factors
  - Impact analysis (affected requests, clients, revenue at risk)
  - Recommendations list with priority ranking
  - Related traces embedded with one-click drill-down
  - Metrics snapshot before/during/after incident
  - Export RCA report as Markdown or PDF for postmortem documentation

**State Management:**
- React Query for real-time trace/incident/metrics fetching with auto-refresh
- WebSocket for live dashboard updates (service health, active incidents)
- Zustand for UI state (selected trace, active filters, dashboard time window)
- LocalStorage for user preferences (default time window, favorite dashboards)

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Platform Engineer**
   - Role: Monitor system health, investigate incidents, configure alerting rules
   - Access: All monitoring dashboards, trace viewer, incident management, alerting configuration
   - Permissions: `read:all_traces`, `write:incidents`, `update:alert_rules`, `deploy:fixes`
   - Workflows:
     1. Receives PagerDuty alert → Acknowledges incident → Reviews RCA report → Investigates traces → Deploys fix → Resolves incident
     2. Reviews service health dashboard daily → Identifies degradation trends → Configures proactive alerts
   - On-Call: 24/7 rotation with escalation to senior engineers after 15 minutes

2. **Site Reliability Engineer (SRE)**
   - Role: Define SLAs, maintain uptime targets, optimize observability infrastructure
   - Access: SLA compliance dashboard, service health dashboard, integration health, trace analytics
   - Permissions: `read:all_metrics`, `write:sla_definitions`, `configure:retention_policies`, `optimize:trace_sampling`
   - Workflows:
     1. Reviews SLA compliance weekly → Identifies at-risk clients → Adjusts infrastructure capacity
     2. Analyzes trace data to identify performance bottlenecks → Recommends optimizations to service teams
   - Approval: Required for SLA changes, trace retention policy updates

3. **Customer Success Manager (CSM)**
   - Role: Monitor client-specific SLA compliance, proactive breach prevention
   - Access: Client-scoped SLA dashboard, client-specific incidents, LLM quality metrics for assigned clients
   - Permissions: `read:client_sla:{client_id}`, `read:client_incidents:{client_id}`, `export:sla_reports`
   - Workflows:
     1. Receives SLA breach risk alert → Contacts client proactively → Coordinates with platform team for resolution
     2. Generates monthly SLA report for QBR → Shares uptime/performance metrics with client
   - Escalation: Escalates SLA breaches to VP of Customer Success and Engineering Manager

4. **Product Manager**
   - Role: Track product health metrics, identify reliability improvement opportunities
   - Access: High-level service health dashboard, incident trends, MTTR analytics
   - Permissions: `read:incident_analytics`, `read:service_uptime`, `read:feature_health`
   - Workflows:
     1. Reviews weekly incident report → Identifies recurring issues → Prioritizes reliability roadmap items
     2. Tracks new feature health post-launch → Monitors error rates and latency
   - Decision Authority: Approves reliability sprints, defines acceptable SLA targets

**AI Agents:**

1. **RCA Generation Agent**
   - Responsibility: Analyze traces, logs, and metrics to generate root cause analysis reports for incidents
   - Tools: OpenTelemetry trace querying, log aggregation APIs, GPT-4 for natural language RCA generation, correlation analysis algorithms
   - Autonomy: Fully autonomous - automatically generates RCA within 5 minutes of incident creation
   - Escalation: If confidence score <0.7, flags RCA for human review with "Low Confidence" badge

2. **Anomaly Detection Agent**
   - Responsibility: Detect anomalies in metrics (error rate spikes, latency increases) using ML models
   - Tools: Prometheus metrics querying, Prophet time-series forecasting, custom anomaly detection models
   - Autonomy: Supervised - flags anomalies but requires engineer approval to create incident
   - Escalation: If anomaly persists for >15 minutes without engineer action, auto-creates P3 incident

3. **Incident Correlation Agent**
   - Responsibility: Correlate multiple alerts into single incident to reduce noise
   - Tools: Alert stream processing, similarity matching algorithms, incident deduplication logic
   - Autonomy: Fully autonomous - automatically merges related alerts into parent incident
   - Escalation: If correlation confidence <0.8, creates separate incidents and notifies SRE for manual review

4. **SLA Breach Predictor Agent**
   - Responsibility: Predict SLA breaches before they occur based on current error budget consumption
   - Tools: Error budget tracking, trend analysis, linear regression forecasting
   - Autonomy: Fully autonomous - sends predictive alerts when breach likely within 7 days
   - Escalation: If breach predicted within 24 hours, escalates to CSM and platform engineering manager

**Approval Workflows:**
1. Alert rule creation/modification → Platform Engineer creates → Auto-approved (audit log maintained)
2. SLA definition change → SRE proposes → VP of Engineering approves → Publishes to Configuration Service
3. Incident severity escalation (P3 → P1) → On-call engineer escalates → Engineering Manager approves
4. RCA report publication → AI generates → Platform Engineer reviews (if confidence <0.7) → Publishes to incident
5. Trace retention policy change → SRE proposes → CFO approves (cost impact) → Platform Engineer implements

---

## 12. Analytics Service

#### Objectives
- **Primary Purpose**: Real-time and batch analytics for agent conversations, business KPIs, funnel conversion, and Thompson Sampling-based A/B testing with comprehensive client reporting
- **Business Value**: Increases conversion rates by 15-30% through data-driven optimization, enables client self-service reporting (80% reduction in custom report requests), provides ROI attribution for deployed agents
- **Product Differentiation**: LLM conversation analytics with intent detection, sentiment analysis, multi-armed bandit optimization (Thompson Sampling), real-time funnel visualization, revenue attribution across full customer lifecycle
- **Scope Boundaries**:
  - **Does**: Event tracking and aggregation, conversation analytics (intents, sentiment, quality scores), business metric calculation (conversion rates, ARR, pipeline value), A/B test orchestration with Thompson Sampling, custom dashboard builder, automated report generation, revenue attribution modeling
  - **Does Not**: Operational monitoring (Monitoring Service does), log storage (external logging platforms do), customer success health scoring (Customer Success Service does), raw trace storage (Monitoring Service does)

#### Requirements

**Functional Requirements:**
1. Real-time event tracking API with sub-100ms ingestion latency
2. Conversation analytics with intent classification, sentiment analysis, and topic extraction
3. Business funnel tracking (lead → qualified → demo → proposal → closed-won)
4. A/B experiment framework with Thompson Sampling (multi-armed bandit) allocation
5. Custom KPI dashboard builder with drag-and-drop metrics
6. Automated report generation (daily/weekly/monthly) with email delivery
7. Revenue attribution across customer touchpoints (discovery → demo → PRD → implementation)
8. Cohort analysis for client retention and expansion tracking
9. LLM quality metrics aggregation (from Monitoring Service) for client reporting
10. Export analytics to external BI tools (Tableau, Looker, Power BI) via API
11. Real-time dashboard updates via WebSocket for live metrics
12. Multi-tenant data isolation with client-scoped analytics queries

**Non-Functional Requirements:**
- Event ingestion: <100ms P95 from publish to queryable
- Dashboard query performance: <3s for 30-day aggregations
- Support 100M+ events per month across all tenants
- 99.9% uptime for analytics API
- Real-time dashboard updates: <500ms from event to UI refresh
- Data retention: 13 months for detailed events, 5 years for aggregated metrics
- Multi-tenant query isolation with zero cross-tenant data leakage

**Dependencies:**
- **All Microservices (0-17)** *[See all MICROSERVICES_ARCHITECTURE*.md documents]* (publish events for tracking)
- **Monitoring Engine Service** *[See Service 11 above]* (LLM quality metrics, token usage data)
- **Configuration Management Service** *[See Service 10 above]* (A/B test variant configurations)
- **Agent Orchestration Service** *[See Service 8 above]* (conversation metadata, intent classification)
- **CRM Integration Service** *[See Service 15 below]* (revenue data from Salesforce/HubSpot)
- External APIs:
  - **ClickHouse**: High-performance event storage and aggregation
  - **Apache Kafka**: Event stream ingestion
  - **Redis**: Real-time metric caching for dashboard performance
  - **S3**: Long-term metric archive and report storage

**Data Storage:**
- PostgreSQL: A/B experiment definitions, dashboard configurations, scheduled reports, cohort definitions
- ClickHouse: Event data (conversation events, funnel events, business events), pre-aggregated metrics
- Redis: Real-time metric cache (last 5 minutes), dashboard session state
- S3: Generated reports (PDF/CSV/Excel), long-term metric archive (5+ years)

#### Features

**Must-Have:**
1. ✅ Real-time event tracking API with multi-event batch ingestion
2. ✅ Conversation analytics dashboard (intents, sentiments, topics, quality scores)
3. ✅ Business funnel visualization with conversion rates at each stage
4. ✅ A/B testing with Thompson Sampling allocation for optimal variant selection
5. ✅ Custom KPI dashboard builder with 20+ pre-built metric widgets
6. ✅ Automated report generation with email/Slack delivery
7. ✅ Revenue attribution modeling across customer lifecycle
8. ✅ Cohort retention analysis with expansion tracking
9. ✅ LLM cost and quality metrics per client/workflow
10. ✅ Export API for external BI tools (Tableau, Looker connectors)
11. ✅ Real-time WebSocket updates for live dashboards

**Nice-to-Have:**
12. 🔄 Predictive analytics using ML models (churn prediction, upsell scoring)
13. 🔄 Natural language query interface ("Show me conversion rate for last month")
14. 🔄 Anomaly detection for business metrics (sudden drop in conversion alerts)
15. 🔄 Comparative analytics (compare client performance against benchmarks)
16. 🔄 Automated insight generation ("Discovery call sentiment improved 12% this week")

**Feature Interactions:**
- Agent completes discovery call → Publishes `conversation_completed` event → Analytics ingests → Updates real-time dashboard → Tracks funnel stage (lead → qualified)
- Demo generated → Publishes `demo_generated` event → Analytics tracks → Revenue attribution model updated → Client dashboard shows demo ROI
- A/B test running → Thompson Sampling agent selects variant → Conversation outcome tracked → Posterior distribution updated → Next allocation probability adjusted
- Monthly report scheduled → Analytics aggregates metrics → Generates PDF report → Emails to client stakeholders
- Client views dashboard → WebSocket connection established → Real-time events streamed → Dashboard updates without refresh
- Business metric threshold breached (conversion rate drops >10%) → Alert published to `analytics_alerts` topic → Customer Success notified

#### API Specification

**1. Track Events (Batch Ingestion)**
```http
POST /api/v1/analytics/events
Authorization: Bearer {service_jwt}
X-Tenant-ID: {organization_id}
Content-Type: application/json

Request Body:
{
  "events": [
    {
      "event_type": "conversation_completed",
      "organization_id": "uuid",
      "product_type": "voicebot",
      "timestamp": "2025-10-15T10:30:00Z",
      "conversation_id": "uuid",
      "workflow_type": "discovery_call",
      "properties": {
        "duration_seconds": 420,
        "user_intent": "product_inquiry",
        "sentiment": "positive",
        "sentiment_score": 0.85,
        "quality_score": 0.92,
        "llm_calls": 12,
        "total_tokens": 3400,
        "cost_usd": 0.045,
        "outcome": "qualified",  // qualified | not_interested | callback_requested
        "next_funnel_stage": "demo_scheduled"
      }
    },
    {
      "event_type": "demo_generated",
      "organization_id": "uuid",
      "product_type": "chatbot",
      "timestamp": "2025-10-15T10:45:00Z",
      "demo_id": "uuid",
      "lead_id": "uuid",
      "properties": {
        "generation_time_seconds": 120,
        "llm_calls": 8,
        "total_tokens": 5200,
        "cost_usd": 0.068,
        "demo_quality_score": 0.88,
        "sent_to_client": true
      }
    }
  ]
}

Response (202 Accepted):
{
  "events_accepted": 2,
  "ingestion_id": "uuid",
  "estimated_query_availability": "2025-10-15T10:30:01Z"  // <1s from now
}
```

**2. Get Business Funnel Dashboard**
```http
GET /api/v1/analytics/funnel
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Query Parameters:
- start_date: 2025-10-01
- end_date: 2025-10-31
- product_type: voicebot (optional)

Response (200 OK):
{
  "organization_id": "uuid",
  "time_period": "2025-10-01 to 2025-10-31",
  "funnel_stages": [
    {
      "stage": "lead",
      "count": 1200,
      "conversion_to_next": 0.75,  // 75% convert to qualified
      "average_time_in_stage_hours": 2.5
    },
    {
      "stage": "qualified",
      "count": 900,
      "conversion_to_next": 0.67,  // 67% get demo
      "average_time_in_stage_hours": 24
    },
    {
      "stage": "demo_sent",
      "count": 603,
      "conversion_to_next": 0.45,  // 45% request proposal
      "average_time_in_stage_hours": 72
    },
    {
      "stage": "proposal_sent",
      "count": 271,
      "conversion_to_next": 0.35,  // 35% close
      "average_time_in_stage_hours": 120
    },
    {
      "stage": "closed_won",
      "count": 95,
      "conversion_to_next": null,
      "average_time_in_stage_hours": null,
      "total_arr_usd": 285000
    }
  ],
  "overall_conversion_rate": 0.079,  // 7.9% lead-to-close
  "average_sales_cycle_days": 9.5,
  "top_drop_off_stage": "demo_sent",
  "top_drop_off_rate": 0.55  // 55% don't convert after demo
}
```

**3. Create A/B Test Experiment**
```http
POST /api/v1/analytics/experiments
Authorization: Bearer {product_manager_jwt}
X-Tenant-ID: {organization_id}
Content-Type: application/json

Request Body:
{
  "experiment_name": "Discovery Call Tone Test: Casual vs Professional",
  "organization_id": "uuid",
  "product_type": "voicebot",
  "workflow_type": "discovery_call",
  "variants": [
    {
      "variant_id": "control",
      "variant_name": "Professional Tone",
      "config_id": "uuid",  // Points to existing configuration
      "initial_allocation": 0.5
    },
    {
      "variant_id": "treatment",
      "variant_name": "Casual Tone",
      "config_id": "uuid",
      "initial_allocation": 0.5
    }
  ],
  "allocation_strategy": "thompson_sampling",  // thompson_sampling | fixed | round_robin
  "success_metric": "qualified_rate",  // qualified_rate | sentiment_score | demo_request_rate
  "minimum_sample_size": 100,  // Per variant
  "maximum_duration_days": 14,
  "start_immediately": true
}

Response (201 Created):
{
  "experiment_id": "uuid",
  "experiment_name": "Discovery Call Tone Test: Casual vs Professional",
  "status": "running",  // draft | running | paused | completed
  "started_at": "2025-10-15T10:00:00Z",
  "estimated_completion": "2025-10-29T10:00:00Z",
  "variants": [
    {
      "variant_id": "control",
      "current_allocation": 0.5,
      "samples_collected": 0,
      "success_rate": null
    },
    {
      "variant_id": "treatment",
      "current_allocation": 0.5,
      "samples_collected": 0,
      "success_rate": null
    }
  ],
  "url": "https://analytics.workflow.com/experiments/uuid"
}

Event Published to Kafka:
Topic: analytics_experiments
{
  "event_type": "experiment_started",
  "experiment_id": "uuid",
  "organization_id": "uuid",
  "workflow_type": "discovery_call",
  "allocation_strategy": "thompson_sampling",
  "timestamp": "2025-10-15T10:00:00Z"
}
```

**4. Get A/B Test Results**
```http
GET /api/v1/analytics/experiments/{experiment_id}
Authorization: Bearer {product_manager_jwt}

Response (200 OK):
{
  "experiment_id": "uuid",
  "experiment_name": "Discovery Call Tone Test: Casual vs Professional",
  "status": "running",
  "started_at": "2025-10-15T10:00:00Z",
  "duration_days": 7,
  "allocation_strategy": "thompson_sampling",
  "success_metric": "qualified_rate",
  "variants": [
    {
      "variant_id": "control",
      "variant_name": "Professional Tone",
      "current_allocation": 0.35,  // Thompson Sampling reduced allocation (performing worse)
      "samples_collected": 245,
      "successes": 147,
      "success_rate": 0.60,
      "confidence_interval_95": [0.54, 0.66],
      "posterior_alpha": 148,  // Beta distribution parameters
      "posterior_beta": 99
    },
    {
      "variant_id": "treatment",
      "variant_name": "Casual Tone",
      "current_allocation": 0.65,  // Thompson Sampling increased allocation (performing better)
      "samples_collected": 455,
      "successes": 318,
      "success_rate": 0.70,
      "confidence_interval_95": [0.66, 0.74],
      "posterior_alpha": 319,
      "posterior_beta": 138
    }
  ],
  "statistical_significance": {
    "is_significant": true,
    "p_value": 0.012,
    "confidence_level": 0.95,
    "winning_variant": "treatment",
    "improvement_over_control": 0.167,  // 16.7% improvement
    "probability_best": {
      "control": 0.08,
      "treatment": 0.92  // 92% probability treatment is best
    }
  },
  "recommendation": {
    "action": "deploy_winner",  // continue | deploy_winner | stop_inconclusive
    "reason": "Treatment variant shows statistically significant 16.7% improvement with 92% probability of being best variant.",
    "deploy_variant": "treatment"
  },
  "estimated_completion": "2025-10-22T10:00:00Z"
}
```

**5. Get Conversation Analytics**
```http
GET /api/v1/analytics/conversations
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Query Parameters:
- start_date: 2025-10-01
- end_date: 2025-10-31
- product_type: voicebot (optional)
- workflow_type: discovery_call (optional)

Response (200 OK):
{
  "organization_id": "uuid",
  "time_period": "2025-10-01 to 2025-10-31",
  "total_conversations": 2450,
  "conversation_metrics": {
    "average_duration_seconds": 385,
    "average_quality_score": 0.87,
    "average_sentiment_score": 0.79,
    "average_llm_calls_per_conversation": 11,
    "average_tokens_per_conversation": 3200,
    "average_cost_per_conversation_usd": 0.042
  },
  "intent_breakdown": [
    {
      "intent": "product_inquiry",
      "count": 980,
      "percentage": 0.40,
      "average_quality_score": 0.89
    },
    {
      "intent": "pricing_question",
      "count": 735,
      "percentage": 0.30,
      "average_quality_score": 0.85
    },
    {
      "intent": "technical_question",
      "count": 490,
      "percentage": 0.20,
      "average_quality_score": 0.88
    },
    {
      "intent": "complaint",
      "count": 245,
      "percentage": 0.10,
      "average_quality_score": 0.82
    }
  ],
  "sentiment_distribution": {
    "positive": 0.65,
    "neutral": 0.25,
    "negative": 0.10
  },
  "outcome_breakdown": [
    {
      "outcome": "qualified",
      "count": 1838,
      "percentage": 0.75
    },
    {
      "outcome": "not_interested",
      "count": 490,
      "percentage": 0.20
    },
    {
      "outcome": "callback_requested",
      "count": 122,
      "percentage": 0.05
    }
  ],
  "trends": {
    "quality_score_trend": "+5.2%",  // vs previous period
    "sentiment_trend": "+3.1%",
    "qualified_rate_trend": "+2.8%"
  }
}
```

**6. Create Custom Dashboard**
```http
POST /api/v1/analytics/dashboards
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Content-Type: application/json

Request Body:
{
  "dashboard_name": "Weekly Executive Summary",
  "organization_id": "uuid",
  "layout": [
    {
      "widget_type": "metric_card",
      "metric": "total_conversations",
      "time_range": "last_7_days",
      "position": {"row": 0, "col": 0, "width": 3, "height": 2}
    },
    {
      "widget_type": "funnel_chart",
      "time_range": "last_30_days",
      "position": {"row": 0, "col": 3, "width": 6, "height": 4}
    },
    {
      "widget_type": "line_chart",
      "metric": "qualified_rate",
      "time_range": "last_90_days",
      "grouping": "daily",
      "position": {"row": 2, "col": 0, "width": 6, "height": 3}
    },
    {
      "widget_type": "sentiment_distribution",
      "time_range": "last_30_days",
      "position": {"row": 2, "col": 6, "width": 3, "height": 3}
    }
  ],
  "shared_with": ["user_uuid_1", "user_uuid_2"],
  "is_public": false
}

Response (201 Created):
{
  "dashboard_id": "uuid",
  "dashboard_name": "Weekly Executive Summary",
  "url": "https://analytics.workflow.com/dashboards/uuid",
  "created_at": "2025-10-15T10:00:00Z",
  "widget_count": 4
}
```

**7. Schedule Automated Report**
```http
POST /api/v1/analytics/reports/schedule
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Content-Type: application/json

Request Body:
{
  "report_name": "Monthly Performance Report",
  "organization_id": "uuid",
  "report_type": "business_summary",  // business_summary | conversation_analytics | funnel_analysis | llm_cost_report
  "frequency": "monthly",  // daily | weekly | monthly
  "schedule_day": 1,  // 1st of month
  "schedule_time": "09:00",  // 9 AM UTC
  "recipients": [
    {
      "email": "ceo@acme.com",
      "name": "Jane Smith"
    },
    {
      "email": "cto@acme.com",
      "name": "John Doe"
    }
  ],
  "delivery_channels": ["email", "slack"],
  "slack_channel_id": "C0123456789",
  "format": "pdf",  // pdf | csv | excel
  "include_sections": [
    "executive_summary",
    "funnel_performance",
    "conversation_analytics",
    "llm_cost_breakdown",
    "month_over_month_comparison"
  ]
}

Response (201 Created):
{
  "schedule_id": "uuid",
  "report_name": "Monthly Performance Report",
  "next_generation": "2025-11-01T09:00:00Z",
  "status": "active",
  "created_at": "2025-10-15T10:00:00Z"
}
```

**8. Get Revenue Attribution Report**
```http
GET /api/v1/analytics/revenue-attribution
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Query Parameters:
- start_date: 2025-10-01
- end_date: 2025-10-31

Response (200 OK):
{
  "organization_id": "uuid",
  "time_period": "2025-10-01 to 2025-10-31",
  "total_revenue_usd": 285000,
  "closed_deals": 95,
  "revenue_by_touchpoint": [
    {
      "touchpoint": "discovery_call",
      "attributed_revenue_usd": 85500,
      "attribution_percentage": 0.30,
      "deals_influenced": 95
    },
    {
      "touchpoint": "demo_generated",
      "attributed_revenue_usd": 71250,
      "attribution_percentage": 0.25,
      "deals_influenced": 95
    },
    {
      "touchpoint": "prd_created",
      "attributed_revenue_usd": 57000,
      "attribution_percentage": 0.20,
      "deals_influenced": 78
    },
    {
      "touchpoint": "implementation_completed",
      "attributed_revenue_usd": 42750,
      "attribution_percentage": 0.15,
      "deals_influenced": 65
    },
    {
      "touchpoint": "qbr_conducted",
      "attributed_revenue_usd": 28500,
      "attribution_percentage": 0.10,
      "deals_influenced": 45
    }
  ],
  "attribution_model": "multi_touch_linear",  // first_touch | last_touch | multi_touch_linear | time_decay
  "roi_by_workflow": [
    {
      "workflow_type": "discovery_call",
      "total_cost_usd": 5200,  // LLM + infrastructure
      "attributed_revenue_usd": 85500,
      "roi": 15.4  // 15.4x ROI
    },
    {
      "workflow_type": "demo_generation",
      "total_cost_usd": 3800,
      "attributed_revenue_usd": 71250,
      "roi": 17.8
    }
  ],
  "customer_lifetime_value_avg": 3000,
  "cost_per_acquisition_avg": 195
}
```

**9. Get Cohort Retention Analysis**
```http
GET /api/v1/analytics/cohorts
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Query Parameters:
- cohort_by: month_joined | quarter_joined | product_type
- start_date: 2025-01-01
- end_date: 2025-10-31

Response (200 OK):
{
  "organization_id": "uuid",
  "cohort_by": "month_joined",
  "cohorts": [
    {
      "cohort_name": "January 2025",
      "cohort_size": 45,
      "retention_by_month": {
        "month_0": 1.00,  // 100% at start
        "month_1": 0.93,
        "month_2": 0.89,
        "month_3": 0.84,
        "month_4": 0.82,
        "month_5": 0.80,
        "month_6": 0.78,
        "month_7": 0.78,
        "month_8": 0.76,
        "month_9": 0.76
      },
      "expansion_revenue": {
        "month_0_arr": 135000,
        "current_arr": 182000,
        "expansion_rate": 0.35  // 35% expansion
      }
    }
  ],
  "overall_retention_month_6": 0.82,
  "overall_expansion_rate": 0.28
}
```

**10. Export to External BI Tool**
```http
POST /api/v1/analytics/export
Authorization: Bearer {client_jwt}
X-Tenant-ID: {organization_id}
Content-Type: application/json

Request Body:
{
  "export_type": "tableau_connector",  // tableau_connector | looker_api | power_bi | csv
  "metrics": [
    "total_conversations",
    "qualified_rate",
    "funnel_conversion_rates",
    "revenue_attribution"
  ],
  "start_date": "2025-01-01",
  "end_date": "2025-10-31",
  "granularity": "daily",  // hourly | daily | weekly | monthly
  "destination": {
    "type": "s3",
    "bucket": "acme-bi-exports",
    "path": "/analytics/2025-10/"
  }
}

Response (202 Accepted):
{
  "export_id": "uuid",
  "status": "processing",
  "estimated_completion": "2025-10-15T10:05:00Z",
  "download_url": "https://analytics.workflow.com/exports/uuid"  // Available when complete
}
```

#### Frontend Components

**1. Business Funnel Dashboard**
- Component: `FunnelDashboard.tsx`
- Features:
  - Animated funnel visualization with conversion rates between stages
  - Click-through to see conversion details per stage
  - Time-series conversion rate trends (daily/weekly/monthly)
  - Drop-off analysis with top reasons for stage exit
  - Cohort comparison (compare this month vs last month)
  - Export funnel data to CSV/Excel

**2. A/B Test Manager**
- Component: `ABTestManager.tsx`
- Features:
  - Create new experiments with variant configuration
  - Real-time allocation visualization (Thompson Sampling updates)
  - Statistical significance calculator with confidence intervals
  - Variant performance comparison charts
  - Experiment status tracking (draft/running/paused/completed)
  - Deploy winner with one-click configuration rollout
  - Experiment history and learnings repository

**3. Conversation Analytics Dashboard**
- Component: `ConversationAnalyticsDashboard.tsx`
- Features:
  - Intent distribution pie chart with drill-down
  - Sentiment trend line chart (positive/neutral/negative over time)
  - Quality score heatmap by hour/day of week
  - Topic extraction word cloud
  - Outcome distribution (qualified/not interested/callback)
  - Filter by product type, workflow, date range
  - Export conversation transcripts matching filters

**4. Custom Dashboard Builder**
- Component: `DashboardBuilder.tsx`
- Features:
  - Drag-and-drop widget placement on grid layout
  - 20+ pre-built widget types (metric cards, charts, tables, funnels)
  - Configure data source and time range per widget
  - Share dashboard with team members via link
  - Set dashboard refresh interval (real-time to daily)
  - Duplicate dashboard templates
  - Mobile-responsive preview

**5. Revenue Attribution Report**
- Component: `RevenueAttributionReport.tsx`
- Features:
  - Multi-touch attribution model visualization
  - Touchpoint influence chart (discovery → demo → PRD → close)
  - ROI calculator per workflow type
  - Customer lifetime value (CLV) trends
  - Cost per acquisition (CPA) breakdown
  - Attribution model selector (first-touch, last-touch, linear, time-decay)
  - Export to executive presentation format (PDF)

**6. Cohort Retention Analysis**
- Component: `CohortAnalysis.tsx`
- Features:
  - Retention matrix heatmap (cohorts × months)
  - Expansion revenue tracking per cohort
  - Churn prediction overlay
  - Segment cohorts by product type, industry, deal size
  - Compare cohorts side-by-side
  - Export cohort data to CSV

**7. Real-Time Metrics Dashboard**
- Component: `RealTimeMetricsDashboard.tsx`
- Features:
  - Live conversation count with sparkline
  - Real-time qualified rate updates via WebSocket
  - Active experiment performance (live variant allocation)
  - Today vs yesterday comparison metrics
  - Alert thresholds with breach notifications
  - Auto-refresh every 10 seconds (WebSocket-powered)

**8. Scheduled Reports Manager**
- Component: `ReportScheduleManager.tsx`
- Features:
  - Create/edit/delete report schedules
  - Preview generated report before scheduling
  - Manage recipient lists (email, Slack channels)
  - View report generation history and delivery status
  - Manually trigger report generation
  - Template library for common report types

**State Management:**
- React Query for analytics data fetching with automatic cache invalidation
- WebSocket for real-time dashboard updates (conversations, experiments, metrics)
- Zustand for UI state (selected filters, date ranges, dashboard layouts)
- IndexedDB for offline dashboard viewing (cached metrics)

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Data Analyst**
   - Role: Build custom dashboards, analyze experiments, generate insights from conversation data
   - Access: All analytics dashboards, A/B test results, cohort analysis, SQL query interface
   - Permissions: `read:all_analytics`, `write:dashboards`, `export:data`, `query:clickhouse`
   - Workflows:
     1. Product Manager requests analysis → Data Analyst builds custom dashboard → Shares insights in weekly meeting
     2. Monitors A/B tests daily → Identifies statistically significant winners → Recommends deployment
   - Tools: SQL query builder, Jupyter notebooks for advanced analysis

2. **Product Manager**
   - Role: Define success metrics, run A/B tests, optimize conversion funnels
   - Access: Business funnel dashboard, A/B test manager, revenue attribution, conversation analytics
   - Permissions: `read:product_analytics`, `write:experiments`, `deploy:winning_variants`
   - Workflows:
     1. Hypothesizes optimization → Creates A/B test → Monitors results → Deploys winner
     2. Reviews weekly funnel dashboard → Identifies drop-off stage → Prioritizes optimization work
   - Decision Authority: Approves A/B test deployment, defines success metrics

3. **Client Business Owner**
   - Role: Monitor ROI, track business outcomes, access self-service reports
   - Access: Client-scoped dashboards (funnel, revenue attribution, conversation analytics), scheduled reports
   - Permissions: `read:client_analytics:{organization_id}`, `export:reports`, `configure:dashboards`
   - Workflows:
     1. Receives monthly automated report via email → Reviews business metrics → Shares with executive team
     2. Logs into analytics portal → Views real-time funnel performance → Monitors qualified lead rate
   - Escalation: Contacts CSM if metrics decline

4. **Executive Leadership (CEO/CTO)**
   - Role: Monitor high-level business metrics, track ROI across all clients
   - Access: Executive summary dashboard, revenue attribution, cohort retention
   - Permissions: `read:executive_analytics`, `read:cross_client_benchmarks`
   - Workflows:
     1. Views executive dashboard weekly → Tracks ARR growth and client retention → Identifies trends
     2. Reviews quarterly business review reports → Evaluates platform ROI
   - Decision Authority: Approves major metric definition changes

**AI Agents:**

1. **Conversation Intent Classifier**
   - Responsibility: Classify user intent from conversation transcripts (product_inquiry, pricing_question, technical_question, complaint)
   - Tools: GPT-4 for intent classification, custom fine-tuned model for domain-specific intents
   - Autonomy: Fully autonomous - classifies all conversations in real-time
   - Escalation: If confidence <0.7, flags conversation for manual review

2. **Sentiment Analysis Agent**
   - Responsibility: Analyze conversation sentiment (positive/neutral/negative) and extract emotional tone
   - Tools: Fine-tuned BERT model for sentiment analysis, GPT-4 for tone extraction
   - Autonomy: Fully autonomous - scores all conversations
   - Escalation: Flags highly negative sentiment (score <0.3) for immediate CSM review

3. **Thompson Sampling Allocation Agent**
   - Responsibility: Dynamically adjust A/B test variant allocation based on Bayesian posterior distributions
   - Tools: Thompson Sampling algorithm, Beta distribution calculations, statistical significance testing
   - Autonomy: Fully autonomous - updates allocation probabilities after each sample
   - Escalation: If one variant reaches 95% probability of being best, suggests early experiment termination

4. **Automated Insight Generator**
   - Responsibility: Detect significant trends and generate natural language insights ("Qualified rate increased 12% this week")
   - Tools: Statistical trend detection, GPT-4 for insight narrative generation
   - Autonomy: Supervised - generates insights but requires Data Analyst review before client sharing
   - Escalation: If detects negative trend (>10% metric decline), immediately alerts Product Manager

5. **Anomaly Detection Agent**
   - Responsibility: Detect anomalies in business metrics (sudden drop in conversion, spike in costs)
   - Tools: Prophet time-series forecasting, Z-score anomaly detection, custom ML models
   - Autonomy: Fully autonomous - alerts on anomalies exceeding 2 standard deviations
   - Escalation: Critical anomalies (>3 sigma) escalate to on-call Product Manager via PagerDuty

**Approval Workflows:**
1. A/B test creation → Product Manager creates → Auto-approved (audit log maintained)
2. A/B test deployment (deploy winning variant) → Product Manager deploys → Auto-approved if statistical significance reached
3. Custom dashboard sharing externally → Data Analyst creates → VP of Product approves → Shares with client
4. New metric definition → Data Analyst proposes → Product Manager approves → Adds to metric catalog
5. Export to external BI tool → Client requests → Data Analyst configures → Auto-approved (audit log maintained)

---

## 13. Customer Success Service

#### Objectives
- **Primary Purpose**: AI-driven customer success automation with predictive health scoring, churn prevention, expansion identification, automated QBR generation, and lifecycle messaging orchestration
- **Business Value**: Reduces churn by 30-40%, increases expansion revenue by 25%, automates 80% of QBR preparation, enables proactive intervention 14-21 days before churn risk materializes
- **Product Differentiation**: ChurnZero-style predictive CS AI™ with multi-signal health scoring, automated playbook execution, relationship strength analysis, expansion opportunity scoring, integration with hyperpersonalization engine for targeted campaigns
- **Scope Boundaries**:
  - **Does**: Health score calculation (multi-signal), churn prediction (ML-based), expansion opportunity identification, automated QBR document generation, lifecycle messaging (onboarding, adoption, renewal), playbook recommendations, CSM task automation, relationship mapping
  - **Does Not**: Manual meeting scheduling (calendar integration does), direct email/SMS sending (Hyperpersonalization Service does), business analytics (Analytics Service does), support ticket management (Support Service does)

#### Requirements

**Functional Requirements:**
1. Multi-signal health scoring with 15+ inputs (product usage, sentiment, support tickets, payment status, engagement, NPS)
2. ML-based churn prediction with 14-21 day early warning (85%+ accuracy)
3. Expansion opportunity scoring (upsell/cross-sell likelihood)
4. Automated QBR document generation with business outcomes, ROI analysis, and recommendations
5. Lifecycle messaging orchestration (onboarding, adoption milestones, renewal reminders)
6. Playbook engine with trigger-based automated workflows (low health → outreach playbook)
7. Relationship strength analysis (executive sponsor engagement, multi-threading)
8. CSM task automation and prioritization (focus on high-risk/high-value accounts)
9. Account segmentation (strategic, high-touch, tech-touch, at-risk)
10. Success plan tracking with milestones and outcomes
11. Integration with Hyperpersonalization Service for targeted campaigns
12. NPS/CSAT survey orchestration and trend analysis

**Non-Functional Requirements:**
- Health score calculation: <5s for real-time updates
- Churn prediction accuracy: >85% with 14-21 day lead time
- Support 10,000+ client accounts with health scoring
- 99.9% uptime for CSM dashboard
- Health score updates: Real-time on critical signals (support escalation, payment failure)
- Data retention: 5 years for historical health scores and predictions

**Dependencies:**
- **Analytics Service** *[See Service 12 above]* (product usage metrics, engagement data, conversation analytics)
- **Monitoring Engine Service** *[See Service 11 above]* (SLA compliance, uptime metrics)
- **Support Engine Service** *[See Service 14 below]* (support ticket data, resolution times, CSAT scores)
- **CRM Integration Service** *[See Service 15 below]* (account data, ARR, renewal dates from Salesforce/HubSpot)
- **Hyperpersonalization Service** *[See Service 20 below]* (lifecycle messaging, email campaigns)
- **Agent Orchestration Service** *[See Service 8 above]* (conversation sentiment, engagement quality)
- External APIs:
  - **Calendly/Cal.com**: QBR meeting scheduling
  - **Zoom/Google Meet**: Video conferencing links
  - **Slack API**: CSM notifications and alerts
  - **SendGrid**: Email delivery for QBR invites

**Data Storage:**
- PostgreSQL: Health scores, churn predictions, expansion scores, success plans, playbooks, account segments
- ClickHouse: Health score history (time-series), engagement events
- Redis: Real-time health score cache, active playbook state
- S3: Generated QBR documents (PDF/PPTX), success plan templates

#### Features

**Must-Have:**
1. ✅ Multi-signal health scoring with configurable weights
2. ✅ ML-based churn prediction with confidence scores
3. ✅ Expansion opportunity identification (upsell/cross-sell scoring)
4. ✅ Automated QBR generation with business outcomes and ROI
5. ✅ Lifecycle messaging triggers (onboarding, adoption, renewal)
6. ✅ Playbook engine with conditional workflows
7. ✅ CSM dashboard with account health overview
8. ✅ Account segmentation and prioritization
9. ✅ Relationship strength analysis
10. ✅ Success plan templates and tracking
11. ✅ NPS/CSAT survey orchestration

**Nice-to-Have:**
12. 🔄 Predictive expansion timing ("Contact in 45 days for optimal upsell")
13. 🔄 Executive sponsor engagement tracking
14. 🔄 Automated success story generation for case studies
15. 🔄 Competitive win/loss analysis integration
16. 🔄 Revenue waterfall forecasting with churn/expansion

**Feature Interactions:**
- Health score drops below 50 → Churn risk playbook triggered → CSM notified → Task created → Outreach email sent via Hyperpersonalization Service
- Product usage spike detected → Expansion opportunity scored → CSM notified → Upsell playbook suggested
- QBR due in 30 days → QBR generation triggered → Document created → Meeting invite sent → Calendly link shared
- Support ticket escalated → Health score immediately updated → CSM alerted if account in strategic segment
- Payment failed → Health score drops 20 points → High-priority CSM task created → Finance team notified
- NPS score <7 (detractor) → Churn prediction confidence increases → Executive escalation playbook triggered

#### API Specification

**1. Get Account Health Dashboard**
```http
GET /api/v1/customer-success/health/{organization_id}
Authorization: Bearer {csm_jwt}

Response (200 OK):
{
  "organization_id": "uuid",
  "organization_name": "Acme Corp",
  "health_score": 72,  // 0-100 scale
  "health_status": "healthy",  // at_risk (0-50) | needs_attention (51-70) | healthy (71-85) | excellent (86-100)
  "previous_health_score": 68,
  "health_trend": "improving",  // improving | stable | declining
  "health_score_breakdown": {
    "product_usage": {
      "score": 85,
      "weight": 0.30,
      "signals": {
        "daily_active_users": 45,
        "feature_adoption_rate": 0.78,
        "api_calls_per_day": 1200
      }
    },
    "engagement": {
      "score": 70,
      "weight": 0.20,
      "signals": {
        "last_login_days_ago": 2,
        "conversation_frequency": "high",
        "csm_response_rate": 0.95
      }
    },
    "support": {
      "score": 60,
      "weight": 0.15,
      "signals": {
        "open_tickets": 3,
        "average_resolution_time_hours": 18,
        "csat_score": 4.2
      }
    },
    "financial": {
      "score": 80,
      "weight": 0.15,
      "signals": {
        "payment_status": "current",
        "days_to_renewal": 120,
        "arr_usd": 36000
      }
    },
    "sentiment": {
      "score": 75,
      "weight": 0.10,
      "signals": {
        "nps_score": 8,
        "conversation_sentiment_avg": 0.78,
        "recent_feedback": "positive"
      }
    },
    "relationship": {
      "score": 65,
      "weight": 0.10,
      "signals": {
        "executive_sponsor_engaged": true,
        "multi_threading_score": 0.70,
        "champion_identified": true
      }
    }
  },
  "churn_prediction": {
    "churn_risk": "low",  // low (0-30%) | medium (31-60%) | high (61-100%)
    "churn_probability": 0.15,  // 15% chance in next 90 days
    "confidence": 0.88,
    "predicted_churn_date": null,  // null if low risk
    "top_risk_factors": [
      "3 open support tickets (avg 1.2 for healthy accounts)",
      "Feature adoption below benchmark (78% vs 85% avg)"
    ]
  },
  "expansion_opportunity": {
    "score": 82,  // 0-100 likelihood
    "opportunity_type": "upsell",  // upsell | cross_sell | seat_expansion
    "estimated_arr_increase": 12000,
    "recommended_timing": "next_30_days",
    "reasoning": "High product usage (85%), positive sentiment (NPS 8), approaching renewal (120 days)"
  },
  "csm_assigned": {
    "user_id": "uuid",
    "name": "Sarah Johnson",
    "email": "sarah@workflow.com"
  },
  "account_segment": "strategic",  // strategic | high_touch | tech_touch | at_risk
  "days_since_last_qbr": 82,
  "next_qbr_due": "2025-11-15"
}
```

**2. Generate QBR Document**
```http
POST /api/v1/customer-success/qbr/generate
Authorization: Bearer {csm_jwt}
Content-Type: application/json

Request Body:
{
  "organization_id": "uuid",
  "qbr_period": "Q3_2025",  // Q1_2025 | Q2_2025 | monthly | annual
  "include_sections": [
    "executive_summary",
    "business_outcomes",
    "product_usage_analytics",
    "roi_analysis",
    "success_milestones",
    "upcoming_roadmap",
    "action_items"
  ],
  "format": "pptx",  // pdf | pptx | docx
  "branding": "acme_corp"  // Use client's branding
}

Response (202 Accepted):
{
  "qbr_id": "uuid",
  "status": "generating",
  "estimated_completion": "2025-10-15T10:02:00Z",
  "sections_included": 7
}

// Poll for completion
GET /api/v1/customer-success/qbr/{qbr_id}
Response (200 OK):
{
  "qbr_id": "uuid",
  "status": "completed",
  "organization_id": "uuid",
  "qbr_period": "Q3_2025",
  "generated_at": "2025-10-15T10:01:45Z",
  "download_url": "https://cs.workflow.com/qbr/uuid/download",
  "preview_url": "https://cs.workflow.com/qbr/uuid/preview",
  "summary": {
    "total_conversations": 2450,
    "qualified_leads": 1838,
    "conversion_rate": 0.75,
    "arr_impact": 285000,
    "roi": "15.4x",
    "key_wins": [
      "Achieved 75% qualification rate (target: 70%)",
      "Generated $285K ARR from 95 closed deals",
      "Reduced sales cycle from 14 days to 9.5 days"
    ],
    "recommendations": [
      "Expand to additional use case: post-sales support bot",
      "Increase voicebot deployment (higher qualified rate than chatbot)"
    ]
  }
}
```

**3. Trigger Playbook**
```http
POST /api/v1/customer-success/playbooks/trigger
Authorization: Bearer {csm_jwt}
Content-Type: application/json

Request Body:
{
  "playbook_id": "churn_risk_intervention",  // churn_risk_intervention | expansion_outreach | onboarding_nurture | renewal_preparation
  "organization_id": "uuid",
  "trigger_reason": "Health score dropped below 50 (critical threshold)",
  "override_automation": false,  // If true, requires manual CSM approval for each step
  "context": {
    "health_score": 48,
    "churn_probability": 0.68,
    "top_risk_factors": ["3 open support tickets", "Low engagement (last login 14 days ago)"]
  }
}

Response (201 Created):
{
  "playbook_execution_id": "uuid",
  "playbook_name": "Churn Risk Intervention",
  "status": "running",
  "started_at": "2025-10-15T10:00:00Z",
  "steps": [
    {
      "step_number": 1,
      "action": "create_csm_task",
      "description": "High-priority outreach: Acme Corp at churn risk",
      "status": "completed",
      "completed_at": "2025-10-15T10:00:01Z"
    },
    {
      "step_number": 2,
      "action": "send_email_campaign",
      "description": "Send personalized check-in email via Hyperpersonalization Service",
      "status": "in_progress",
      "estimated_completion": "2025-10-15T10:05:00Z"
    },
    {
      "step_number": 3,
      "action": "schedule_executive_call",
      "description": "Schedule call between CSM and client executive sponsor",
      "status": "pending",
      "dependencies": ["step_2_email_response"]
    }
  ]
}

Event Published to Kafka:
Topic: customer_success_events
{
  "event_type": "playbook_triggered",
  "playbook_id": "churn_risk_intervention",
  "organization_id": "uuid",
  "trigger_reason": "health_score_critical",
  "timestamp": "2025-10-15T10:00:00Z"
}
```

**4. Get Churn Predictions**
```http
GET /api/v1/customer-success/churn-predictions
Authorization: Bearer {csm_jwt}
Query Parameters:
- risk_level: high | medium | low (optional - filter by risk)
- csm_id: uuid (optional - filter by assigned CSM)
- segment: strategic | high_touch | tech_touch (optional)
- limit: 50 (default)

Response (200 OK):
{
  "predictions": [
    {
      "organization_id": "uuid",
      "organization_name": "Acme Corp",
      "churn_probability": 0.68,
      "churn_risk": "high",
      "confidence": 0.92,
      "predicted_churn_date": "2025-11-28",
      "days_until_predicted_churn": 44,
      "current_health_score": 48,
      "arr_at_risk_usd": 36000,
      "top_risk_factors": [
        "Health score declined 30 points in 21 days",
        "3 open support tickets (2x normal)",
        "No executive sponsor engagement in 45 days",
        "Payment failed once (now current)"
      ],
      "recommended_actions": [
        "Trigger churn risk intervention playbook",
        "Schedule executive business review within 7 days",
        "Resolve open support tickets with priority escalation"
      ],
      "csm_assigned": "Sarah Johnson",
      "last_outreach": "2025-10-01"
    },
    {
      "organization_id": "uuid",
      "organization_name": "TechStart Inc",
      "churn_probability": 0.55,
      "churn_risk": "medium",
      "confidence": 0.85,
      "predicted_churn_date": "2025-12-15",
      "days_until_predicted_churn": 61,
      "current_health_score": 62,
      "arr_at_risk_usd": 24000,
      "top_risk_factors": [
        "Low feature adoption (60% vs 85% benchmark)",
        "NPS score declined from 9 to 6"
      ],
      "recommended_actions": [
        "Schedule product training session",
        "Share success stories from similar clients"
      ],
      "csm_assigned": "Michael Chen",
      "last_outreach": "2025-10-10"
    }
  ],
  "total_at_risk_arr_usd": 156000,
  "total_accounts": 12,
  "risk_distribution": {
    "high": 3,
    "medium": 5,
    "low": 4
  }
}
```

**5. Get Expansion Opportunities**
```http
GET /api/v1/customer-success/expansion-opportunities
Authorization: Bearer {csm_jwt}
Query Parameters:
- min_score: 70 (minimum expansion score)
- opportunity_type: upsell | cross_sell | seat_expansion (optional)
- limit: 50

Response (200 OK):
{
  "opportunities": [
    {
      "organization_id": "uuid",
      "organization_name": "Growth Co",
      "expansion_score": 88,
      "opportunity_type": "seat_expansion",
      "current_arr_usd": 48000,
      "estimated_expansion_arr_usd": 24000,
      "expansion_percentage": 0.50,  // 50% increase
      "recommended_timing": "next_30_days",
      "reasoning": [
        "Product usage at 95% capacity (45/50 seats active daily)",
        "High health score (82) and positive sentiment (NPS 9)",
        "Recent feature requests indicate need for more users",
        "120 days until renewal (optimal timing)"
      ],
      "recommended_pitch": "Your team is maxing out their current seat allocation with 45/50 users active daily. Adding 25 more seats would support your growing team and comes with a 20% volume discount.",
      "csm_assigned": "Sarah Johnson",
      "last_expansion_discussion": null
    },
    {
      "organization_id": "uuid",
      "organization_name": "Enterprise LLC",
      "expansion_score": 82,
      "opportunity_type": "cross_sell",
      "current_arr_usd": 72000,
      "estimated_expansion_arr_usd": 36000,
      "expansion_percentage": 0.50,
      "recommended_timing": "next_60_days",
      "reasoning": [
        "Successfully deployed chatbot, now candidate for voicebot",
        "High satisfaction with chatbot (CSAT 4.8/5)",
        "Support tickets show voice channel inquiries",
        "Executive sponsor highly engaged"
      ],
      "recommended_pitch": "Your chatbot is thriving with a 78% qualification rate. Clients using both chatbot + voicebot see 35% higher conversion rates. Let's explore adding voice to your channels.",
      "csm_assigned": "Michael Chen",
      "last_expansion_discussion": "2025-09-15"
    }
  ],
  "total_expansion_potential_arr_usd": 240000,
  "total_opportunities": 8
}
```

**6. Schedule Lifecycle Message**
```http
POST /api/v1/customer-success/lifecycle-messages
Authorization: Bearer {csm_jwt}
Content-Type: application/json

Request Body:
{
  "organization_id": "uuid",
  "message_type": "renewal_reminder",  // onboarding_welcome | adoption_milestone | renewal_reminder | upsell_promotion | at_risk_check_in
  "schedule_type": "relative",  // immediate | relative | absolute
  "relative_trigger": "renewal_date_minus_60_days",  // For relative scheduling
  "personalization_context": {
    "csm_name": "Sarah Johnson",
    "account_health_score": 72,
    "recent_wins": ["Achieved 75% qualification rate"],
    "upcoming_roadmap_features": ["Multi-language support", "Voice analytics dashboard"]
  },
  "delivery_channels": ["email", "slack"],  // Delegates to Hyperpersonalization Service
  "content_template_id": "renewal_60_day_template"
}

Response (201 Created):
{
  "message_id": "uuid",
  "message_type": "renewal_reminder",
  "scheduled_send_date": "2025-12-15T09:00:00Z",
  "status": "scheduled",
  "delivery_channels": ["email", "slack"]
}
```

**7. Update Account Segment**
```http
PATCH /api/v1/customer-success/segments/{organization_id}
Authorization: Bearer {csm_jwt}
Content-Type: application/json

Request Body:
{
  "segment": "strategic",  // strategic | high_touch | tech_touch | at_risk
  "reason": "ARR increased to $100K+ (strategic threshold)",
  "override_automation": true  // Manual CSM override
}

Response (200 OK):
{
  "organization_id": "uuid",
  "previous_segment": "high_touch",
  "new_segment": "strategic",
  "updated_at": "2025-10-15T10:00:00Z",
  "updated_by": "Sarah Johnson",
  "segment_rules_applied": {
    "csm_touchpoints_per_month": 4,  // Increased from 2
    "qbr_frequency": "quarterly",  // Increased from semi-annual
    "priority_support": true,
    "dedicated_csm": true
  }
}
```

#### Frontend Components

**1. Account Health Dashboard**
- Component: `AccountHealthDashboard.tsx`
- Features:
  - Health score visualization with trend sparkline
  - Multi-signal breakdown (usage, engagement, support, financial, sentiment, relationship)
  - Churn risk indicator with predicted date
  - Expansion opportunity card with estimated ARR increase
  - Quick actions (trigger playbook, schedule QBR, send message)
  - Activity timeline (recent interactions, support tickets, payments)

**2. Portfolio Overview (CSM Dashboard)**
- Component: `PortfolioOverview.tsx`
- Features:
  - Grid view of all assigned accounts with health scores
  - Filter/sort by segment, health status, churn risk, ARR
  - Aggregate metrics (total ARR, at-risk ARR, expansion pipeline)
  - Task list prioritized by urgency and impact
  - Alerts for accounts requiring immediate attention
  - Bulk actions (trigger playbook for multiple accounts)

**3. Churn Risk Analyzer**
- Component: `ChurnRiskAnalyzer.tsx`
- Features:
  - List of accounts at churn risk sorted by probability
  - Risk factor breakdown with heatmap
  - Time-to-churn countdown
  - Recommended action checklist
  - Historical churn predictions vs actual outcomes (accuracy tracking)
  - Export at-risk accounts to CSV

**4. Expansion Pipeline**
- Component: `ExpansionPipeline.tsx`
- Features:
  - Kanban board (identified → qualified → pitched → closed)
  - Expansion score with reasoning and pitch suggestions
  - ARR impact calculator
  - Timing recommendations (optimal contact window)
  - Track expansion discussions and outcomes
  - Win/loss analysis for closed expansion opportunities

**5. QBR Generator**
- Component: `QBRGenerator.tsx`
- Features:
  - Select QBR period and sections to include
  - Preview generated document before download
  - Customize branding and formatting
  - Schedule QBR meeting with Calendly integration
  - Share QBR link with client stakeholders
  - Template library for different client types

**6. Playbook Manager**
- Component: `PlaybookManager.tsx`
- Features:
  - List of available playbooks with trigger conditions
  - Create custom playbooks with conditional steps
  - Active playbook executions with step-by-step progress
  - Playbook performance analytics (success rate, time to resolution)
  - Pause/resume/cancel playbook execution
  - Playbook library sharing across CSM team

**7. Lifecycle Message Scheduler**
- Component: `LifecycleMessageScheduler.tsx`
- Features:
  - Calendar view of scheduled messages
  - Create message campaigns with triggers (renewal date, milestone)
  - Personalization preview with account context
  - Delivery channel selection (email, Slack, in-app)
  - Message performance tracking (open rate, click rate, response rate)
  - A/B test message variants

**8. Success Plan Tracker**
- Component: `SuccessPlanTracker.tsx`
- Features:
  - Define success milestones with due dates
  - Track completion status with progress bars
  - Link milestones to business outcomes (ARR, usage, NPS)
  - Assign action items to CSM or client stakeholders
  - Generate success plan reports for QBRs
  - Template library (onboarding plans, expansion plans, renewal plans)

**State Management:**
- React Query for account health, churn predictions, expansion opportunities with auto-refresh
- WebSocket for real-time health score updates (critical signals)
- Zustand for UI state (selected account, active filters, dashboard views)
- LocalStorage for CSM preferences (default segment filter, dashboard layout)

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Customer Success Manager (CSM)**
   - Role: Manage assigned client portfolio, prevent churn, drive expansion, conduct QBRs
   - Access: Portfolio dashboard, account health, churn predictions, expansion opportunities, playbook execution, QBR generator
   - Permissions: `read:assigned_accounts`, `write:playbooks`, `generate:qbrs`, `update:segments`
   - Workflows:
     1. Reviews portfolio dashboard daily → Identifies at-risk accounts → Triggers intervention playbook → Schedules outreach call
     2. Expansion opportunity identified → Reviews pitch suggestion → Schedules discussion with client → Tracks in expansion pipeline
     3. QBR due in 30 days → Generates QBR document → Schedules meeting → Conducts review → Documents outcomes
   - Tools: Calendly for scheduling, Slack for client communication, Zoom for meetings

2. **VP of Customer Success**
   - Role: Monitor team performance, forecast churn/expansion, optimize CS operations
   - Access: Executive CS dashboard, team performance metrics, churn/expansion forecasts, playbook effectiveness
   - Permissions: `read:all_accounts`, `read:team_performance`, `configure:playbooks`, `approve:segment_changes`
   - Workflows:
     1. Reviews weekly CS metrics → Identifies underperforming CSMs → Provides coaching
     2. Forecasts quarterly churn and expansion → Reports to executive team → Adjusts CS strategy
   - Decision Authority: Approves segment rule changes, playbook standardization, CS tooling budget

3. **Account Executive (AE)**
   - Role: Monitor expansion opportunities, coordinate with CSM on upsell/cross-sell
   - Access: Expansion pipeline, account health (for owned accounts), success plans
   - Permissions: `read:expansion_opportunities`, `update:expansion_pipeline`, `read:account_health:{owned_accounts}`
   - Workflows:
     1. Receives expansion opportunity alert → Coordinates with CSM → Pitches expansion → Closes deal
     2. Monitors account health post-sale → Escalates concerns to CSM
   - Collaboration: Joint calls with CSM for strategic accounts

**AI Agents:**

1. **Health Score Calculator Agent**
   - Responsibility: Calculate multi-signal health score in real-time based on 15+ inputs
   - Tools: Weighted scoring algorithm, configurable signal weights, threshold detection
   - Autonomy: Fully autonomous - updates health scores continuously
   - Escalation: If health score drops >20 points in 7 days, alerts CSM immediately

2. **Churn Prediction Agent**
   - Responsibility: Predict churn probability using ML models (Random Forest, XGBoost)
   - Tools: Historical churn data, feature engineering (usage trends, engagement patterns), scikit-learn models
   - Autonomy: Fully autonomous - generates daily predictions for all accounts
   - Escalation: If churn probability >60% and confidence >85%, triggers churn risk playbook automatically

3. **Expansion Opportunity Scorer**
   - Responsibility: Identify and score expansion opportunities (upsell, cross-sell, seat expansion)
   - Tools: Product usage analysis, sentiment analysis, renewal timing, GPT-4 for pitch generation
   - Autonomy: Fully autonomous - scores opportunities daily, generates pitch suggestions
   - Escalation: Expansion score >80 → Notifies CSM and AE with recommended timing and pitch

4. **QBR Generator Agent**
   - Responsibility: Generate comprehensive QBR documents with business outcomes, ROI, and recommendations
   - Tools: GPT-4 for narrative generation, Chart.js for visualizations, data aggregation from Analytics Service
   - Autonomy: Supervised - generates draft QBR, requires CSM review before sharing with client
   - Escalation: If data quality issues detected (missing metrics), flags for CSM review

5. **Playbook Orchestration Agent**
   - Responsibility: Execute playbook workflows with conditional logic and multi-step automation
   - Tools: Workflow engine, Hyperpersonalization Service API, task management system
   - Autonomy: Semi-autonomous - executes playbook steps automatically unless override_automation=true
   - Escalation: If playbook step fails (e.g., email bounce), notifies CSM and suggests alternative action

**Approval Workflows:**
1. Playbook trigger (automated) → Health score breach → Playbook auto-executes → CSM notified (no approval needed)
2. Playbook trigger (manual) → CSM initiates → Auto-approved (audit log maintained)
3. Account segment change (automated) → ARR threshold crossed → Auto-approved → CSM notified
4. Account segment change (manual) → CSM requests → VP of CS approves (if downgrade from strategic)
5. QBR sharing with client → QBR generated → CSM reviews → Auto-approved to share

---

## 14. Support Engine Service

#### Objectives
- **Primary Purpose**: AI-powered support automation with intelligent ticket triage, sentiment-based escalation, automated resolution for common issues, and knowledge base generation
- **Business Value**: Resolves 70% of tickets automatically, reduces first response time from hours to <2 minutes, enables 24/7 support coverage, reduces support cost per ticket by 60%
- **Product Differentiation**: Zendesk-style intelligent triage with AI-powered resolution suggestions, sentiment analysis for priority escalation, automated support documentation generation, integration with platform knowledge (conversations, deployments, configurations)
- **Scope Boundaries**:
  - **Does**: Ticket creation (email, in-app, API), intelligent triage and categorization, sentiment analysis, automated resolution for common issues, human agent escalation, knowledge base search, support documentation generation, SLA tracking
  - **Does Not**: Customer success workflows (Customer Success Service does), CRM data management (CRM Integration Service does), platform monitoring (Monitoring Service does), direct client communication (Hyperpersonalization Service does)

#### Requirements

**Functional Requirements:**
1. Multi-channel ticket creation (email, in-app widget, API, Slack)
2. Intelligent ticket triage with category and priority classification
3. Sentiment analysis for automatic priority escalation (negative sentiment → high priority)
4. AI-powered resolution suggestions from knowledge base
5. Automated resolution for common issues (password reset, configuration questions, deployment status)
6. Human agent escalation with context handoff
7. Knowledge base search with semantic similarity
8. Automated support documentation generation from resolved tickets
9. SLA tracking with breach alerting
10. Support analytics (resolution time, CSAT, ticket volume by category)
11. Integration with Monitoring Service for incident-related tickets
12. Ticket assignment routing (round-robin, skill-based, workload-based)

**Non-Functional Requirements:**
- First response time: <2 minutes for automated resolution, <15 minutes for human-escalated tickets
- Automated resolution rate: >70% for Tier 1 issues
- Support 10,000+ organizations with multi-tenant ticket isolation
- 99.9% uptime for support ticket creation
- Knowledge base search latency: <1s for semantic query
- SLA tracking accuracy: 100% (no missed breach alerts)

**Dependencies:**
- **Monitoring Engine Service** *[See Service 11 above]* (incident data, service health for context-aware resolution)
- **Configuration Management Service** *[See Service 10 above]* (configuration history for troubleshooting)
- **Customer Success Service** *[See Service 13 above]* (CSAT score updates, ticket count for health scoring)
- **Organization Management Service** *[See MICROSERVICES_ARCHITECTURE.md Service 0]* (user permissions, organization data)
- **Agent Orchestration Service** *[See Service 8 above]* (deployment status, conversation logs)
- **Hyperpersonalization Service** *[See Service 20 below]* (email notifications)
- External APIs:
  - **SendGrid**: Email ticket creation and notifications
  - **Slack API**: Slack-based ticket creation and agent notifications
  - **Qdrant**: Vector search for knowledge base semantic similarity
  - **Twilio**: SMS support alerts (optional)

**Data Storage:**
- PostgreSQL: Tickets, comments, assignments, SLA definitions, agent availability, CSAT responses
- Qdrant: Knowledge base articles (vector embeddings for semantic search)
- Redis: Active ticket cache, agent online status, ticket assignment queue
- S3: Ticket attachments, generated support documentation

#### Features

**Must-Have:**
1. ✅ Multi-channel ticket creation (email, in-app, API, Slack)
2. ✅ Intelligent ticket triage (category, priority, urgency classification)
3. ✅ Sentiment analysis with automatic escalation for negative sentiment
4. ✅ AI-powered resolution suggestions from knowledge base
5. ✅ Automated resolution for Tier 1 issues (70%+ success rate)
6. ✅ Human agent escalation with full context handoff
7. ✅ Knowledge base semantic search
8. ✅ Ticket assignment routing (round-robin, skill-based, workload-balanced)
9. ✅ SLA tracking with breach alerting
10. ✅ Support analytics dashboard (resolution time, CSAT, volume trends)
11. ✅ Automated support doc generation from ticket clusters

**Nice-to-Have:**
12. 🔄 Predictive ticket volume forecasting for agent staffing
13. 🔄 Multilingual support with auto-translation
14. 🔄 Video call escalation for complex issues
15. 🔄 Customer self-service portal with knowledge base
16. 🔄 Agent performance scoring and coaching recommendations

**Feature Interactions:**
- Client sends email to support@workflow.com → Ticket created → AI triages as "Configuration Question" → Searches knowledge base → Finds relevant article → Sends resolution → Ticket closed
- Ticket created with negative sentiment ("This is terrible!") → Priority escalated to P1 → Assigned to senior support engineer → Slack notification sent
- Ticket unresolved after 3 AI attempts → Escalates to human agent → Agent reviews AI conversation history → Resolves issue → AI learns from resolution
- SLA breach predicted (response time 80% elapsed) → Alert sent to support manager → Additional agent assigned to ticket
- Monitoring Service detects incident → Auto-creates support tickets for affected organizations → Links tickets to incident → Updates tickets when incident resolved
- 10 tickets with similar issue detected → AI generates support documentation → Adds to knowledge base → Future similar tickets auto-resolved

#### API Specification

**1. Create Support Ticket**
```http
POST /api/v1/support/tickets
Authorization: Bearer {client_jwt}
X-Organization-ID: {organization_id}
Content-Type: application/json

Request Body:
{
  "subject": "Voicebot not responding after configuration change",
  "description": "I changed the system prompt 2 hours ago and now the voicebot isn't responding to calls. This is urgent as we have a campaign running.",
  "category": null,  // null = AI will classify
  "priority": null,  // null = AI will determine
  "channel": "email",  // email | in_app | api | slack
  "reporter": {
    "name": "Jane Smith",
    "email": "jane@acme.com",
    "user_id": "uuid"
  },
  "context": {
    "product_type": "voicebot",
    "config_id": "uuid",
    "last_config_change_timestamp": "2025-10-15T08:00:00Z",
    "deployment_id": "uuid"
  },
  "attachments": [
    {
      "filename": "screenshot.png",
      "url": "https://uploads.workflow.com/uuid",
      "size_bytes": 245000
    }
  ]
}

Response (201 Created):
{
  "ticket_id": "uuid",
  "ticket_number": "SUPPORT-12345",
  "subject": "Voicebot not responding after configuration change",
  "status": "open",  // open | in_progress | awaiting_customer | resolved | closed
  "category": "deployment_issue",  // AI-classified
  "priority": "high",  // AI-determined (urgent keywords + context)
  "sentiment": "negative",  // AI-analyzed (-0.65 score)
  "sentiment_score": -0.65,
  "estimated_resolution_time": "15 minutes",
  "sla_breach_time": "2025-10-15T11:00:00Z",
  "assigned_to": null,  // Will be assigned shortly
  "created_at": "2025-10-15T10:00:00Z",
  "url": "https://support.workflow.com/tickets/uuid",
  "ai_resolution_attempted": false
}

Event Published to Kafka:
Topic: support_tickets
{
  "event_type": "ticket_created",
  "ticket_id": "uuid",
  "organization_id": "uuid",
  "category": "deployment_issue",
  "priority": "high",
  "sentiment": "negative",
  "timestamp": "2025-10-15T10:00:00Z"
}
```

**2. AI Attempted Resolution**
```http
POST /api/v1/support/tickets/{ticket_id}/ai-resolve
Authorization: Bearer {support_service_jwt}  // Internal service call
Content-Type: application/json

Request Body:
{
  "ticket_id": "uuid",
  "resolution_strategy": "knowledge_base_search"  // knowledge_base_search | automated_action | escalate
}

Response (200 OK):
{
  "ticket_id": "uuid",
  "ai_resolution_result": "partial_resolution",  // full_resolution | partial_resolution | failed | escalated
  "knowledge_base_articles_found": [
    {
      "article_id": "uuid",
      "title": "Troubleshooting Voicebot Deployment Issues",
      "relevance_score": 0.92,
      "excerpt": "If your voicebot stops responding after a configuration change, check the following..."
    }
  ],
  "suggested_resolution": "Based on your description, it appears the recent configuration change may not have been properly deployed. I've found that clicking 'Rollback to Previous Version' in the Configuration Portal resolves this issue in 95% of cases. Would you like me to guide you through this process?",
  "automated_actions_taken": [
    {
      "action": "checked_deployment_status",
      "result": "Deployment in progress (stuck at 85% for 1 hour)",
      "recommendation": "Restart deployment or rollback"
    },
    {
      "action": "checked_configuration_validation",
      "result": "Configuration is valid (no schema errors)"
    }
  ],
  "confidence": 0.88,
  "response_sent_to_customer": true,
  "escalation_recommended": false
}
```

**3. Escalate to Human Agent**
```http
POST /api/v1/support/tickets/{ticket_id}/escalate
Authorization: Bearer {client_jwt or support_agent_jwt}
Content-Type: application/json

Request Body:
{
  "ticket_id": "uuid",
  "escalation_reason": "AI resolution unsuccessful after 2 attempts",
  "notes": "Customer confirmed rollback didn't resolve the issue. Requires deeper investigation.",
  "requested_agent_skill": "voicebot_deployment_expert",  // Optional skill-based routing
  "urgency": "high"
}

Response (200 OK):
{
  "ticket_id": "uuid",
  "status": "escalated",
  "assigned_to": {
    "agent_id": "uuid",
    "name": "Michael Chen",
    "email": "michael@workflow.com",
    "specialization": "voicebot_deployment_expert"
  },
  "escalated_at": "2025-10-15T10:15:00Z",
  "ai_conversation_summary": "Customer reported voicebot not responding after config change at 08:00. AI suggested rollback (attempt 1), customer tried but issue persists. AI checked deployment status (stuck at 85%) and config validation (passed). Requires manual deployment investigation.",
  "estimated_response_time": "15 minutes"
}

Event Published to Kafka:
Topic: support_tickets
{
  "event_type": "ticket_escalated",
  "ticket_id": "uuid",
  "organization_id": "uuid",
  "assigned_agent_id": "uuid",
  "escalation_reason": "ai_resolution_failed",
  "timestamp": "2025-10-15T10:15:00Z"
}
```

**4. Get Ticket Details**
```http
GET /api/v1/support/tickets/{ticket_id}
Authorization: Bearer {client_jwt or support_agent_jwt}

Response (200 OK):
{
  "ticket_id": "uuid",
  "ticket_number": "SUPPORT-12345",
  "subject": "Voicebot not responding after configuration change",
  "description": "I changed the system prompt 2 hours ago and now the voicebot isn't responding to calls. This is urgent as we have a campaign running.",
  "status": "resolved",
  "category": "deployment_issue",
  "priority": "high",
  "sentiment": "positive",  // Updated after resolution
  "sentiment_score": 0.75,
  "reporter": {
    "name": "Jane Smith",
    "email": "jane@acme.com",
    "organization_id": "uuid",
    "organization_name": "Acme Corp"
  },
  "assigned_to": {
    "agent_id": "uuid",
    "name": "Michael Chen",
    "email": "michael@workflow.com"
  },
  "created_at": "2025-10-15T10:00:00Z",
  "first_response_at": "2025-10-15T10:02:00Z",
  "resolved_at": "2025-10-15T10:45:00Z",
  "resolution_time_minutes": 45,
  "sla_met": true,
  "sla_breach_time": "2025-10-15T11:00:00Z",
  "resolution_summary": "Deployment was stuck due to a temporary network issue. Manually restarted the deployment process. Voicebot is now live and responding correctly.",
  "comments": [
    {
      "comment_id": "uuid",
      "author": "AI Support Bot",
      "author_type": "ai",
      "content": "Thank you for contacting support. I've analyzed your issue and found that your deployment may be stuck. Would you like to try rolling back to the previous configuration version?",
      "created_at": "2025-10-15T10:02:00Z"
    },
    {
      "comment_id": "uuid",
      "author": "Jane Smith",
      "author_type": "customer",
      "content": "I tried the rollback but the issue is still there. Can I speak to a human?",
      "created_at": "2025-10-15T10:10:00Z"
    },
    {
      "comment_id": "uuid",
      "author": "Michael Chen",
      "author_type": "agent",
      "content": "Hi Jane, I'm Michael from the support team. I've reviewed your deployment logs and found the issue. Your deployment was stuck due to a network timeout. I'm manually restarting it now. Give me 5 minutes.",
      "created_at": "2025-10-15T10:20:00Z"
    },
    {
      "comment_id": "uuid",
      "author": "Michael Chen",
      "author_type": "agent",
      "content": "Deployment completed successfully! Your voicebot is now live. Can you please test and confirm it's working?",
      "created_at": "2025-10-15T10:40:00Z"
    },
    {
      "comment_id": "uuid",
      "author": "Jane Smith",
      "author_type": "customer",
      "content": "Yes, it's working now! Thank you so much for the quick help!",
      "created_at": "2025-10-15T10:43:00Z"
    }
  ],
  "attachments": [
    {
      "filename": "screenshot.png",
      "url": "https://uploads.workflow.com/uuid",
      "size_bytes": 245000,
      "uploaded_by": "Jane Smith",
      "uploaded_at": "2025-10-15T10:00:00Z"
    }
  ],
  "csat_requested": true,
  "csat_score": 5,  // 1-5 scale
  "csat_feedback": "Michael was incredibly helpful and resolved my issue quickly!"
}
```

**5. Search Knowledge Base**
```http
POST /api/v1/support/knowledge-base/search
Authorization: Bearer {client_jwt or support_agent_jwt}
Content-Type: application/json

Request Body:
{
  "query": "voicebot not responding after configuration change",
  "limit": 5,
  "semantic_search": true  // Use vector similarity vs keyword search
}

Response (200 OK):
{
  "query": "voicebot not responding after configuration change",
  "results": [
    {
      "article_id": "uuid",
      "title": "Troubleshooting Voicebot Deployment Issues",
      "category": "deployment",
      "relevance_score": 0.92,
      "excerpt": "If your voicebot stops responding after a configuration change, this is often due to a stuck deployment. To resolve: 1) Check deployment status in Configuration Portal 2) If stuck >15 minutes, rollback to previous version 3) Wait 2 minutes and re-apply changes",
      "url": "https://support.workflow.com/kb/articles/uuid",
      "created_at": "2025-09-10T10:00:00Z",
      "updated_at": "2025-10-01T15:30:00Z",
      "helpful_count": 247,
      "view_count": 1832
    },
    {
      "article_id": "uuid",
      "title": "Understanding Configuration Deployment Timeframes",
      "category": "configuration",
      "relevance_score": 0.85,
      "excerpt": "Configuration changes typically take 30-60 seconds to deploy. If your changes aren't reflected after 2 minutes, there may be a deployment issue.",
      "url": "https://support.workflow.com/kb/articles/uuid",
      "helpful_count": 189,
      "view_count": 1245
    }
  ],
  "total_results": 5
}
```

**6. Generate Support Documentation**
```http
POST /api/v1/support/docs/generate
Authorization: Bearer {support_manager_jwt}
Content-Type: application/json

Request Body:
{
  "source": "ticket_cluster",  // ticket_cluster | manual | incident
  "ticket_ids": ["uuid1", "uuid2", "uuid3"],  // 10 similar tickets about same issue
  "generate_article": true,
  "suggested_title": "Resolving Stuck Voicebot Deployments",
  "category": "deployment"
}

Response (202 Accepted):
{
  "doc_generation_id": "uuid",
  "status": "generating",
  "estimated_completion": "2025-10-15T10:05:00Z"
}

// Poll for completion
GET /api/v1/support/docs/{doc_generation_id}
Response (200 OK):
{
  "doc_generation_id": "uuid",
  "status": "completed",
  "article": {
    "article_id": "uuid",
    "title": "Resolving Stuck Voicebot Deployments",
    "category": "deployment",
    "content": "# Problem\nVoicebot deployments occasionally get stuck at 80-90% progress...\n\n# Solution\n1. Check deployment status...\n2. If stuck >15 minutes...\n3. Rollback to previous version...\n\n# Prevention\nEnsure configuration changes are tested in sandbox before deployment...",
    "based_on_tickets": 10,
    "confidence": 0.88,
    "requires_review": true,  // Requires human review before publishing
    "draft_url": "https://support.workflow.com/kb/drafts/uuid"
  }
}
```

**7. Get Support Analytics**
```http
GET /api/v1/support/analytics
Authorization: Bearer {support_manager_jwt}
Query Parameters:
- start_date: 2025-10-01
- end_date: 2025-10-31
- organization_id: uuid (optional - filter by client)

Response (200 OK):
{
  "time_period": "2025-10-01 to 2025-10-31",
  "total_tickets": 1245,
  "tickets_by_status": {
    "open": 45,
    "in_progress": 28,
    "resolved": 1142,
    "closed": 1142
  },
  "tickets_by_category": {
    "deployment_issue": 312,
    "configuration_question": 487,
    "billing_inquiry": 124,
    "feature_request": 198,
    "bug_report": 124
  },
  "tickets_by_priority": {
    "low": 498,
    "medium": 622,
    "high": 112,
    "critical": 13
  },
  "resolution_metrics": {
    "ai_resolution_rate": 0.72,  // 72% resolved by AI
    "average_first_response_time_minutes": 1.8,
    "average_resolution_time_minutes": 145,
    "sla_compliance_rate": 0.96  // 96% of tickets met SLA
  },
  "sentiment_distribution": {
    "positive": 0.68,
    "neutral": 0.22,
    "negative": 0.10
  },
  "csat_metrics": {
    "average_csat_score": 4.6,  // 1-5 scale
    "response_rate": 0.58,  // 58% of customers responded to CSAT survey
    "promoters": 0.75,  // 75% gave 4 or 5
    "detractors": 0.08  // 8% gave 1 or 2
  },
  "top_agents": [
    {
      "agent_id": "uuid",
      "name": "Michael Chen",
      "tickets_resolved": 187,
      "average_resolution_time_minutes": 125,
      "average_csat_score": 4.8
    }
  ]
}
```

#### Frontend Components

**1. Ticket List Dashboard**
- Component: `TicketListDashboard.tsx`
- Features:
  - List view with filters (status, priority, category, assigned agent)
  - Color-coded priority badges
  - Sentiment indicators with emoji
  - SLA breach countdown timer
  - Quick actions (assign, escalate, close)
  - Bulk operations (assign multiple tickets, close resolved tickets)

**2. Ticket Detail View**
- Component: `TicketDetailView.tsx`
- Features:
  - Full conversation history (customer, AI, human agent messages)
  - Attachment viewer
  - Side panel with customer context (organization, previous tickets, health score)
  - AI resolution suggestions panel
  - Quick reply templates
  - Add internal notes (not visible to customer)
  - Escalation button with reason selection

**3. Knowledge Base Search**
- Component: `KnowledgeBaseSearch.tsx`
- Features:
  - Semantic search with query suggestions
  - Filter by category, date, helpfulness
  - Article preview in modal
  - "Mark as helpful" button
  - Share article link with customers
  - Edit article (for support managers)

**4. Support Analytics Dashboard**
- Component: `SupportAnalyticsDashboard.tsx`
- Features:
  - Ticket volume trends (line chart)
  - Resolution time distribution (histogram)
  - CSAT score trends
  - AI resolution rate with benchmark
  - SLA compliance gauge
  - Agent performance leaderboard

**5. Agent Queue**
- Component: `AgentQueue.tsx`
- Features:
  - Real-time ticket assignment queue
  - Accept/decline incoming tickets
  - Current workload indicator
  - SLA breach alerts
  - Skill-based routing preferences
  - "Go offline" toggle for breaks

**6. Knowledge Base Editor**
- Component: `KnowledgeBaseEditor.tsx`
- Features:
  - Markdown editor for articles
  - Category and tag selection
  - Related articles suggestions
  - Preview mode
  - Version history
  - Publish workflow (draft → review → published)

**State Management:**
- React Query for ticket data with real-time updates
- WebSocket for live ticket updates (new tickets, status changes, assignments)
- Zustand for UI state (selected ticket, active filters, agent online status)
- LocalStorage for agent preferences (default filters, notification settings)

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Support Engineer**
   - Role: Resolve escalated tickets, handle complex issues
   - Access: Assigned tickets, knowledge base, customer context, deployment logs
   - Permissions: `read:tickets`, `write:ticket_comments`, `resolve:tickets`, `escalate:tickets`
   - Workflows:
     1. Receives escalated ticket → Reviews AI conversation history → Investigates issue → Resolves ticket → Updates knowledge base if new issue pattern
     2. Monitors ticket queue → Accepts incoming tickets based on skill match → Resolves within SLA
   - Tools: Slack for notifications, Zoom for screen sharing with customers

2. **Support Manager**
   - Role: Monitor team performance, manage SLAs, optimize support processes
   - Access: All tickets, analytics dashboard, agent performance metrics, knowledge base management
   - Permissions: `read:all_tickets`, `manage:agents`, `configure:sla`, `approve:kb_articles`
   - Workflows:
     1. Reviews daily analytics → Identifies bottlenecks → Adjusts agent assignments
     2. Reviews AI-generated knowledge base articles → Approves for publication
   - Decision Authority: SLA definitions, escalation rules, agent hiring

3. **Client (Support Requester)**
   - Role: Create support tickets, track resolution progress
   - Access: Own organization's tickets, knowledge base
   - Permissions: `create:tickets`, `read:own_tickets`, `search:knowledge_base`
   - Workflows:
     1. Encounters issue → Searches knowledge base → If no solution, creates ticket → Receives AI resolution attempt → If unresolved, escalates to human agent
     2. Receives ticket resolution → Provides CSAT feedback

**AI Agents:**

1. **Ticket Triage Agent**
   - Responsibility: Classify tickets by category and priority, analyze sentiment
   - Tools: GPT-4 for text classification, fine-tuned sentiment analysis model
   - Autonomy: Fully autonomous - classifies all incoming tickets
   - Escalation: If classification confidence <0.7, flags for human review

2. **Resolution Suggestion Agent**
   - Responsibility: Search knowledge base and suggest resolutions to customer
   - Tools: Qdrant vector search, GPT-4 for natural language response generation
   - Autonomy: Fully autonomous - attempts resolution for Tier 1 issues
   - Escalation: If 2 resolution attempts fail or customer requests human, escalates to support engineer

3. **Knowledge Base Generator Agent**
   - Responsibility: Generate support documentation from ticket clusters
   - Tools: GPT-4 for article generation, clustering algorithms to identify common issues
   - Autonomy: Supervised - generates draft articles, requires manager approval before publication
   - Escalation: If article confidence <0.8, flags for extensive human review

4. **SLA Monitoring Agent**
   - Responsibility: Track ticket SLAs and alert on predicted breaches
   - Tools: SLA calculation engine, time-tracking algorithms
   - Autonomy: Fully autonomous - monitors all tickets continuously
   - Escalation: If SLA breach predicted within 15 minutes, alerts support manager and assigns additional agent

**Approval Workflows:**
1. Ticket created → AI triage → Auto-approved classification → Proceeds to resolution
2. AI resolution attempt → Customer accepts → Auto-closes ticket (no approval needed)
3. Escalation to human agent → Support engineer accepts → Auto-approved (audit log maintained)
4. Knowledge base article generated → AI drafts → Support manager reviews → Approves → Published
5. SLA definition change → Support manager proposes → VP of Customer Success approves

---

## 15. CRM Integration Service

#### Objectives
- **Primary Purpose**: Bidirectional real-time sync with CRMs (Salesforce, HubSpot) for leads, contacts, accounts, opportunities with automated field mapping, conflict resolution, and closed-loop revenue attribution
- **Business Value**: Eliminates manual data entry (saves 10+ hours/week per sales team), enables closed-loop attribution from lead → conversation → opportunity → closed-won, provides unified 360° customer view, reduces data sync errors from 15% to <1%
- **Product Differentiation**: Sub-second webhook-based sync, AI-powered field mapping suggestions, intelligent conflict resolution, multi-CRM support (Salesforce + HubSpot simultaneously), conversation-to-opportunity linking for ROI tracking
- **Scope Boundaries**:
  - **Does**: Bidirectional sync (CRM ↔ Platform), webhook receivers for real-time updates, field mapping configuration, conflict detection and resolution, opportunity stage tracking, revenue attribution, duplicate detection
  - **Does Not**: CRM data migration (one-time import tool separate), CRM workflow/automation configuration (stays in CRM), email campaign management (Hyperpersonalization Service does), direct CRM UI access

#### Requirements

**Functional Requirements:**
1. Bidirectional sync for Salesforce (Leads, Contacts, Accounts, Opportunities, Activities)
2. Bidirectional sync for HubSpot (Contacts, Companies, Deals, Engagement)
3. Real-time webhook receivers for CRM updates (sub-second latency)
4. Configurable field mapping with AI-powered suggestions
5. Conflict detection and resolution (last-write-wins, CRM-priority, Platform-priority, manual)
6. Opportunity stage tracking with conversation linking
7. Closed-loop revenue attribution (conversation → demo → PRD → opportunity → closed-won)
8. Duplicate detection and merging
9. Sync status monitoring with error alerting
10. Multi-CRM support (client can connect both Salesforce and HubSpot)
11. Custom object sync (Salesforce custom objects, HubSpot custom properties)
12. Activity logging (conversations, demos, meetings logged to CRM timeline)

**Non-Functional Requirements:**
- Sync latency: <1s from webhook receipt to Platform update, <5s from Platform change to CRM update
- Throughput: 10,000+ records synced per minute
- 99.9% sync success rate
- Conflict resolution: <500ms decision time
- Support 1,000+ organizations with concurrent CRM connections
- Data retention: 90 days of sync history for auditing

**Dependencies:**
- **Analytics Service** *[See Service 12 above]* (conversation data, qualified leads, revenue attribution)
- **Organization Management Service** *[See MICROSERVICES_ARCHITECTURE.md Service 0]* (organization CRM credentials, OAuth tokens)
- **Customer Success Service** *[See Service 13 above]* (account health scores, expansion opportunities to sync to CRM)
- **Agent Orchestration Service** *[See Service 8 above]* (conversation outcomes to log as CRM activities)
- External APIs:
  - **Salesforce REST API**: CRUD operations for Leads, Contacts, Accounts, Opportunities
  - **Salesforce Streaming API**: Real-time webhook subscriptions
  - **HubSpot API v3**: CRUD operations for Contacts, Companies, Deals
  - **HubSpot Webhooks**: Real-time update notifications

**Data Storage:**
- PostgreSQL: Field mappings, sync configurations, conflict resolution rules, sync history
- Redis: Sync queue, webhook deduplication, OAuth token cache
- S3: Sync error logs, conflict resolution audit trail

#### Features

**Must-Have:**
1. ✅ Salesforce bidirectional sync (Leads, Contacts, Accounts, Opportunities, Activities)
2. ✅ HubSpot bidirectional sync (Contacts, Companies, Deals, Engagement)
3. ✅ Real-time webhook receivers with retry logic
4. ✅ Configurable field mapping UI
5. ✅ Conflict detection with resolution strategies
6. ✅ Opportunity→Conversation linking for attribution
7. ✅ Activity logging (conversations logged to CRM timeline)
8. ✅ Sync status monitoring dashboard
9. ✅ Duplicate detection with merge suggestions
10. ✅ OAuth 2.0 connection flow for Salesforce and HubSpot

**Nice-to-Have:**
11. 🔄 AI-powered field mapping suggestions
12. 🔄 Custom object sync builder
13. 🔄 Bulk sync scheduling (overnight full refresh)
14. 🔄 Multi-CRM simultaneous connection (Salesforce + HubSpot)
15. 🔄 Sync simulation mode (preview changes before applying)

**Feature Interactions:**
- Discovery call completed → Lead marked "Qualified" in Platform → Syncs to Salesforce Lead (Status = "Qualified") → Sales rep receives notification
- Sales rep creates Opportunity in Salesforce → Webhook triggers → Platform links Opportunity to previous conversations → Revenue attribution updated
- Demo sent via Platform → Activity logged to Salesforce Contact timeline → Sales rep sees demo details in Salesforce
- Conflicting update (CRM and Platform both updated Lead email simultaneously) → Conflict detected → Resolution strategy applied (CRM-priority) → Platform email updated
- Customer Success updates account health score → Syncs to Salesforce custom field "Health_Score__c" → Sales rep sees churn risk in CRM
- HubSpot Deal moves to "Closed Won" → Syncs to Platform → Analytics Service updates revenue attribution → CSM receives expansion opportunity alert

#### API Specification

**1. Connect CRM (OAuth Flow)**
```http
POST /api/v1/crm/connect
Authorization: Bearer {organization_admin_jwt}
Content-Type: application/json

Request Body:
{
  "organization_id": "uuid",
  "crm_provider": "salesforce",  // salesforce | hubspot
  "oauth_code": "authorization_code_from_salesforce",  // From OAuth callback
  "redirect_uri": "https://workflow.com/crm/callback",
  "sandbox": false  // true for Salesforce sandbox environments
}

Response (201 Created):
{
  "connection_id": "uuid",
  "crm_provider": "salesforce",
  "status": "connected",
  "connected_at": "2025-10-15T10:00:00Z",
  "crm_instance_url": "https://acme.my.salesforce.com",
  "crm_user": {
    "name": "Jane Smith",
    "email": "jane@acme.com",
    "user_id": "salesforce_user_id"
  },
  "default_field_mappings_created": true  // Auto-created standard mappings
}
```

**2. Configure Field Mapping**
```http
POST /api/v1/crm/mappings
Authorization: Bearer {organization_admin_jwt}
Content-Type: application/json

Request Body:
{
  "organization_id": "uuid",
  "crm_provider": "salesforce",
  "object_type": "Lead",  // Lead | Contact | Account | Opportunity | Activity
  "direction": "bidirectional",  // platform_to_crm | crm_to_platform | bidirectional
  "field_mappings": [
    {
      "platform_field": "lead.email",
      "crm_field": "Email",
      "sync_direction": "bidirectional",
      "required": true
    },
    {
      "platform_field": "lead.phone",
      "crm_field": "Phone",
      "sync_direction": "bidirectional",
      "required": false
    },
    {
      "platform_field": "lead.qualified_status",
      "crm_field": "Status",
      "sync_direction": "platform_to_crm",
      "required": true,
      "value_mapping": {
        "qualified": "Qualified",
        "not_interested": "Unqualified",
        "callback_requested": "Nurture"
      }
    },
    {
      "platform_field": "lead.conversation_sentiment_avg",
      "crm_field": "Sentiment_Score__c",  // Custom field
      "sync_direction": "platform_to_crm",
      "required": false
    }
  ],
  "conflict_resolution_strategy": "crm_priority",  // crm_priority | platform_priority | last_write_wins | manual
  "sync_enabled": true
}

Response (201 Created):
{
  "mapping_id": "uuid",
  "organization_id": "uuid",
  "crm_provider": "salesforce",
  "object_type": "Lead",
  "field_mappings_count": 4,
  "status": "active",
  "created_at": "2025-10-15T10:00:00Z"
}
```

**3. Trigger Manual Sync**
```http
POST /api/v1/crm/sync
Authorization: Bearer {organization_admin_jwt}
Content-Type: application/json

Request Body:
{
  "organization_id": "uuid",
  "crm_provider": "salesforce",
  "sync_type": "incremental",  // full | incremental
  "object_types": ["Lead", "Contact", "Opportunity"],
  "direction": "bidirectional",
  "filters": {
    "modified_after": "2025-10-14T00:00:00Z"  // For incremental sync
  }
}

Response (202 Accepted):
{
  "sync_job_id": "uuid",
  "status": "queued",
  "estimated_records": 1245,
  "estimated_completion": "2025-10-15T10:15:00Z"
}

// Poll for status
GET /api/v1/crm/sync/{sync_job_id}
Response (200 OK):
{
  "sync_job_id": "uuid",
  "status": "completed",  // queued | in_progress | completed | failed
  "started_at": "2025-10-15T10:00:30Z",
  "completed_at": "2025-10-15T10:12:45Z",
  "duration_seconds": 735,
  "records_synced": 1245,
  "records_failed": 12,
  "conflicts_detected": 3,
  "conflicts_resolved": 3,
  "errors": [
    {
      "crm_record_id": "salesforce_lead_id",
      "error": "Required field 'Company' missing in Platform lead",
      "record_type": "Lead"
    }
  ]
}
```

**4. Webhook Receiver (Salesforce)**
```http
POST /api/v1/crm/webhooks/salesforce
Authorization: Bearer {webhook_signature_validation}  // Salesforce signs webhooks
Content-Type: application/json

Request Body (Salesforce Streaming API format):
{
  "event": {
    "type": "updated",
    "createdDate": "2025-10-15T10:00:00.000Z",
    "replayId": 12345
  },
  "sobject": {
    "Id": "00Q5e00000A1B2C3",
    "Email": "john.doe@example.com",
    "Status": "Qualified",
    "LastModifiedDate": "2025-10-15T10:00:00.000Z",
    "LastModifiedById": "salesforce_user_id"
  },
  "objectType": "Lead"
}

Response (200 OK):
{
  "webhook_received": true,
  "sync_queued": true,
  "platform_record_id": "uuid",
  "conflicts_detected": false
}

Internal Action:
1. Validates webhook signature
2. Checks if Platform has newer version → Conflict detection
3. Applies conflict resolution strategy
4. Updates Platform lead record
5. Publishes `crm_sync_completed` event to Kafka
```

**5. Get Sync Status Dashboard**
```http
GET /api/v1/crm/status
Authorization: Bearer {organization_admin_jwt}
Query Parameters:
- organization_id: uuid

Response (200 OK):
{
  "organization_id": "uuid",
  "connections": [
    {
      "connection_id": "uuid",
      "crm_provider": "salesforce",
      "status": "healthy",  // healthy | degraded | disconnected | error
      "connected_at": "2025-10-01T10:00:00Z",
      "last_sync_at": "2025-10-15T09:55:00Z",
      "sync_metrics_24h": {
        "total_records_synced": 3456,
        "platform_to_crm": 1823,
        "crm_to_platform": 1633,
        "conflicts_detected": 12,
        "conflicts_resolved": 12,
        "errors": 3,
        "success_rate": 0.9991  // 99.91%
      },
      "object_sync_status": [
        {
          "object_type": "Lead",
          "enabled": true,
          "last_sync": "2025-10-15T09:55:00Z",
          "records_synced_24h": 987,
          "errors_24h": 1
        },
        {
          "object_type": "Opportunity",
          "enabled": true,
          "last_sync": "2025-10-15T09:50:00Z",
          "records_synced_24h": 234,
          "errors_24h": 0
        }
      ],
      "webhook_status": {
        "subscribed": true,
        "last_webhook_received": "2025-10-15T09:58:00Z",
        "webhooks_received_24h": 1245,
        "webhook_failures_24h": 0
      }
    }
  ],
  "overall_health": "healthy"
}
```

**6. Resolve Conflict Manually**
```http
POST /api/v1/crm/conflicts/{conflict_id}/resolve
Authorization: Bearer {organization_admin_jwt}
Content-Type: application/json

Request Body:
{
  "conflict_id": "uuid",
  "resolution_strategy": "use_crm_version",  // use_crm_version | use_platform_version | merge
  "merged_values": {  // Only if resolution_strategy = "merge"
    "email": "john.doe@example.com",  // From CRM
    "phone": "+1-555-0123",  // From Platform
    "status": "Qualified"  // From CRM
  }
}

Response (200 OK):
{
  "conflict_id": "uuid",
  "resolved": true,
  "resolution_applied": "use_crm_version",
  "platform_record_updated": true,
  "crm_record_updated": false,
  "resolved_at": "2025-10-15T10:00:00Z"
}
```

**7. Get Revenue Attribution (CRM-linked)**
```http
GET /api/v1/crm/attribution
Authorization: Bearer {sales_ops_jwt}
Query Parameters:
- organization_id: uuid
- start_date: 2025-10-01
- end_date: 2025-10-31

Response (200 OK):
{
  "organization_id": "uuid",
  "time_period": "2025-10-01 to 2025-10-31",
  "closed_won_opportunities": [
    {
      "crm_opportunity_id": "salesforce_opp_id",
      "crm_opportunity_name": "Acme Corp - Voicebot Expansion",
      "amount_usd": 50000,
      "close_date": "2025-10-25",
      "linked_conversations": [
        {
          "conversation_id": "uuid",
          "conversation_type": "discovery_call",
          "date": "2025-09-15",
          "outcome": "qualified"
        },
        {
          "conversation_id": "uuid",
          "conversation_type": "demo",
          "date": "2025-09-22",
          "outcome": "requested_pricing"
        }
      ],
      "linked_demos": 2,
      "linked_prds": 1,
      "first_touch": "discovery_call",
      "first_touch_date": "2025-09-15",
      "days_to_close": 40,
      "platform_contribution_score": 0.85  // 85% attributed to Platform workflows
    }
  ],
  "total_closed_won_arr": 285000,
  "platform_influenced_arr": 242250,  // 85% of total
  "platform_influence_rate": 0.85,
  "average_days_to_close_platform_influenced": 38,
  "average_days_to_close_non_platform": 67
}
```

#### Frontend Components

**1. CRM Connection Setup**
- Component: `CRMConnectionSetup.tsx`
- Features:
  - OAuth connection flow for Salesforce and HubSpot
  - Connection status indicator
  - Disconnect/reconnect buttons
  - Test connection button
  - Multiple CRM support (connect both simultaneously)

**2. Field Mapping Builder**
- Component: `FieldMappingBuilder.tsx`
- Features:
  - Drag-and-drop field mapping interface
  - Platform field selector (left) → CRM field selector (right)
  - Sync direction toggle (→, ←, ↔)
  - Value mapping for picklists (e.g., "qualified" → "Qualified")
  - AI-powered mapping suggestions based on field names
  - Validation warnings for missing required fields

**3. Sync Status Dashboard**
- Component: `SyncStatusDashboard.tsx`
- Features:
  - Real-time sync metrics (records/hour, success rate)
  - Sync health status with color indicators
  - Recent sync history table
  - Error log with details
  - Manual sync trigger button
  - Webhook status indicator

**4. Conflict Resolution UI**
- Component: `ConflictResolutionUI.tsx`
- Features:
  - List of unresolved conflicts
  - Side-by-side comparison (Platform value vs CRM value)
  - One-click resolution buttons (Use CRM, Use Platform, Merge)
  - Merge editor for manual value selection
  - Conflict resolution history
  - Auto-resolution strategy configuration

**5. Revenue Attribution Report**
- Component: `RevenueAttributionReport.tsx`
- Features:
  - List of closed-won opportunities with Platform contribution
  - Conversation timeline per opportunity
  - Platform influence score calculation
  - Time-to-close comparison (Platform-influenced vs non-Platform)
  - Export to CSV for sales ops reporting

**State Management:**
- React Query for CRM connection status and sync metrics with polling
- WebSocket for real-time sync updates
- Zustand for UI state (selected field mappings, active conflict resolution)
- LocalStorage for user preferences (default CRM, field mapping templates)

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Sales Operations Manager**
   - Role: Configure CRM integrations, manage field mappings, resolve sync issues
   - Access: CRM connection setup, field mapping builder, sync status dashboard, conflict resolution
   - Permissions: `connect:crm`, `configure:mappings`, `resolve:conflicts`, `trigger:sync`
   - Workflows:
     1. Connects Salesforce → Configures field mappings → Enables bidirectional sync → Monitors sync health
     2. Reviews conflict resolution queue daily → Resolves complex conflicts → Updates mapping rules to prevent future conflicts
   - Decision Authority: Field mapping changes, conflict resolution strategies

2. **Marketing Operations Manager**
   - Role: Ensure marketing leads flow correctly from CRM to Platform
   - Access: CRM sync status, lead sync metrics, error logs
   - Permissions: `read:crm_status`, `read:sync_logs`, `trigger:manual_sync`
   - Workflows:
     1. Monitors lead sync daily → Ensures new HubSpot Contacts sync to Platform → Verifies qualification status updates flow back to HubSpot
   - Escalation: Escalates sync failures to Sales Ops

3. **CRM Administrator**
   - Role: Manage CRM-side webhook configurations, custom fields, permissions
   - Access: Webhook setup documentation, custom field requirements list
   - Permissions: CRM-side (Salesforce/HubSpot admin access)
   - Workflows:
     1. Creates custom fields in Salesforce → Notifies Sales Ops to update field mappings
     2. Configures webhook subscriptions in Salesforce → Validates webhook delivery to Platform
   - Collaboration: Works with Sales Ops to coordinate CRM schema changes

**AI Agents:**

1. **Field Mapping Suggestion Agent**
   - Responsibility: Suggest field mappings based on field names and data types
   - Tools: Fuzzy string matching, field name similarity algorithms, historical mapping patterns
   - Autonomy: Supervised - suggests mappings, requires human approval
   - Escalation: If no confident match found (confidence <0.7), flags for manual mapping

2. **Conflict Resolution Agent**
   - Responsibility: Apply conflict resolution strategies automatically based on rules
   - Tools: Conflict detection algorithms, timestamp comparison, rule engine
   - Autonomy: Semi-autonomous - resolves conflicts per configured strategy, flags complex conflicts for manual review
   - Escalation: If conflict involves critical fields (email, opportunity amount), flags for manual review

3. **Sync Health Monitor Agent**
   - Responsibility: Monitor sync health, detect anomalies, alert on failures
   - Tools: Sync metrics tracking, error rate monitoring, anomaly detection
   - Autonomy: Fully autonomous - monitors continuously, alerts on issues
   - Escalation: If error rate >5% for 15 minutes, alerts Sales Ops Manager

**Approval Workflows:**
1. CRM connection → Sales Ops initiates OAuth → Auto-approved (credentials validated by CRM provider)
2. Field mapping change → Sales Ops configures → Auto-approved (audit log maintained)
3. Conflict resolution (automated) → Strategy applied per configuration → Auto-approved → Audit logged
4. Conflict resolution (manual) → Sales Ops resolves → Auto-approved (audit log maintained)
5. Bulk sync trigger → Sales Ops initiates → Auto-approved → Sync job queued

---

## 19. Client Configuration Portal Service

#### Objectives
- **Primary Purpose**: Enable clients to self-configure deployed chatbot/voicebot products via conversational AI and visual dashboard with version control and member-based permissions
- **Business Value**: 80% reduction in configuration support tickets, instant config changes, client autonomy, improved time-to-value
- **Product Scope**: Supports both chatbot and voicebot product configuration with product-specific UI controls
- **Scope Boundaries**:
  - **Does**: Conversational config via AI agent, visual config dashboard, member permission management, version control UI, change classification, config preview/testing, rollback management
  - **Does Not**: Generate initial configs (Automation Engine does), validate schemas (Configuration Management does), implement tools (developers do)

#### Requirements

**Functional Requirements:**
1. Natural language configuration via conversational AI agent
2. Visual configuration dashboard with product-specific controls (chatbot vs voicebot)
3. Member-based permission system for configuration changes
4. Git-style version control with commit messages and rollback
5. Change classification (system_prompt, tool, voice_param, integration, etc.)
6. Real-time configuration preview and testing sandbox
7. Automated change risk assessment with approval workflows
8. Human agent coordination for complex configuration needs

**Non-Functional Requirements:**
- Configuration change application: <2 minutes from request to live deployment
- Conversational response time: <3s for classification and preview generation
- Support 10,000+ organizations with isolated configuration access
- 99.9% uptime for configuration portal
- Version history retention: 1 year minimum

**Dependencies:**
- **Configuration Management Service** *[See Service 10 above]* (stores/distributes configs, validates schemas)
- **Automation Engine** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 7]* (initial config generation)
- **Organization Management Service** *[See MICROSERVICES_ARCHITECTURE.md Service 0]* (member roles and permissions)
- **Agent Orchestration Service** *[See Service 8 above]* (applies chatbot config changes)
- **Voice Agent Service** *[See Service 9 above]* (applies voicebot config changes)
- **LLM Gateway Service** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 16]* (powers conversational config agent)

**Data Storage:**
- PostgreSQL: Config change log, member permissions, version metadata, approval workflows
- S3: Version snapshots, config diff visualizations
- Redis: Conversational state (chat context), config draft cache

#### Features

**Must-Have:**
1. ✅ Conversational configuration agent with change classification
2. ✅ Visual dashboard for chatbot configuration (system prompt, tools, integrations)
3. ✅ Visual dashboard for voicebot configuration (voice parameters, model settings, stop speaking plan)
4. ✅ Member permission matrix (Admin, Config Manager, Viewer, Developer roles)
5. ✅ Git-style version control with commit messages
6. ✅ Side-by-side diff viewer (before/after comparison)
7. ✅ One-click rollback to previous versions
8. ✅ Configuration testing sandbox with preview
9. ✅ Change risk assessment (low/medium/high) with automated approval for low-risk changes
10. ✅ Human agent escalation for complex configuration requests

**Nice-to-Have:**
11. 🔄 AI-powered configuration optimization suggestions
12. 🔄 Configuration templates marketplace (share configs across organizations)
13. 🔄 Automated regression testing for config changes
14. 🔄 Configuration import/export (JSON/YAML)
15. 🔄 Multi-environment support (dev/staging/production branches)

**Feature Interactions:**
- Client requests config change via chat → Agent classifies → Shows preview → Client approves → Hot-reload applied
- Visual slider changed (voicebot speed) → Immediate preview in test call → Save creates new version
- Risky change detected → Requires organization admin approval → Sends notification
- Configuration error after deployment → Auto-rollback triggered → Platform engineer alerted

#### Conversational Configuration Agent Architecture

**LangGraph Agent Implementation:**

```python
class ConfigurationAgentState(TypedDict):
    messages: List[BaseMessage]
    config_id: str
    organization_id: str
    product_type: str  # chatbot | voicebot
    current_config: Dict[str, Any]
    detected_changes: List[Dict[str, Any]]
    classification_confidence: float
    preview_generated: bool
    approval_status: str  # pending | approved | rejected
    conversation_id: str

class ConfigurationAgent:
    """LangGraph agent for conversational configuration"""

    def __init__(self):
        self.tools = [
            classify_configuration_request,
            generate_system_prompt_update,
            search_available_tools,
            create_github_tool_request,
            update_voice_parameters,
            preview_configuration_change,
            validate_configuration,
            apply_configuration_change
        ]

        # Two-node workflow: agent + tools
        self.graph = StateGraph(ConfigurationAgentState)
        self.graph.add_node("agent", self.agent_node)
        self.graph.add_node("tools", ToolNode(self.tools))

        # Routing logic
        self.graph.add_conditional_edges(
            "agent",
            self.should_continue,
            {"tools": "tools", "end": END}
        )
        self.graph.add_edge("tools", "agent")
        self.graph.set_entry_point("agent")
```

**Change Classification Model:**

```yaml
change_types:
  system_prompt_change:
    keywords: ["tone", "casual", "professional", "friendly", "instructions", "behavior", "personality"]
    confidence_threshold: 0.85
    risk_level: low

  tool_change:
    keywords: ["add tool", "remove tool", "enable", "disable", "refund", "payment", "integration"]
    confidence_threshold: 0.90
    risk_level: medium
    requires_tool_lookup: true

  voice_parameter_change:
    keywords: ["speed", "slower", "faster", "clarity", "latency", "voice", "interruption"]
    confidence_threshold: 0.88
    risk_level: low

  external_service_change:
    keywords: ["salesforce", "zendesk", "integration", "connect", "api", "webhook"]
    confidence_threshold: 0.92
    risk_level: high

  escalation_rule_change:
    keywords: ["escalate", "human", "transfer", "handoff", "trigger"]
    confidence_threshold: 0.87
    risk_level: medium
```

#### API Specification

**1. Conversational Configuration Chat**
```http
POST /api/v1/client-config/chat
Authorization: Bearer {client_jwt}
Content-Type: application/json

Request Body:
{
  "config_id": "uuid",
  "message": "Make the voicebot speak slower and add a refund tool",
  "conversation_id": "uuid",  // Maintains context across messages
  "product_type": "voicebot"
}

Response (200 OK):
{
  "response": "I'll help you with that. I've detected two changes:\n\n1. **Voice speed adjustment** (slower)\n   - Current: 1.0x speed\n   - Proposed: 0.7x speed\n   \n2. **Adding refund tool**\n   - Found 'initiate_refund' in our catalog\n   - Status: Implemented and ready\n   \nWould you like me to apply these changes?",
  "detected_changes": [
    {
      "type": "voice_parameter_change",
      "parameter": "speed",
      "current_value": 1.0,
      "proposed_value": 0.7,
      "confidence": 0.95,
      "risk_level": "low"
    },
    {
      "type": "tool_change",
      "action": "add",
      "tool_name": "initiate_refund",
      "tool_status": "implemented",
      "confidence": 0.88,
      "risk_level": "medium"
    }
  ],
  "preview_url": "https://config.workflow.com/preview/uuid",
  "requires_approval": false,  // Auto-approved for this user's role
  "conversation_id": "uuid"
}
```

**2. Visual Configuration Update**
```http
POST /api/v1/client-config/visual/update
Authorization: Bearer {client_jwt}
Content-Type: application/json

Request Body:
{
  "config_id": "uuid",
  "product_type": "voicebot",
  "changes": {
    "voice_settings": {
      "background_sound": {
        "type": "office",  // office | cafe | silence | custom
        "custom_url": null
      },
      "input_min_characters": 10,
      "punctuation_boundaries": [".", "!", "?", "..."],
      "model_settings": {
        "model": "gpt-4",
        "clarity_similarity": 0.75,
        "speed": 0.8,
        "style_exaggeration": 0,
        "optimize_streaming_latency": 3,
        "use_speaker_boost": true,
        "auto_mode": false
      },
      "max_tokens": 150,
      "stop_speaking_plan": {
        "number_of_words": 5,
        "voice_seconds": 0.7,
        "back_off_seconds": 3
      }
    }
  },
  "commit_message": "Adjusted voice speed and interruption handling for better user experience",
  "apply_immediately": false  // If false, creates draft for review
}

Response (200 OK):
{
  "version": "v48",
  "status": "pending_approval",  // pending_approval | draft | applied
  "preview_url": "https://config.workflow.com/preview/uuid",
  "test_call_url": "https://config.workflow.com/test-call/uuid",  // Voicebot testing
  "validation": {
    "valid": true,
    "warnings": [],
    "estimated_impact": "Low - voice parameter changes only",
    "affected_conversations": 0  // No active conversations affected
  },
  "diff": {
    "voice_settings.speed": {"old": 1.0, "new": 0.8},
    "voice_settings.stop_speaking_plan.number_of_words": {"old": 3, "new": 5}
  },
  "created_at": "2025-10-15T14:23:00Z"
}
```

**3. Get Version History**
```http
GET /api/v1/client-config/{config_id}/versions
Authorization: Bearer {client_jwt}
Query Parameters:
- limit: 20 (default)
- offset: 0

Response (200 OK):
{
  "config_id": "uuid",
  "product_type": "chatbot",
  "current_version": "v48",
  "versions": [
    {
      "version": "v48",
      "commit_message": "Changed tone to casual, added refund tool",
      "author": {
        "user_id": "uuid",
        "email": "jane@acme.com",
        "role": "organization_admin"
      },
      "changes": [
        {"type": "system_prompt_change", "field": "tone", "old_value": "professional", "new_value": "casual"},
        {"type": "tool_change", "action": "add", "tool_name": "initiate_refund"}
      ],
      "risk_level": "low",
      "applied_at": "2025-10-15T14:23:00Z",
      "rollback_available": true
    },
    {
      "version": "v47",
      "commit_message": "Added escalation rule for frustrated customers",
      "author": {
        "user_id": "uuid",
        "email": "john@acme.com",
        "role": "config_manager"
      },
      "changes": [
        {"type": "escalation_rule_change", "trigger": "sentiment_negative_3_turns", "action": "add"}
      ],
      "risk_level": "medium",
      "applied_at": "2025-10-14T11:15:00Z",
      "rollback_available": true
    }
  ],
  "total_versions": 48,
  "pagination": {
    "has_more": true,
    "next_offset": 20
  }
}
```

**4. Rollback to Previous Version**
```http
POST /api/v1/client-config/{config_id}/rollback
Authorization: Bearer {client_jwt}
Content-Type: application/json

Request Body:
{
  "target_version": "v47",
  "reason": "New voice speed causing customer complaints",
  "notify_team": true  // Notify all config managers
}

Response (200 OK):
{
  "config_id": "uuid",
  "rolled_back_from": "v48",
  "rolled_back_to": "v47",
  "new_current_version": "v49",  // Rollback creates new version
  "commit_message": "Rollback to v47: New voice speed causing customer complaints",
  "applied_at": "2025-10-15T15:00:00Z",
  "kafka_event_published": true,
  "estimated_propagation_time": "60 seconds"
}
```

**5. Get Member Configuration Permissions**
```http
GET /api/v1/client-config/permissions
Authorization: Bearer {client_jwt}
Query Parameters:
- organization_id: uuid

Response (200 OK):
{
  "organization_id": "uuid",
  "members": [
    {
      "user_id": "uuid",
      "email": "jane@acme.com",
      "role": "organization_admin",
      "config_permissions": {
        "view_config": true,
        "edit_system_prompt": true,
        "add_remove_tools": true,
        "modify_integrations": true,
        "change_voice_params": true,
        "deploy_to_production": true,
        "rollback_versions": true,
        "manage_permissions": true
      }
    },
    {
      "user_id": "uuid",
      "email": "john@acme.com",
      "role": "config_manager",
      "config_permissions": {
        "view_config": true,
        "edit_system_prompt": true,
        "add_remove_tools": true,
        "modify_integrations": false,
        "change_voice_params": true,
        "deploy_to_production": false,
        "rollback_versions": true,
        "manage_permissions": false
      }
    }
  ]
}
```

**6. Update Member Permissions**
```http
PUT /api/v1/client-config/permissions/{user_id}
Authorization: Bearer {org_admin_jwt}  // Only org admins can modify permissions
Content-Type: application/json

Request Body:
{
  "organization_id": "uuid",
  "config_permissions": {
    "view_config": true,
    "edit_system_prompt": true,
    "add_remove_tools": false,  // Revoke tool management
    "modify_integrations": false,
    "change_voice_params": true,
    "deploy_to_production": false,
    "rollback_versions": false,  // Revoke rollback capability
    "manage_permissions": false
  }
}

Response (200 OK):
{
  "user_id": "uuid",
  "organization_id": "uuid",
  "config_permissions": {...},
  "updated_at": "2025-10-15T15:10:00Z",
  "updated_by": "uuid"
}
```

#### Database Schema

```sql
-- Main configurations table (stores all chatbot/voicebot configurations)
CREATE TABLE configurations (
  config_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID NOT NULL REFERENCES organizations(id),
  product_type VARCHAR(20) NOT NULL CHECK (product_type IN ('chatbot', 'voicebot')),
  version INT NOT NULL DEFAULT 1,
  yaml_content TEXT NOT NULL,
  s3_url TEXT NOT NULL,
  status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'archived', 'draft')),
  breaking_change BOOLEAN DEFAULT false,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  created_by UUID REFERENCES auth.users(id),
  INDEX idx_org_product_configs (organization_id, product_type),
  INDEX idx_config_version (config_id, version),
  INDEX idx_config_status (status) WHERE status = 'active',
  INDEX idx_config_s3 (s3_url),
  UNIQUE(organization_id, product_type, version)
);

-- Row-Level Security for multi-tenant isolation
ALTER TABLE configurations ENABLE ROW LEVEL SECURITY;

CREATE POLICY tenant_isolation_configs ON configurations
  FOR ALL
  USING (organization_id IN (
    SELECT organization_id FROM team_memberships WHERE user_id = auth.uid()
  ));

-- Config change audit log
CREATE TABLE config_change_log (
  change_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  config_id UUID NOT NULL,
  version INT NOT NULL,
  author_id UUID NOT NULL,
  author_type VARCHAR(20) NOT NULL,  -- 'client_user' | 'platform_agent' | 'ai_agent'
  author_email VARCHAR(255),
  change_type VARCHAR(50),  -- 'system_prompt' | 'tool' | 'voice_param' | 'integration' | 'escalation_rule' | 'hybrid'
  changes JSONB NOT NULL,
  commit_message TEXT,
  risk_level VARCHAR(20),  -- 'low' | 'medium' | 'high'
  approved_by UUID,
  approved_at TIMESTAMP,
  applied_at TIMESTAMP,
  rolled_back BOOLEAN DEFAULT false,
  rollback_reason TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_config_version (config_id, version),
  INDEX idx_config_applied (config_id, applied_at),
  FOREIGN KEY (config_id) REFERENCES configurations(config_id)
);

-- Member configuration permissions
CREATE TABLE organization_member_config_permissions (
  permission_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  organization_id UUID NOT NULL,
  user_id UUID NOT NULL,
  config_permissions JSONB NOT NULL,  -- Permission matrix
  created_by UUID,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  UNIQUE(organization_id, user_id),
  INDEX idx_org_permissions (organization_id),
  FOREIGN KEY (organization_id) REFERENCES organizations(id),
  FOREIGN KEY (user_id) REFERENCES auth.users(id)
);

-- Conversational config sessions
CREATE TABLE config_conversation_sessions (
  conversation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  config_id UUID NOT NULL,
  user_id UUID NOT NULL,
  organization_id UUID NOT NULL,
  product_type VARCHAR(20) NOT NULL,  -- 'chatbot' | 'voicebot'
  messages JSONB[],  -- Conversation history
  detected_changes JSONB[],
  status VARCHAR(20),  -- 'active' | 'pending_approval' | 'completed' | 'abandoned'
  started_at TIMESTAMP DEFAULT NOW(),
  completed_at TIMESTAMP,
  INDEX idx_config_conversations (config_id, started_at),
  FOREIGN KEY (config_id) REFERENCES configurations(config_id)
);

-- Configuration draft versions (before applying)
CREATE TABLE config_drafts (
  draft_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  config_id UUID NOT NULL,
  proposed_changes JSONB NOT NULL,
  diff JSONB,
  commit_message TEXT,
  created_by UUID NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  expires_at TIMESTAMP,  -- Drafts expire after 7 days
  applied BOOLEAN DEFAULT false,
  applied_at TIMESTAMP,
  INDEX idx_config_drafts (config_id, created_at),
  FOREIGN KEY (config_id) REFERENCES configurations(config_id)
);
```

#### Kafka Events

```json
// Published when client requests configuration change
{
  "event_type": "client_config_change_requested",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "voicebot",
  "requested_by": "client_user_id",
  "requested_via": "conversational_agent",  // conversational_agent | visual_dashboard
  "changes": [
    {
      "type": "voice_parameter_change",
      "parameter": "speed",
      "old_value": 1.0,
      "new_value": 0.8
    }
  ],
  "risk_level": "low",
  "auto_approved": true,
  "version": "v48",
  "timestamp": "2025-10-15T14:00:00Z"
}
```

```json
// Published when configuration is successfully applied
{
  "event_type": "client_config_applied",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "chatbot",
  "version": "v48",
  "changes": [...],
  "applied_by": "uuid",
  "commit_message": "Changed tone to casual",
  "hot_reload_required": true,
  "timestamp": "2025-10-15T14:01:00Z"
}
```

```json
// Published when configuration is rolled back
{
  "event_type": "client_config_rolled_back",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "voicebot",
  "rolled_back_from": "v48",
  "rolled_back_to": "v47",
  "new_version": "v49",
  "reason": "New voice speed causing customer complaints",
  "rolled_back_by": "uuid",
  "timestamp": "2025-10-15T15:00:00Z"
}
```

#### Frontend Components (React/Next.js)

**Routes:**
- `/dashboard/config` - Main configuration dashboard
- `/dashboard/config/chat` - Conversational configuration interface
- `/dashboard/config/visual/chatbot` - Visual chatbot configuration panel
- `/dashboard/config/visual/voicebot` - Visual voicebot configuration panel (matches provided images)
- `/dashboard/config/versions` - Version history timeline (git-style)
- `/dashboard/config/permissions` - Member permission management
- `/dashboard/config/preview` - Configuration testing sandbox

**Key Components:**

```tsx
// ConfigChatInterface.tsx
<ConfigChatInterface
  configId={configId}
  productType={productType}
  onChangeDetected={(changes) => showPreview(changes)}
  onApprovalRequired={(changes) => requestApproval(changes)}
/>

// VoicebotConfigPanel.tsx (matches provided images)
<VoicebotConfigPanel
  config={config}
  sections={[
    {
      title: "Additional Configuration",
      fields: [
        { type: "select", name: "background_sound", label: "Background Sound", options: ["Office", "Cafe", "Silence", "Custom"] },
        { type: "text", name: "background_sound_url", label: "Background Sound URL", placeholder: "https://www.soundjay.com/" },
        { type: "slider", name: "input_min_characters", label: "Input Min Characters", min: 10, max: 100, default: 10 }
      ]
    },
    {
      title: "Model Settings",
      fields: [
        { type: "select", name: "model", label: "Model" },
        { type: "slider", name: "clarity_similarity", label: "Clarity + Similarity", min: 0, max: 1, default: 0.75 },
        { type: "slider", name: "speed", label: "Speed", min: 0, max: 2, default: 1 },
        { type: "slider", name: "style_exaggeration", label: "Style Exaggeration", min: 0, max: 1, default: 0 },
        { type: "slider", name: "optimize_streaming_latency", label: "Optimize Streaming Latency", min: 0, max: 4, default: 4 },
        { type: "toggle", name: "use_speaker_boost", label: "Use Speaker Boost" },
        { type: "toggle", name: "auto_mode", label: "Auto Mode" }
      ]
    },
    {
      title: "Stop Speaking Plan",
      fields: [
        { type: "slider", name: "number_of_words", label: "Number of words", min: 0, max: 10, default: 3 },
        { type: "slider", name: "voice_seconds", label: "Voice seconds", min: 0, max: 1, step: 0.1, default: 0.5 },
        { type: "slider", name: "back_off_seconds", label: "Back off seconds", min: 0, max: 10, default: 2 }
      ]
    }
  ]}
  onSave={(changes) => applyConfigChanges(changes)}
  onPreview={() => openTestCall()}
/>

// VersionHistoryTimeline.tsx
<VersionHistoryTimeline
  configId={configId}
  versions={versions}
  onRollback={(version) => rollbackToVersion(version)}
  onDiffView={(v1, v2) => showDiffViewer(v1, v2)}
/>

// PermissionMatrix.tsx
<PermissionMatrix
  organizationId={organizationId}
  members={members}
  permissions={permissionSchema}
  onUpdatePermissions={(userId, permissions) => updateMemberPermissions(userId, permissions)}
  canEdit={currentUser.role === 'organization_admin'}
/>
```

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Organization Admin (Client)**
   - Role: Full configuration control, permission management
   - Access: All configuration features
   - Permissions: All config_permissions enabled
   - Workflows: Changes config via chat/visual UI, manages team permissions, reviews version history

2. **Config Manager (Client)**
   - Role: Day-to-day configuration management
   - Access: Most configuration features except deployment and permission management
   - Permissions: View, edit prompts/voice params, rollback (no deployment, no permission management)
   - Workflows: Adjusts chatbot tone, modifies voice settings, tests changes

3. **Config Viewer (Client)**
   - Role: Read-only config access
   - Access: View-only dashboard
   - Permissions: view_config only
   - Workflows: Reviews current configuration, views change history

4. **Support Agent (Platform)**
   - Role: Assists clients with complex configuration requests
   - Access: Join client config sessions, create GitHub tool requests
   - Permissions: read:client_configs, create:github_issues, join:config_sessions
   - Workflows: Receives escalation from config agent, helps client configure advanced features, creates tool requests

**AI Agents:**

1. **Configuration Assistant Agent**
   - Responsibility: Classifies configuration requests, generates previews, validates changes
   - Tools: LLM for intent classification, tool catalog search, config diff generator, schema validator
   - Autonomy: Fully autonomous for low-risk changes (auto-apply), requests approval for medium/high risk
   - Escalation: Human support agent for unrecognized requests or failed classifications

2. **Config Validation Agent**
   - Responsibility: Validates configuration changes before deployment, detects breaking changes
   - Tools: JSON Schema validator, conflict detector, impact analyzer
   - Autonomy: Fully autonomous validation
   - Escalation: Platform engineer alert for validation failures or high-risk changes

**Approval Workflows:**
1. Low-risk changes (voice params, tone adjustments) → Auto-approved
2. Medium-risk changes (tool additions, escalation rules) → Organization Admin approval
3. High-risk changes (integration modifications, tool removals) → Organization Admin + Platform Engineer approval
4. Failed changes (validation errors) → Auto-rollback + Support Agent notification

---

## 20. Hyperpersonalization Engine Service

#### Objectives
- **Primary Purpose**: AI-driven personalization of chatbot/voicebot responses based on customer lifecycle stage, cohort behavior, and real-time experimentation
- **Business Value**: Increase conversion rates by 25%, reduce churn by 15%, optimize engagement per customer segment
- **Inspired By**: JustWords.ai approach to lifecycle marketing hyperpersonalization
- **Scope Boundaries**:
  - **Does**: Customer cohort segmentation, dynamic response personalization, A/B/N testing at scale, lifecycle stage automation, engagement optimization
  - **Does Not**: Replace core agent logic, modify tool execution, handle PII storage (Agent Orchestration does)

#### Requirements

**Functional Requirements:**
1. Segment customers into cohorts based on lifecycle stage, usage patterns, engagement levels
2. Dynamically modify chatbot/voicebot responses per cohort without changing base config
3. Run 50-100 message variations simultaneously with multi-armed bandit optimization
4. Automate lifecycle-stage-specific messaging (trial, active, at-risk, renewal)
5. Learn individual user preferences and adapt messaging over time
6. Track engagement metrics (CTR, conversion rate, session duration) per variant
7. Auto-optimize variant weights based on success metrics

**Non-Functional Requirements:**
- Personalization decision: <50ms (must not impact conversation latency)
- Support 1M+ active customer profiles
- Experimentation throughput: 10,000+ variants tested daily
- 99.9% uptime for personalization engine

**Dependencies:**
- **Agent Orchestration Service** *[See Service 8 above]* (consumes personalization rules for chatbot)
- **Voice Agent Service** *[See Service 9 above]* (consumes personalization rules for voicebot)
- **Analytics Service** *[See Service 12 above]* (provides engagement metrics for optimization)
- **Customer Success Service** *[See Service 13 above]* (lifecycle stage data)
- **LLM Gateway Service** *[See MICROSERVICES_ARCHITECTURE_PART2.md Service 16]* (generates variant messaging)

**Data Storage:**
- PostgreSQL: Cohort definitions, personalization rules, experiment configurations
- Redis: Real-time user cohort assignments, variant weights
- Pinecone: Individual user preference embeddings
- ClickHouse: Engagement event logs (time-series), A/B test results

#### Features

**Must-Have:**
1. ✅ Customer cohort segmentation engine (behavioral clustering)
2. ✅ Lifecycle stage automation (trial/active/at-risk/renewal messaging)
3. ✅ Dynamic response personalization per cohort
4. ✅ Multi-armed bandit experimentation (Thompson Sampling)
5. ✅ Real-time variant weight optimization
6. ✅ Engagement metrics tracking (CTR, conversion, session duration)
7. ✅ Individual user preference learning (collaborative filtering)

**Nice-to-Have:**
8. 🔄 Predictive churn scoring (identify at-risk customers before lifecycle stage change)
9. 🔄 Cross-product personalization (chatbot learns from voicebot interactions)
10. 🔄 Seasonal/temporal messaging adjustments (holiday campaigns, product launches)
11. 🔄 Sentiment-driven personalization (adjust tone based on customer mood)

**Feature Interactions:**
- User starts conversation → Personalization Engine assigns cohort → Returns personalized system prompt override → Agent uses modified prompt
- Variant performs well (high CTR) → Weight increased automatically → More users see successful variant
- User moves from "trial" to "active" lifecycle stage → Messaging shifts from educational to efficiency-focused
- Experiment reaches statistical significance → Winning variant promoted to default

#### Personalization Architecture

**Customer Cohort Definitions:**

```yaml
customer_cohorts:
  - cohort_id: "new_trial_users"
    lifecycle_stage: "trial"
    filters:
      days_since_signup: { min: 0, max: 14 }
      engagement_level: "exploring"
      feature_adoption: { max: 3 }
    size_estimate: 1200
    personalization_strategy: "educational_nurture"

  - cohort_id: "active_power_users"
    lifecycle_stage: "active"
    filters:
      monthly_usage: { min: 1000, metric: "conversations" }
      engagement_level: "high"
      subscription_tier: "professional"
    size_estimate: 450
    personalization_strategy: "upsell_premium_features"

  - cohort_id: "at_risk_churners"
    lifecycle_stage: "active"
    filters:
      engagement_trend: "declining_30d"
      engagement_level: "low"
      support_tickets: { min: 2, timeframe: "30d" }
    size_estimate: 180
    personalization_strategy: "retention_intervention"

  - cohort_id: "renewal_approaching"
    lifecycle_stage: "active"
    filters:
      days_until_renewal: { min: 0, max: 30 }
      contract_value: { min: 50000 }
    size_estimate: 90
    personalization_strategy: "renewal_value_reinforcement"
```

**Dynamic Response Personalization Rules:**

```yaml
personalization_rules:
  - trigger: "cohort == new_trial_users"
    modifications:
      system_prompt_override: |
        You are an enthusiastic guide helping new users discover chatbot capabilities.
        Use an educational, patient tone. Highlight ease-of-use and quick wins.
        Proactively offer helpful tips and examples. End responses with encouraging CTAs.
      response_templates:
        greeting: "Welcome to Acme Chatbot! I'm here to help you get started. What would you like to build today?"
        feature_highlight: ["ease_of_use", "template_library", "drag_drop_builder", "24/7_support"]
        cta_priority: "schedule_onboarding_call"
      show_examples: true
      tone_keywords: ["easy", "simple", "guide", "show you", "let me help"]

  - trigger: "cohort == active_power_users"
    modifications:
      system_prompt_override: |
        You are an efficient expert assistant for power users. Be concise and technical.
        Assume user knowledge. Highlight advanced features and API capabilities.
        Focus on efficiency and ROI. Use data-driven language.
      response_templates:
        greeting: "Ready to optimize your workflows? What can I help you build?"
        feature_highlight: ["api_access", "custom_integrations", "advanced_analytics", "webhook_automation"]
        cta_priority: "upgrade_to_enterprise"
      show_usage_stats: true
      show_api_docs: true
      tone_keywords: ["optimize", "advanced", "integrate", "automate", "scale"]

  - trigger: "cohort == at_risk_churners"
    modifications:
      system_prompt_override: |
        You are an empathetic problem-solver focused on demonstrating value.
        Acknowledge challenges. Share success stories from similar companies.
        Offer proactive help. Highlight competitive advantages and ROI.
      response_templates:
        greeting: "I noticed you might need some help. I'm here to make sure you're getting the most value from Acme Chatbot."
        feature_highlight: ["success_stories", "roi_metrics", "cost_savings", "support_commitment"]
        cta_priority: "talk_to_success_manager"
      offer_incentive: "20_percent_discount_renewal"
      show_success_metrics: true
      tone_keywords: ["value", "help", "success", "support", "partnership"]
```

**Multi-Armed Bandit Experimentation:**

```yaml
experiments:
  - experiment_id: "greeting_optimization_trial_users"
    cohort: "new_trial_users"
    target_metric: "conversation_completion_rate"
    secondary_metrics: ["feature_adoption_rate", "time_to_first_action"]

    variants:
      - variant_id: "friendly_casual"
        system_prompt_override: |
          Start conversations with warm, casual greetings. Use friendly emojis sparingly.
          Make users feel welcomed and excited to explore.
        initial_weight: 0.25
        current_weight: 0.32  # Auto-adjusted based on performance
        trials: 1543
        conversions: 1122
        conversion_rate: 0.727

      - variant_id: "professional_direct"
        system_prompt_override: |
          Start with direct, value-focused messaging. Get straight to business.
          Emphasize time savings and efficiency.
        initial_weight: 0.25
        current_weight: 0.18  # Underperforming, weight reduced
        trials: 987
        conversions: 658
        conversion_rate: 0.666

      - variant_id: "educational_helpful"
        system_prompt_override: |
          Begin by offering helpful tips and guidance. Act as a patient teacher.
          Use step-by-step explanations. Reference documentation proactively.
        initial_weight: 0.25
        current_weight: 0.38  # Best performing, weight increased
        trials: 2011
        conversions: 1587
        conversion_rate: 0.789

      - variant_id: "personalized_contextual"
        system_prompt_override: |
          Reference user's company, industry, or previous interactions contextually.
          Make conversation feel tailored and relevant.
        initial_weight: 0.25
        current_weight: 0.12  # Low sample size, still exploring
        trials: 421
        conversions: 298
        conversion_rate: 0.708

    optimization_algorithm: "thompson_sampling"
    min_sample_size_per_variant: 1000
    confidence_level: 0.95
    auto_promote_winner: true  // Promote to default when significance reached
    status: "running"
    started_at: "2025-10-01T00:00:00Z"
```

**Lifecycle Stage Automation:**

```yaml
lifecycle_automations:
  - stage: "trial_day_1"
    trigger: "user_signed_up"
    day_offset: 0
    personalization:
      tone: "enthusiastic, welcoming"
      focus: "onboarding, quick wins"
      cta: "explore_templates"
      message_examples:
        - "Welcome! Let me show you how to build your first chatbot in under 5 minutes."
        - "Great to have you here! What type of chatbot are you interested in creating?"

  - stage: "trial_day_7"
    trigger: "user_signed_up"
    day_offset: 7
    personalization:
      tone: "encouraging, value-focused"
      focus: "success_stories, roi"
      cta: "schedule_demo_call"
      message_examples:
        - "You're halfway through your trial! Companies like yours see 40% cost reduction in month 1."
        - "Let's build something impactful together. Ready to see advanced features?"

  - stage: "trial_day_13"
    trigger: "user_signed_up"
    day_offset: 13
    personalization:
      tone: "urgent, conversion-focused"
      focus: "plan_comparison, easy_upgrade"
      cta: "upgrade_now"
      message_examples:
        - "Your trial ends in 24 hours. Upgrade now to keep your chatbots live!"
        - "Don't lose your progress! Click here to choose your plan."

  - stage: "active_month_6"
    trigger: "subscription_activated"
    day_offset: 180
    personalization:
      tone: "consultative, upsell"
      focus: "advanced_features, enterprise_benefits"
      cta: "upgrade_to_enterprise"
      message_examples:
        - "You're using 80% of your Professional plan. Unlock unlimited conversations with Enterprise."
        - "Ready to scale? Enterprise gives you API access, priority support, and custom integrations."

  - stage: "renewal_month_11"
    trigger: "subscription_activated"
    day_offset: 330
    personalization:
      tone: "grateful, value_reinforcement"
      focus: "impact_metrics, partnership"
      cta: "renew_early"
      message_examples:
        - "Amazing year together! You've automated 10,000 conversations and saved 200+ support hours."
        - "Let's plan 2026. Early renewal gets you 15% off + priority access to new features."
```

#### API Specification

**1. Evaluate Personalization**
```http
POST /api/v1/personalization/evaluate
Authorization: Bearer {platform_jwt}
Content-Type: application/json

Request Body:
{
  "user_id": "uuid",
  "organization_id": "uuid",
  "product_type": "chatbot",
  "conversation_context": {
    "lifecycle_stage": "trial",
    "days_since_signup": 3,
    "previous_interactions": 7,
    "engagement_score": 0.72,
    "features_used": ["template_builder", "test_mode"],
    "support_tickets": 0
  },
  "message_intent": "greeting"  // greeting | feature_request | support | upsell
}

Response (200 OK):
{
  "cohort": "new_trial_users",
  "cohort_confidence": 0.94,
  "personalization_strategy": "educational_nurture",
  "recommended_modifications": {
    "tone": "educational, patient, encouraging",
    "features_to_highlight": ["template_library", "drag_drop_builder", "quick_start_guides"],
    "cta": "explore_demo_templates",
    "show_examples": true,
    "experiment_variant": "educational_helpful"
  },
  "system_prompt_override": "You are an enthusiastic guide helping new users discover chatbot capabilities. Use an educational, patient tone...",
  "response_templates": {
    "greeting": "Welcome back! Ready to continue building your chatbot?",
    "encouragement": "You're doing great! You've already explored templates and tested your bot."
  },
  "confidence": 0.89,
  "experiment_id": "greeting_optimization_trial_users",
  "variant_weight": 0.38,
  "cached": true,
  "cache_ttl": 300  // 5 minute cache
}
```

**2. Track Engagement Event**
```http
POST /api/v1/personalization/events
Authorization: Bearer {platform_jwt}
Content-Type: application/json

Request Body:
{
  "user_id": "uuid",
  "organization_id": "uuid",
  "product_type": "voicebot",
  "event_type": "conversion",  // conversion | ctr | session_complete | feature_adopted | churn_signal
  "cohort": "active_power_users",
  "experiment_id": "greeting_optimization_trial_users",
  "variant_id": "educational_helpful",
  "context": {
    "session_duration": 420,  // seconds
    "messages_exchanged": 12,
    "cta_clicked": true,
    "feature_adopted": "api_integration"
  },
  "timestamp": "2025-10-15T14:30:00Z"
}

Response (202 Accepted):
{
  "event_id": "uuid",
  "status": "queued_for_processing",
  "variant_weight_will_update": true,
  "estimated_processing_time": "30 seconds"
}
```

**3. Get Cohort Assignment**
```http
GET /api/v1/personalization/cohorts/{user_id}
Authorization: Bearer {platform_jwt}
Query Parameters:
- organization_id: uuid

Response (200 OK):
{
  "user_id": "uuid",
  "organization_id": "uuid",
  "current_cohort": "new_trial_users",
  "lifecycle_stage": "trial",
  "cohort_assigned_at": "2025-10-12T10:00:00Z",
  "cohort_metadata": {
    "days_since_signup": 3,
    "engagement_level": "exploring",
    "feature_adoption_count": 2,
    "predicted_churn_risk": 0.15
  },
  "personalization_strategy": "educational_nurture",
  "active_experiments": [
    {
      "experiment_id": "greeting_optimization_trial_users",
      "variant_assigned": "educational_helpful",
      "assigned_at": "2025-10-12T10:00:00Z"
    }
  ]
}
```

**4. Create Experiment**
```http
POST /api/v1/personalization/experiments
Authorization: Bearer {platform_admin_jwt}
Content-Type: application/json

Request Body:
{
  "experiment_name": "CTA Optimization for At-Risk Users",
  "cohort_id": "at_risk_churners",
  "target_metric": "retention_rate",
  "secondary_metrics": ["session_duration", "support_ticket_resolution"],
  "variants": [
    {
      "variant_name": "discount_offer",
      "system_prompt_override": "Offer 20% renewal discount proactively. Emphasize partnership and support.",
      "initial_weight": 0.33
    },
    {
      "variant_name": "success_manager_intro",
      "system_prompt_override": "Introduce dedicated success manager. Offer personalized help and quarterly reviews.",
      "initial_weight": 0.33
    },
    {
      "variant_name": "feature_unlock",
      "system_prompt_override": "Unlock premium features temporarily. Show value through hands-on experience.",
      "initial_weight": 0.34
    }
  ],
  "min_sample_size": 500,
  "confidence_level": 0.95,
  "auto_promote_winner": false,  // Manual review required for high-value cohort
  "duration_days": 30
}

Response (201 Created):
{
  "experiment_id": "uuid",
  "status": "pending_approval",  // High-value cohort requires approval
  "estimated_sample_size": 180,
  "estimated_duration": "16 days",
  "approval_required_from": "platform_admin",
  "created_at": "2025-10-15T15:00:00Z"
}
```

**5. Get Experiment Results**
```http
GET /api/v1/personalization/experiments/{experiment_id}/results
Authorization: Bearer {platform_jwt}

Response (200 OK):
{
  "experiment_id": "uuid",
  "experiment_name": "greeting_optimization_trial_users",
  "cohort_id": "new_trial_users",
  "status": "completed",
  "winner": "educational_helpful",
  "statistical_significance": true,
  "confidence_level": 0.97,
  "started_at": "2025-10-01T00:00:00Z",
  "completed_at": "2025-10-14T18:00:00Z",
  "variants": [
    {
      "variant_id": "friendly_casual",
      "trials": 1543,
      "conversions": 1122,
      "conversion_rate": 0.727,
      "confidence_interval": [0.705, 0.749],
      "lift_vs_control": "+9.3%"
    },
    {
      "variant_id": "professional_direct",
      "trials": 987,
      "conversions": 658,
      "conversion_rate": 0.666,
      "confidence_interval": [0.636, 0.696],
      "lift_vs_control": "0% (control)"
    },
    {
      "variant_id": "educational_helpful",
      "trials": 2011,
      "conversions": 1587,
      "conversion_rate": 0.789,
      "confidence_interval": [0.769, 0.809],
      "lift_vs_control": "+18.5%",
      "winner": true
    },
    {
      "variant_id": "personalized_contextual",
      "trials": 421,
      "conversions": 298,
      "conversion_rate": 0.708,
      "confidence_interval": [0.665, 0.751],
      "lift_vs_control": "+6.3%"
    }
  ],
  "recommendation": "Promote 'educational_helpful' to default. Consider combining with 'personalized_contextual' elements."
}
```

#### Database Schema

```sql
-- Customer cohorts
CREATE TABLE customer_cohorts (
  cohort_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cohort_name VARCHAR(100) NOT NULL,
  lifecycle_stage VARCHAR(50),  -- trial | active | at_risk | renewal
  filters JSONB NOT NULL,  -- Cohort membership criteria
  personalization_strategy VARCHAR(100),
  size_estimate INTEGER,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  active BOOLEAN DEFAULT true
);

-- User cohort assignments (real-time)
CREATE TABLE user_cohort_assignments (
  assignment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  organization_id UUID NOT NULL,
  cohort_id UUID NOT NULL,
  lifecycle_stage VARCHAR(50),
  assigned_at TIMESTAMP DEFAULT NOW(),
  cohort_metadata JSONB,  // Engagement scores, feature adoption, etc.
  INDEX idx_user_cohort (user_id, assigned_at DESC),
  INDEX idx_org_cohort (organization_id, cohort_id),
  FOREIGN KEY (cohort_id) REFERENCES customer_cohorts(cohort_id)
);

-- Personalization rules
CREATE TABLE personalization_rules (
  rule_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cohort_id UUID,
  trigger_condition TEXT,  -- SQL-like condition
  modifications JSONB NOT NULL,  // System prompt overrides, feature highlights, etc.
  priority INTEGER DEFAULT 0,
  active BOOLEAN DEFAULT true,
  created_at TIMESTAMP DEFAULT NOW(),
  INDEX idx_cohort_rules (cohort_id, priority),
  FOREIGN KEY (cohort_id) REFERENCES customer_cohorts(cohort_id)
);

-- Experiments
CREATE TABLE personalization_experiments (
  experiment_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  experiment_name VARCHAR(200) NOT NULL,
  cohort_id UUID NOT NULL,
  target_metric VARCHAR(100),
  secondary_metrics JSONB,
  min_sample_size INTEGER,
  confidence_level DECIMAL(3,2),
  optimization_algorithm VARCHAR(50) DEFAULT 'thompson_sampling',
  auto_promote_winner BOOLEAN DEFAULT false,
  status VARCHAR(50),  -- draft | pending_approval | running | completed | cancelled
  started_at TIMESTAMP,
  completed_at TIMESTAMP,
  created_by UUID,
  INDEX idx_experiment_status (status, started_at),
  FOREIGN KEY (cohort_id) REFERENCES customer_cohorts(cohort_id)
);

-- Experiment variants
CREATE TABLE experiment_variants (
  variant_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  experiment_id UUID NOT NULL,
  variant_name VARCHAR(100),
  system_prompt_override TEXT,
  response_templates JSONB,
  initial_weight DECIMAL(5,4),
  current_weight DECIMAL(5,4),
  trials INTEGER DEFAULT 0,
  conversions INTEGER DEFAULT 0,
  conversion_rate DECIMAL(5,4),
  INDEX idx_experiment_variants (experiment_id),
  FOREIGN KEY (experiment_id) REFERENCES personalization_experiments(experiment_id)
);

-- Engagement events (time-series in ClickHouse for performance)
-- PostgreSQL stores aggregated summaries only
CREATE TABLE engagement_event_summary (
  summary_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  experiment_id UUID,
  variant_id UUID,
  cohort_id UUID,
  date DATE NOT NULL,
  hour INTEGER,  -- 0-23 for hourly aggregation
  event_type VARCHAR(50),
  event_count INTEGER,
  total_conversions INTEGER,
  avg_session_duration DECIMAL(10,2),
  INDEX idx_experiment_summary (experiment_id, date, hour),
  FOREIGN KEY (experiment_id) REFERENCES personalization_experiments(experiment_id)
);

-- Individual user preferences (learned over time)
CREATE TABLE user_preferences (
  user_id UUID PRIMARY KEY,
  organization_id UUID NOT NULL,
  preference_vector VECTOR(384),  // Embedding for collaborative filtering
  learned_preferences JSONB,  // Explicit preferences (tone, verbosity, etc.)
  last_updated TIMESTAMP DEFAULT NOW(),
  INDEX idx_org_users (organization_id)
);
```

#### Integration with Agent Orchestration & Voice Agent

**Modified Agent Workflow (with Personalization):**

```python
# In Agent Orchestration Service (Service 8) - Before generating response

async def generate_response(user_id, organization_id, message, config):
    # 1. Fetch personalization context
    personalization = await personalization_engine.evaluate(
        user_id=user_id,
        organization_id=organization_id,
        product_type="chatbot",
        conversation_context={
            "lifecycle_stage": get_lifecycle_stage(user_id),
            "days_since_signup": get_days_since_signup(user_id),
            "engagement_score": get_engagement_score(user_id)
        },
        message_intent=classify_intent(message)
    )

    # 2. Apply personalization overrides
    if personalization:
        # Override system prompt dynamically
        system_prompt = personalization.system_prompt_override or config.system_prompt

        # Filter/prioritize tools based on cohort
        available_tools = filter_tools_by_cohort(
            all_tools=config.tools,
            cohort=personalization.cohort
        )

        # Inject personalized response templates
        response_templates = personalization.response_templates
    else:
        # Use base config
        system_prompt = config.system_prompt
        available_tools = config.tools
        response_templates = {}

    # 3. Generate response with personalized context
    response = await llm_gateway.generate(
        system_prompt=system_prompt,
        user_message=message,
        tools=available_tools,
        response_templates=response_templates
    )

    # 4. Track engagement event for experiment optimization
    if personalization and personalization.experiment_id:
        await personalization_engine.track_event(
            user_id=user_id,
            event_type="message_generated",
            experiment_id=personalization.experiment_id,
            variant_id=personalization.variant_id,
            context={"response_length": len(response)}
        )

    return response
```

#### Stakeholders and Agents

**Human Stakeholders:**

1. **Marketing Manager (Client)**
   - Role: Defines lifecycle campaigns, reviews experiment results
   - Access: Experiment dashboard, cohort analytics
   - Permissions: create:experiments, read:analytics, approve:high_value_cohorts
   - Workflows: Creates A/B tests for messaging, reviews performance, adjusts cohort strategies

2. **Customer Success Manager (Platform)**
   - Role: Monitors cohort health, identifies at-risk customers
   - Access: Cohort assignments, lifecycle stage transitions
   - Permissions: read:all_cohorts, create:retention_campaigns, update:lifecycle_stages
   - Workflows: Reviews at-risk cohort daily, launches retention experiments, coordinates with sales

**AI Agents:**

1. **Cohort Assignment Agent**
   - Responsibility: Assigns users to cohorts based on behavior, updates assignments in real-time
   - Tools: Behavioral clustering algorithms, engagement scoring models
   - Autonomy: Fully autonomous cohort assignment
   - Escalation: None

2. **Experiment Optimization Agent**
   - Responsibility: Adjusts variant weights using Thompson Sampling, promotes winners automatically
   - Tools: Multi-armed bandit algorithms, statistical significance testing
   - Autonomy: Autonomous weight adjustment, approval required for winner promotion in high-value cohorts
   - Escalation: Marketing Manager approval for promoting experiment winners

**Approval Workflows:**
1. Standard experiments (trial users) → Auto-approved
2. High-value cohort experiments (enterprise customers) → Marketing Manager approval required
3. Winner promotion (trial users) → Auto-promoted when significant
4. Winner promotion (high-value cohorts) → Marketing Manager approval required

---

## Inter-Service Communication Patterns

### Event-Driven (Primary)

**Kafka Topics:**
- `auth_events`: User signed up, email verified, user logged in, password reset, assisted account created, assisted account claimed, claim link sent, claim link resent, assisted account expired, assisted account access granted, account ownership transferred
- `org_events`: Organization created, member invited, member joined, member removed, role updated, config permissions updated
- `agent_events`: Agent registered, client assigned to agent, handoff initiated, handoff accepted, handoff rejected, specialist invited, specialist joined, specialist handoff back, agent status updated, agent availability changed, workload redistributed
- `collaboration_events`: Help requested, agent joined session, canvas edited, collaboration ended
- `client_events`: Research completed, NDA signed, pilot agreed
- `demo_events`: Demo generated, approved, failed
- `prd_events`: PRD created, approved, updated, feedback received
- `config_events`: Config generated, deployed, hot-reloaded, config updated by client, config rollback, config version compared, config preview generated, config branch created
- `conversation_events`: Started, escalated, completed
- `voice_events`: Call initiated, transferred, ended
- `cross_product_events`: Voicebot paused, chatbot paused, image processed, data shared
- `analytics_events`: KPIs calculated, experiments completed
- `monitoring_events`: Incidents created, resolved
- `escalation_events`: Human handoff triggered
- `outreach_events`: Email sent, email opened, email clicked, manual ticket created
- `research_events`: Research started, research completed, research failed
- `personalization_events`: Cohort assigned, experiment variant assigned, engagement tracked, message variant performance updated

---

## Event Schema Registry

Complete mapping of Kafka topics to event types, schemas, producers, and consumers.

### auth_events

**Producers:** Organization Management & Authentication Service
**Consumers:** Monitoring Engine, Analytics Service, Human Agent Management Service, Outbound Communication Service

**Event Types:**

1. **user_signed_up**
```json
{
  "event_type": "user_signed_up",
  "user_id": "uuid",
  "organization_id": "uuid",
  "email": "user@example.com",
  "user_type": "client",
  "timestamp": "2025-10-06T10:00:00Z"
}
```

2. **assisted_account_created**
```json
{
  "event_type": "assisted_account_created",
  "user_id": "uuid",
  "organization_id": "uuid",
  "client_email": "client@example.com",
  "created_by_agent_id": "uuid",
  "created_by_agent_role": "sales_agent",
  "claim_token": "CLAIM-ABC123-XYZ789",
  "expires_at": "2025-11-04T10:30:00Z",
  "timestamp": "2025-10-05T10:30:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Auto-assign client to creating agent
- Outbound Communication: Send claim link email

3. **assisted_account_claimed**
```json
{
  "event_type": "assisted_account_claimed",
  "user_id": "uuid",
  "organization_id": "uuid",
  "email": "client@example.com",
  "claim_token": "CLAIM-ABC123-XYZ789",
  "claimed_at": "2025-10-10T09:15:00Z",
  "timestamp": "2025-10-10T09:15:00Z"
}
```
**Consumer Actions:**
- Monitoring Engine: Track conversion metrics
- Analytics: Update funnel statistics

---

### agent_events

**Producers:** Human Agent Management Service
**Consumers:** Analytics Service, Monitoring Engine, Organization Management Service

**Event Types:**

1. **client_assigned_to_agent**
```json
{
  "event_type": "client_assigned_to_agent",
  "client_id": "uuid",
  "organization_id": "uuid",
  "agent_id": "uuid",
  "agent_name": "Sam Peterson",
  "agent_role": "sales_agent",
  "assignment_type": "auto_on_assisted_signup",
  "lifecycle_stage": "sales",
  "timestamp": "2025-10-05T10:30:00Z"
}
```
**Consumer Actions:**
- Analytics: Track agent workload
- Monitoring: Alert if agent capacity exceeded

2. **handoff_initiated**
```json
{
  "event_type": "handoff_initiated",
  "handoff_id": "uuid",
  "client_id": "uuid",
  "organization_id": "uuid",
  "from_agent_id": "uuid",
  "from_role": "sales_agent",
  "to_role": "onboarding_specialist",
  "lifecycle_stage_from": "sales",
  "lifecycle_stage_to": "onboarding",
  "context_notes": "Client signed proposal, needs technical onboarding for e-commerce integration",
  "timestamp": "2025-10-15T14:00:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Queue handoff for acceptance by onboarding agents
- Analytics: Track handoff latency

3. **handoff_accepted**
```json
{
  "event_type": "handoff_accepted",
  "handoff_id": "uuid",
  "client_id": "uuid",
  "accepted_by_agent_id": "uuid",
  "accepted_by_agent_name": "Rahul Kumar",
  "accepted_at": "2025-10-15T15:00:00Z",
  "timestamp": "2025-10-15T15:00:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Update client assignment, mark handoff complete
- Outbound Communication: Send handoff confirmation email to client

4. **handoff_rejected**
```json
{
  "event_type": "handoff_rejected",
  "handoff_id": "uuid",
  "client_id": "uuid",
  "rejected_by_agent_id": "uuid",
  "reason": "at_capacity",
  "reassignment_queued": true,
  "timestamp": "2025-10-15T15:00:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Auto-reassign to next available agent

5. **specialist_invited**
```json
{
  "event_type": "specialist_invited",
  "invitation_id": "uuid",
  "client_id": "uuid",
  "invited_by_agent_id": "uuid",
  "specialist_role": "sales_specialist",
  "invitation_reason": "upsell_voice_addon",
  "timestamp": "2025-10-20T10:00:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Queue invitation for specialist acceptance
- Analytics: Track upsell opportunities

---

### cross_product_events

**Producers:** Agent Orchestration Service (chatbot), Voice Agent Service (voicebot)
**Consumers:** Agent Orchestration Service (chatbot), Voice Agent Service (voicebot)

**Purpose:** Enables coordination between chatbot and voicebot products when both are active for the same user session.

**Event Types:**

1. **voicebot_session_started**
```json
{
  "event_type": "voicebot_session_started",
  "call_id": "uuid",
  "user_id": "uuid",
  "organization_id": "uuid",
  "phone_number": "+15551234567",
  "config_id": "uuid",
  "timestamp": "2025-10-11T11:00:00Z"
}
```
**Consumer Actions:**
- Agent Orchestration (chatbot): Pause conversational responses, enter silent processing mode
- Analytics: Track multi-channel engagement

2. **voicebot_session_ended**
```json
{
  "event_type": "voicebot_session_ended",
  "call_id": "uuid",
  "user_id": "uuid",
  "organization_id": "uuid",
  "duration_seconds": 295,
  "timestamp": "2025-10-11T11:05:00Z"
}
```
**Consumer Actions:**
- Agent Orchestration (chatbot): Resume conversational responses if chatbot session active
- Analytics: Calculate session overlap metrics

3. **chatbot_image_processed**
```json
{
  "event_type": "chatbot_image_processed",
  "conversation_id": "uuid",
  "user_id": "uuid",
  "organization_id": "uuid",
  "image_type": "medical_prescription",
  "extracted_data": {
    "medication_name": "Amoxicillin",
    "dosage": "500mg",
    "frequency": "3 times daily",
    "prescribing_doctor": "Dr. Sarah Johnson",
    "prescription_date": "2025-10-11"
  },
  "processing_latency_ms": 1250,
  "timestamp": "2025-10-11T11:02:30Z"
}
```
**Consumer Actions:**
- Voice Agent Service: Incorporate extracted data into voice conversation context
- Voicebot responds: "I see you've uploaded a prescription for Amoxicillin 500mg, 3 times daily from Dr. Sarah Johnson. Would you like me to help you with a refill?"

4. **chatbot_data_shared**
```json
{
  "event_type": "chatbot_data_shared",
  "conversation_id": "uuid",
  "user_id": "uuid",
  "organization_id": "uuid",
  "data_type": "form_submission",
  "shared_data": {
    "field_1": "value_1",
    "field_2": "value_2"
  },
  "timestamp": "2025-10-11T11:03:00Z"
}
```
**Consumer Actions:**
- Voice Agent Service: Access shared form data during voice call

**Use Case Example: Medical Prescription During Voice Call**

**Scenario:** User is on voice call with healthcare voicebot, uploads prescription image via chatbot widget

**Flow:**
1. Voicebot active (voicebot_session_started published)
2. Chatbot receives image upload
3. Chatbot processes image silently (OCR + LLM parsing)
4. Chatbot publishes chatbot_image_processed with extracted prescription data
5. Voicebot receives event, adds data to conversation context
6. Voicebot continues call: "I see you've uploaded a prescription for Amoxicillin 500mg..."
7. Chatbot does NOT send conversational response (remains in silent mode until voicebot_session_ended)

---

### prd_events

**Producers:** PRD Builder Engine Service
**Consumers:** Automation Engine, Analytics Service, Monitoring Engine

**Event Types:**

1. **prd_created**
```json
{
  "event_type": "prd_created",
  "prd_id": "uuid",
  "organization_id": "uuid",
  "client_id": "uuid",
  "prd_title": "E-commerce Payment Automation",
  "status": "draft",
  "timestamp": "2025-10-16T10:00:00Z"
}
```
**Consumer Actions:**
- None (informational)

2. **prd_approved**
```json
{
  "event_type": "prd_approved",
  "prd_id": "uuid",
  "organization_id": "uuid",
  "approved_by_user_id": "uuid",
  "timestamp": "2025-10-17T14:00:00Z"
}
```
**Consumer Actions:**
- **Pricing Model Generator: Trigger pricing calculation** (NEW WORKFLOW - CRITICAL FLOW)
- Analytics: Track PRD approval rate
- Note: Automation Engine now triggers on proposal_signed event (not prd_approved)

---

### config_events

**Producers:** Automation Engine, Configuration Management Service
**Consumers:** Agent Orchestration Service, Voice Agent Service, Monitoring Engine

**Event Types:**

1. **config_generated**
```json
{
  "event_type": "config_generated",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "chatbot",
  "prd_id": "uuid",
  "status": "pending_deployment",
  "missing_tools": ["initiate_refund", "check_inventory"],
  "missing_integrations": ["shopify_api"],
  "timestamp": "2025-10-17T15:00:00Z"
}
```
**Consumer Actions:**
- Automation Engine: Create GitHub issues for missing tools/integrations
- Monitoring: Track config generation success rate

2. **config_updated**
```json
{
  "event_type": "config_updated",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "chatbot",
  "updated_by": "github_issue_closed_webhook",
  "changes": ["tool_attached:initiate_refund"],
  "hot_reload_required": true,
  "timestamp": "2025-10-20T10:00:00Z"
}
```
**Consumer Actions:**
- **Agent Orchestration: Hot-reload config for active sessions** (CRITICAL FLOW)
- **Voice Agent: Hot-reload config for new calls** (CRITICAL FLOW)

3. **client_config_change_requested** (NEW)
```json
{
  "event_type": "client_config_change_requested",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "chatbot",
  "change_type": "system_prompt",
  "requested_by_user_id": "uuid",
  "request_source": "conversational_ai",
  "change_classification": {
    "type": "system_prompt_change",
    "confidence": 0.92,
    "detected_changes": [
      {
        "field": "system_prompt",
        "old_value": "You are a helpful assistant...",
        "new_value": "You are a casual and friendly assistant..."
      }
    ]
  },
  "risk_level": "low",
  "approval_required": false,
  "timestamp": "2025-10-20T11:00:00Z"
}
```
**Consumer Actions:**
- Configuration Management: Process change and create new version
- Client Configuration Portal: Update UI status

4. **client_config_change_applied** (NEW)
```json
{
  "event_type": "client_config_change_applied",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "voicebot",
  "version": "v5",
  "change_type": "voice_parameter_change",
  "applied_by_user_id": "uuid",
  "commit_message": "Increased voice speed for better user experience",
  "changes_summary": ["voice_config.speed: 1.0 → 1.2"],
  "hot_reload_triggered": true,
  "timestamp": "2025-10-20T11:05:00Z"
}
```
**Consumer Actions:**
- Agent Orchestration/Voice Agent: Hot-reload with new config version
- Analytics: Track client self-service configuration changes

5. **config_rollback** (ENHANCED)
```json
{
  "event_type": "config_rollback",
  "config_id": "uuid",
  "product_type": "chatbot",
  "organization_id": "uuid",
  "from_version": 4,
  "to_version": 3,
  "reason": "high_error_rate",
  "initiated_by": "client_user",
  "initiated_by_user_id": "uuid",
  "timestamp": "2025-10-20T11:00:00Z"
}
```
**Consumer Actions:**
- Agent Orchestration/Voice Agent: Hot-reload to previous version
- Monitoring: Alert on client-initiated rollbacks (indicates issue)

6. **config_preview_generated** (NEW)
```json
{
  "event_type": "config_preview_generated",
  "preview_id": "uuid",
  "config_id": "uuid",
  "organization_id": "uuid",
  "product_type": "chatbot",
  "sandbox_url": "wss://sandbox.workflow.ai/preview/uuid",
  "expires_at": "2025-10-20T12:00:00Z",
  "created_by_user_id": "uuid",
  "timestamp": "2025-10-20T11:00:00Z"
}
```
**Consumer Actions:**
- Client Configuration Portal: Provide sandbox testing link to client

7. **config_branch_created** (NEW)
```json
{
  "event_type": "config_branch_created",
  "branch_id": "uuid",
  "config_id": "uuid",
  "organization_id": "uuid",
  "branch_name": "staging",
  "base_version": 4,
  "created_by_user_id": "uuid",
  "description": "Testing new empathy-focused prompts",
  "timestamp": "2025-10-20T10:00:00Z"
}
```
**Consumer Actions:**
- Configuration Management: Track branch lifecycle
- Analytics: Monitor branch usage patterns

---

### org_events (ENHANCED)

**Producers:** Organization Management & Authentication Service
**Consumers:** Analytics Service, Monitoring Engine, Client Configuration Portal Service

**Event Types (existing events not shown, only new additions):**

8. **member_config_permissions_updated** (NEW)
```json
{
  "event_type": "member_config_permissions_updated",
  "organization_id": "uuid",
  "user_id": "uuid",
  "updated_by": "uuid",
  "old_permissions": {
    "can_view_configs": true,
    "can_edit_system_prompt": false,
    "max_risk_level": "low"
  },
  "new_permissions": {
    "can_view_configs": true,
    "can_edit_system_prompt": true,
    "can_edit_voice_params": true,
    "can_rollback_versions": true,
    "max_risk_level": "medium"
  },
  "timestamp": "2025-10-20T11:00:00Z"
}
```
**Consumer Actions:**
- Client Configuration Portal: Update permission checks for user
- Analytics: Track permission change patterns

---

### personalization_events (NEW)

**Producers:** Hyperpersonalization Engine (Service 20)
**Consumers:** Agent Orchestration Service, Analytics Service, Monitoring Engine

**Event Types:**

1. **user_cohort_assigned**
```json
{
  "event_type": "user_cohort_assigned",
  "user_id": "uuid",
  "organization_id": "uuid",
  "cohort_id": "active_power_users",
  "lifecycle_stage": "active",
  "assignment_reason": "monthly_usage_threshold_exceeded",
  "previous_cohort": "new_trial_users",
  "timestamp": "2025-10-20T10:00:00Z"
}
```
**Consumer Actions:**
- Agent Orchestration: Apply cohort-specific system prompt overrides
- Analytics: Track cohort transitions

2. **experiment_variant_assigned**
```json
{
  "event_type": "experiment_variant_assigned",
  "user_id": "uuid",
  "organization_id": "uuid",
  "experiment_id": "uuid",
  "variant_id": "v3",
  "variant_name": "empathetic_tone",
  "assignment_algorithm": "thompson_sampling",
  "expected_reward": 0.78,
  "timestamp": "2025-10-20T10:00:00Z"
}
```
**Consumer Actions:**
- Agent Orchestration: Use variant-specific message template
- Analytics: Track variant performance

3. **engagement_event_tracked**
```json
{
  "event_type": "engagement_event_tracked",
  "user_id": "uuid",
  "organization_id": "uuid",
  "experiment_id": "uuid",
  "variant_id": "v3",
  "event_type_detail": "message_sent",
  "engagement_metrics": {
    "click_through": true,
    "session_duration_seconds": 180,
    "conversion": false
  },
  "timestamp": "2025-10-20T10:05:00Z"
}
```
**Consumer Actions:**
- Hyperpersonalization Engine: Update variant weights with Thompson Sampling
- Analytics: Calculate experiment lift

4. **message_variant_performance_updated**
```json
{
  "event_type": "message_variant_performance_updated",
  "experiment_id": "uuid",
  "variant_id": "v3",
  "organization_id": "uuid",
  "performance_metrics": {
    "total_impressions": 1500,
    "click_through_rate": 0.23,
    "conversion_rate": 0.08,
    "average_session_duration": 165
  },
  "weight_updated": {
    "old_weight": 0.15,
    "new_weight": 0.22
  },
  "timestamp": "2025-10-20T11:00:00Z"
}
```
**Consumer Actions:**
- Analytics: Display experiment performance dashboard
- Monitoring: Alert if variant performance degrades

---

### outreach_events

**Producers:** Outbound Communication Service
**Consumers:** Human Agent Management Service, Analytics Service

**Event Types:**

1. **email_sent**
```json
{
  "event_type": "email_sent",
  "email_id": "uuid",
  "recipient_email": "client@example.com",
  "template_id": "research_completed_outreach",
  "sent_at": "2025-10-06T10:30:00Z",
  "timestamp": "2025-10-06T10:30:00Z"
}
```
**Consumer Actions:**
- Analytics: Track email delivery metrics

2. **manual_outreach_ticket_created**
```json
{
  "event_type": "manual_outreach_ticket_created",
  "ticket_id": "uuid",
  "client_id": "uuid",
  "assigned_agent_id": "uuid",
  "reason": "research_completed_no_auto_email",
  "timestamp": "2025-10-06T10:30:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Add ticket to agent's queue

3. **requirements_draft_generated** (NEW)
```json
{
  "event_type": "requirements_draft_generated",
  "draft_id": "uuid",
  "client_id": "uuid",
  "organization_id": "uuid",
  "research_job_id": "uuid",
  "research_summary": "Based on our research, Acme Corp is an e-commerce business...",
  "predicted_volumes": {
    "chat_volume_monthly": 1400,
    "call_volume_monthly": 450,
    "confidence_score": 0.85
  },
  "recommended_services": {
    "chatbot_types": ["Website chatbot", "WhatsApp chatbot"],
    "voicebot_types": ["Phone call (inbound/outbound)"]
  },
  "assigned_reviewer": "sales_agent_uuid",
  "timestamp": "2025-10-06T10:00:00Z"
}
```
**Consumer Actions:**
- Human Agent Management: Create review task in sales agent's queue
- Analytics: Track draft generation time from research completion

4. **requirements_draft_approved** (NEW)
```json
{
  "event_type": "requirements_draft_approved",
  "draft_id": "uuid",
  "form_id": "uuid",
  "client_id": "uuid",
  "organization_id": "uuid",
  "approved_by": "sales_agent_uuid",
  "approved_at": "2025-10-06T11:00:00Z",
  "modifications_made": true,
  "sent_to_client": true,
  "timestamp": "2025-10-06T11:00:00Z"
}
```
**Consumer Actions:**
- Analytics: Track approval time, modification rate
- Monitoring: Track draft-to-send conversion rate

5. **requirements_form_sent** (NEW)
```json
{
  "event_type": "requirements_form_sent",
  "form_id": "uuid",
  "draft_id": "uuid",
  "client_id": "uuid",
  "organization_id": "uuid",
  "recipient_email": "client@example.com",
  "research_job_id": "uuid",
  "sent_at": "2025-10-06T11:00:00Z",
  "expires_at": "2025-10-09T11:00:00Z",
  "timestamp": "2025-10-06T11:00:00Z"
}
```
**Consumer Actions:**
- Analytics: Track form delivery and completion rates
- Monitoring: Alert if form not completed within 72 hours

---

### client_events (UPDATED)

**Producers:** Organization Management, PRD Builder, Demo Generator
**Consumers:** Analytics Service, Human Agent Management Service

**Event Types:**

1. **requirements_validation_completed** (NEW - replaces requirements_form_completed)
```json
{
  "event_type": "requirements_validation_completed",
  "form_id": "uuid",
  "draft_id": "uuid",
  "client_id": "uuid",
  "organization_id": "uuid",
  "validation_response": {
    "research_findings_accurate": true,
    "volume_corrections": {
      "chat_volume": 1200,
      "call_volume": 450
    },
    "service_confirmations": {
      "chatbot_types": ["Website chatbot (chat widget)", "WhatsApp chatbot"],
      "voicebot_types": ["Phone call (inbound/outbound)"]
    },
    "additional_requirements": "Need Zendesk integration and Spanish language support.",
    "corrections_needed": "Evening traffic is higher - need 24/7 coverage prioritized."
  },
  "discrepancy_analysis": {
    "chat_volume_discrepancy": -14.3,
    "call_volume_discrepancy": 0,
    "flags_for_review": []
  },
  "timestamp": "2025-10-06T14:30:00Z"
}
```
**Consumer Actions:**
- **Demo Generator**: Use confirmed requirements and additional_requirements to generate demo (PRIMARY TRIGGER)
- PRD Builder: Use validated volumes and service confirmations for technical requirements
- Pricing Model Generator: Use corrected volumes for tier recommendations
- Human Agent Management: Create review task if flags_for_review not empty or corrections_needed present

---

### Synchronous REST (Secondary)

**Use Cases:**
- User-facing operations (demo generation, proposal creation)
- External integrations (CRM sync, e-signature)
- Admin operations (config validation, incident creation)

### gRPC (Internal High-Performance)

**Use Cases:**
- Agent-to-tool communication
- Service mesh data plane
- High-frequency metric collection

---

## Deployment & Infrastructure Considerations

### Kubernetes Architecture

**Namespace Strategy:**
- `core-services`: Research, Demo, NDA, Pricing, Proposal, PRD, Automation
- `runtime-services`: Agent Orchestration, Voice, Configuration Management
- `support-services`: Monitoring, Analytics, Customer Success, Support, CRM
- `infrastructure`: Kafka, Redis, PostgreSQL, Vector DBs
- `tenants-staging`: Tenant-specific staging environments
- `tenants-prod`: Tenant-specific production (enterprise tier)

### Scaling Strategy

**Horizontal Pod Autoscaling (HPA):**
- Agent Orchestration: CPU 70%, custom metric (active conversations)
- Voice Agent: GPU utilization 60%, queue depth
- API Gateway (Kong): Request rate, P95 latency
- Analytics: Kafka lag, processing queue depth

**Vertical Pod Autoscaling (VPA):**
- LLM Gateway: Memory-intensive (model loading)
- RAG Pipeline: Memory for embedding caching

**Cluster Autoscaling (Karpenter):**
- GPU nodes for voice workers (T4 instances)
- Spot instances for batch analytics
- Reserved instances for core services

### Database Architecture

**PostgreSQL (Supabase) - Shared Core:**
- Authentication and authorization (auth.users)
- Billing and subscriptions
- Cross-service metadata

**PostgreSQL - Per Service:**
- Agent Orchestration: Conversations, checkpoints
- Voice: Call metadata, transcripts
- Analytics: Aggregated metrics, experiments
- Monitoring: Incidents, alerts

**Citus Sharding (>10K tenants):**
- Shard key: tenant_id
- Schema-per-tenant for compliance isolation

### Caching Strategy

**L1 (In-Memory per Pod):**
- Config: YAML configs, feature flags
- Static: Prompt templates, tool schemas

**L2 (Redis Cluster):**
- Session state, rate limit counters
- LLM response cache (60min TTL)
- Hot configuration data

**L3 (CDN - Cloudflare):**
- Static assets (JS bundles, images)
- Public API responses (anonymized)

---

## Security & Compliance Considerations

### Data Protection

**Encryption:**
- At Rest: AES-256 (KMS-managed keys, tenant-specific for enterprise)
- In Transit: TLS 1.3 (mTLS for service mesh)
- PII: Separate encryption keys, automatic rotation (90 days)

**Access Control:**
- Kong API Gateway: JWT-based auth, tenant_id validation
- Linkerd Service Mesh: mTLS for inter-service communication
- PostgreSQL RLS: tenant_id filtering on every query
- S3: Bucket policies, IAM roles with least privilege

### Compliance Frameworks

**SOC 2 Type II:**
- Comprehensive audit logging (Kafka event sourcing)
- Security policies documented and enforced
- Quarterly penetration testing
- Annual third-party audit

**HIPAA (Healthcare Tenants):**
- Dedicated infrastructure (physical isolation)
- BAA with all service providers
- 6-year audit log retention
- Encrypted PHI at rest and in transit

**GDPR (EU Operations):**
- Data residency (GCP europe-west1, AWS eu-central-1)
- Right to erasure (30-day data deletion)
- Data portability (JSON export)
- Consent management for optional processing

**PCI-DSS (Payment Processing):**
- Tokenization (no card data storage)
- Network segmentation
- Quarterly vulnerability scans
- Two-factor authentication for admin access

### Incident Response

**Detection:**
- Real-time anomaly detection (Datadog Security)
- Failed auth alerts (>10 failures in 5min)
- Unusual data access (ML-based patterns)
- DDoS protection (Cloudflare WAF)

**Response Playbook:**
1. Containment (isolate affected systems, revoke credentials)
2. Forensics (preserve logs, identify attack vector)
3. Notification (72hr GDPR, 60-day HIPAA)
4. Remediation (patch vulnerabilities, update policies)
5. Post-Incident Review (RCA, preventive measures)

**Disaster Recovery:**
- Multi-region deployment (active-passive)
- Database backups every 4 hours (PITR)
- Config backups to separate region
- Quarterly DR drills
- RTO: <5min, RPO: <15min

---

## Inter-Service Communication Summary

### Event Flow Examples

**1. Client Onboarding Flow (Self-Service):**
```
User Signup (Org Management) → user_signed_up event
  ↓
Email Verification → email_verified event
  ↓
Organization Creation → organization_created event
  ↓
(Optional) Team Member Invitations → member_invited events
  ↓
Research Engine (auto-triggered) → research_completed event
  ↓
AI Generates Requirements Draft → requirements_draft_generated event
  ↓
Human Agent Reviews/Approves Draft → requirements_draft_approved event
  ↓
Requirements Form Sent to Client → requirements_form_sent event
  ↓
Client Validates Research Findings → requirements_validation_completed event
  ↓
Outbound Email (if needed) → email_sent OR manual_outreach_ticket_created event
  ↓
Client Feedback → feedback_received event
  ↓
Demo Generator → demo_generated event
  ↓
Sales Meeting (external) → demo_approved + pilot_agreed events
  ↓
NDA Generator → nda_generated event
  ↓
Client Signs NDA → nda_fully_signed event
  ↓
PRD Builder (with collaboration support) → prd_approved event
  ↓
Pricing Model Generator → pricing_generated event
  ↓
Proposal Generator → proposal_generated event
  ↓
Client Signs Proposal → proposal_signed event
  ↓
Automation Engine → config_generated event
  ↓
Agent Orchestration + Voice → services_ready event
  ↓
Customer Success → monitoring_active event
```

**1b. Client Onboarding Flow (Assisted Signup with Human Agent Handoffs):**
```
═══════════════════════════════════════════════════════════════════════
STAGE 1: SALES (Human Agent: Sales Agent - Sam)
═══════════════════════════════════════════════════════════════════════
Sales Agent Creates Assisted Account → assisted_account_created event
  ↓
Agent Auto-Assignment → client_assigned_to_agent event (Sam - Sales Agent)
  ↓
Claim Link Sent to Client → claim_link_sent event
  ↓
Research Engine (auto-triggered by AI) → research_completed event
  ↓
AI Generates Requirements Draft → requirements_draft_generated event
  ↓
Sales Agent Reviews/Approves Draft → requirements_draft_approved event
  ↓
Requirements Form Sent to Client → requirements_form_sent event
  ↓
Client Validates Research Findings → requirements_validation_completed event
  ↓
Sales Agent Prepares Demo/Data → assisted_account_access_granted event
  ↓
Demo Generator (AI-assisted) → demo_generated event
  ↓
Client Receives Claim Link → (Pending client action)
  ↓
Client Claims Account → assisted_account_claimed event
  ↓
Account Ownership Transferred → account_ownership_transferred event
  ↓
Sales Meeting (Sales Agent facilitated) → demo_approved + pilot_agreed events
  ↓
NDA Generator (AI-generated, Sales Agent reviews) → nda_generated event
  ↓
Client Signs NDA (Sales Agent follows up) → nda_fully_signed event
  ↓
PRD Builder (AI-driven, Sales Agent collaborates when needed) → prd_approved event
  ↓
Pricing Model Generator (AI-generated) → pricing_generated event
  ↓
Proposal Generator (AI-generated, Sales Agent reviews) → proposal_generated event
  ↓
Client Signs Proposal (Sales Agent closes) → proposal_signed event
  ↓
═══════════════════════════════════════════════════════════════════════
HANDOFF: Sales Agent (Sam) → Onboarding Specialist (Rahul)
═══════════════════════════════════════════════════════════════════════
Sales Agent Initiates Handoff → handoff_initiated event
  ↓  (Context: All sales docs, client prefs, technical requirements)
Onboarding Specialist Accepts → handoff_accepted event
  ↓
═══════════════════════════════════════════════════════════════════════
STAGE 2: ONBOARDING (Human Agent: Onboarding Specialist - Rahul)
Duration: 1-2 weeks | Automation: 60% | Human: 40% (supervision + tie shoelaces)
═══════════════════════════════════════════════════════════════════════
Onboarding Specialist Reviews Context → agent_assigned event
  ↓
PRD Builder (AI-driven, Human collaborates when needed) → prd_created event
  ↓  (Human uses Help button if stuck, AI handles 80% of questions)
Client Requests Help → help_requested event (Onboarding Specialist joins)
  ↓
Collaboration Session → agent_joined_session event
  ↓  (Human provides expert guidance, edits canvas)
Collaboration Ended → collaboration_ended event (AI resumes)
  ↓
PRD Approved → prd_approved event
  ↓
Automation Engine (AI-generated YAML) → config_generated event
  ↓
Onboarding Specialist Reviews Config → config_reviewed event
  ↓
Config Deployed (Human supervises) → config_deployed event
  ↓
Agent Orchestration + Voice Launch → services_ready event
  ↓
Week 1 Handholding (Human monitors AI performance daily)
  ↓  (AI Supervisor reviews quality metrics)
AI Quality Check Passed → onboarding_week1_complete event
  ↓
═══════════════════════════════════════════════════════════════════════
HANDOFF: Onboarding Specialist (Rahul) → Support + Success (Parallel)
═══════════════════════════════════════════════════════════════════════
Onboarding Specialist Initiates Dual Handoff:
  ↓
  ├─→ Support Specialist (Technical issues) → handoff_initiated event (to Support)
  │   ↓
  │   Support Specialist Accepts → handoff_accepted event
  │
  └─→ Success Manager (KPIs, adoption) → handoff_initiated event (to Success)
      ↓
      Success Manager Accepts → handoff_accepted event
  ↓
═══════════════════════════════════════════════════════════════════════
STAGE 3: ONGOING SUPPORT + SUCCESS (Dual Human Agents - Long-term)
Automation: 90% | Human: 10% (exceptions + supervision + strategy)
═══════════════════════════════════════════════════════════════════════
[SUPPORT TRACK - Support Specialist monitors AI agent health]
  │
  ├─→ AI Handles 90% of Support Tickets → conversation_completed events
  │   ↓
  ├─→ Complex Issues Escalate to Human → escalation_triggered event
  │   ↓  (Support Specialist intervenes)
  ├─→ Support Specialist Resolves → ticket_resolved event
  │   ↓
  └─→ AI Supervision (config tuning, prompt updates) → config_updated events

[SUCCESS TRACK - Success Manager drives adoption]
  │
  ├─→ AI Monitors KPIs Daily → kpi_calculated events
  │   ↓
  ├─→ Success Manager Reviews QBR Metrics (Monthly) → qbr_scheduled event
  │   ↓
  ├─→ Success Manager Identifies Upsell Opportunity → opportunity_identified event
  │   ↓
  │   SUCCESS MANAGER INVITES SPECIALIST:
  │   ↓
  │   Invite Sales Specialist (Voice addon) → specialist_invited event
  │   ↓
  │   Sales Specialist Accepts → specialist_joined event
  │   ↓
  │   Sales Specialist Pitches → expansion_proposal_created event
  │   ↓
  │   Client Agrees → upsell_closed event
  │   ↓
  │   Sales Specialist Exits → specialist_handoff_back event
  │   ↓
  │   Success Manager Continues → client_expanded event
  │
  └─→ Continuous Adoption Monitoring → monitoring_active event

═══════════════════════════════════════════════════════════════════════
OPTIONAL: ITERATION / FLOW CHANGES (Success Manager drives)
═══════════════════════════════════════════════════════════════════════
Success Manager Identifies Iteration Need → iteration_requested event
  ↓
Invite Onboarding Specialist (or AI Workflow Designer) → specialist_invited event
  ↓
Specialist Accepts → specialist_joined event
  ↓
PRD Updated → prd_updated event
  ↓
Config Regenerated (AI-driven, human reviews) → config_generated event
  ↓
Deployed → config_deployed event
  ↓
Specialist Exits → specialist_handoff_back event
  ↓
Success Manager Continues Monitoring → monitoring_active event

Note: If account not claimed within expiry period:
Client Doesn't Claim → assisted_account_expired event
  ↓
Sales Agent Notified → manual_followup_required event
```

**2. Conversation Flow:**
```
User Message → Agent Orchestration
  ↓
LLM Gateway (inference)
  ↓
RAG Pipeline (knowledge retrieval if needed)
  ↓
Tool Execution (CRM Integration Service)
  ↓
Response to User
  ↓
Analytics Service (event logging)
  ↓
Monitoring Engine (quality check)
  ↓
If escalation needed → Escalation event → Human Agent
```

**3. Voice Call Flow:**
```
Inbound Call → Voice Agent Service
  ↓
STT (Deepgram) → Agent Orchestration (business logic)
  ↓
LLM Gateway (inference)
  ↓
TTS (ElevenLabs) → Voice playback
  ↓
If transfer → Transfer event → Human Agent (SIP bridge)
  ↓
Call End → Recording storage → Analytics
```

**4. PRD Collaboration Flow:**
```
Client working on PRD → Needs help → Clicks Help Button
  ↓
PRD Builder generates shareable code (e.g., HELP-ACME-X7K9-2025)
  ↓
help_requested event published to collaboration_events topic
  ↓
Human Agent sees request in Agent Collaboration Dashboard
  ↓
Agent joins session using shareable code
  ↓
agent_joined_session event published
  ↓
WebSocket connection established (real-time collaboration)
  ↓
Agent and client chat + edit canvas collaboratively
  ↓
canvas_edited events published for each edit
  ↓
Agent resolves issue → Ends collaboration session
  ↓
collaboration_ended event published
  ↓
Client continues with AI PRD builder independently
```

---

## Cost Optimization Summary

### LLM Cost Reduction (35-50% savings)

**Strategies:**
1. **Model Routing:** GPT-4o-mini for simple queries, GPT-4 for complex
2. **Semantic Caching:** 20-30% cache hit rate (Helicone/Redis)
3. **Prompt Optimization:** 40% token reduction via compression
4. **Fine-Tuning:** GPT-3.5-turbo fine-tuned for specialized tasks (10× cost reduction)

**Target:** $0.50-0.70 per conversation (down from $1.20)

### Infrastructure Cost Reduction (40-60% savings)

**Strategies:**
1. **Right-Sizing:** VPA-optimized resource requests
2. **Spot Instances:** 60-90% savings for batch jobs
3. **Tiered Storage:** Hot (SSD) → Warm (HDD) → Cold (S3 Glacier)
4. **Connection Pooling:** PgBouncer reduces DB costs 80%
5. **Vector DB Optimization:** Quantization reduces memory 4-8×

**Target:** $1,500-3,000/month infrastructure (100K conversations)

### Voice Cost Reduction (30-40% savings)

**Strategies:**
1. **STT Optimization:** Deepgram Nova-3 (balance of speed + cost)
2. **TTS Optimization:** OpenAI TTS for cost, ElevenLabs for quality
3. **Turn Detection:** Custom VAD reduces silence costs
4. **Dual Streaming:** Begin TTS before LLM completion

**Target:** $0.05-0.07/min (down from $0.10/min)

---

## Performance Targets

### Service-Level Objectives (SLOs)

**API Latency:**
- P95: <2s for chatbot responses
- P95: <500ms for voice agent responses
- P95: <5s for demo generation
- P95: <10s for PRD generation

**Availability:**
- Core services: 99.9% uptime (43min downtime/month)
- Voice services: 99.95% uptime (21min downtime/month)
- Analytics: 99.5% uptime (3.6hr downtime/month)

**Throughput:**
- 10,000 concurrent conversations (chatbot)
- 1,000 concurrent calls (voice)
- 1M events/sec (analytics pipeline)

**Error Budgets:**
- If SLO violated: Halt feature development, focus on reliability
- Monthly review: Adjust SLOs based on business needs

---

## Summary & Next Steps

This microservices architecture provides a **production-ready foundation** for an AI workflow automation platform scaling from prototype to millions of users. The 15 specialized microservices enable:

✅ **Modular Development:** Independent service deployment, sprint-based roadmap
✅ **Multi-Tenant Isolation:** Support 10,000+ clients with namespace/RLS segregation
✅ **Event-Driven Scalability:** Kafka-based loose coupling, horizontal scaling
✅ **Configuration-Driven Agents:** YAML-based dynamic behavior without code changes
✅ **Cost Optimization:** 80% reduction in customer service costs
✅ **Security & Compliance:** SOC 2, HIPAA, GDPR, PCI-DSS ready

### Implementation Roadmap

**Phase 1 (Months 1-4):** Core services (Research, Demo, NDA, Pricing, Proposal)
**Phase 2 (Months 5-8):** PRD & Automation (PRD Builder, Automation Engine, Config Mgmt)
**Phase 3 (Months 9-12):** Runtime services (Agent Orchestration, Voice, Monitoring)
**Phase 4 (Months 13-16):** Support services (Analytics, Customer Success, CRM Integration)
**Phase 5 (Months 17-20):** Production hardening (Security, compliance, multi-region)
**Phase 6 (Months 21-24):** Client Self-Service & Personalization (Client Configuration Portal, Hyperpersonalization Engine)

#### Phase 6 Detailed Sprint Plan (Months 21-24)

**Sprint 21 (Weeks 81-82): Client Configuration Portal - Foundation**
- Database schema: config_change_log, organization_member_config_permissions, config_permission_matrix
- Organization Management API enhancements for config permissions
- Basic permission validation middleware
- Success criteria: Admin can assign config permissions to team members

**Sprint 22 (Weeks 83-84): Conversational Configuration Agent**
- LangGraph two-node configuration agent implementation
- Change classification model (system_prompt, tool, voice_param, integration, escalation_rule)
- Tool implementations: classify_configuration_request, generate_system_prompt_update, search_available_tools
- Success criteria: Agent can classify and apply simple system prompt changes via chat

**Sprint 23 (Weeks 85-86): Visual Configuration Dashboard**
- React components: ConfigurationDashboard, ChatbotConfigPanel, VoicebotConfigPanel
- Voice parameter controls matching UI images (speed, clarity, stop speaking plan)
- Real-time config preview generation
- Success criteria: Client can visually adjust voicebot parameters and see instant preview

**Sprint 24 (Weeks 87-88): Version Control & Rollback**
- Git-style versioning with commit messages
- Config diff visualization (visual_diff_url generation)
- Rollback API with client permission support
- Branch management (dev/staging/prod)
- Success criteria: Client can rollback to previous config version with one click

**Sprint 25 (Weeks 89-90): Config Preview & Testing**
- Sandbox environment for config testing (1-hour expiry)
- WebSocket preview sessions
- Test scenario execution
- Config validation before deployment
- Success criteria: Client can test config changes in sandbox before applying to production

**Sprint 26 (Weeks 91-92): Hyperpersonalization Engine - Cohort Management**
- Database schema: customer_cohorts, cohort_rules, cohort_assignments
- Cohort segmentation logic (trial, active, at-risk, renewal)
- Lifecycle stage automation (day 1, day 7, day 13, month 6, month 11)
- Success criteria: Users automatically assigned to cohorts based on behavior

**Sprint 27 (Weeks 93-94): Multi-Armed Bandit Experimentation**
- Thompson Sampling algorithm implementation
- Experiment framework: variant creation, assignment, tracking
- A/B/N testing support (50-100 message variants)
- Real-time weight optimization based on engagement
- Success criteria: System automatically optimizes message variants based on CTR

**Sprint 28 (Weeks 95-96): Personalization Integration**
- Agent Orchestration Service integration (fetch cohort context before response)
- Dynamic system prompt overrides per cohort
- Response template injection based on experiment assignment
- Engagement event tracking
- Success criteria: Chatbot applies personalized system prompts based on user cohort

**Sprint 29 (Weeks 97-98): Client Config Event System**
- Kafka event schemas: client_config_change_requested, client_config_change_applied
- Hot-reload integration with client-initiated changes
- Config change audit trail
- Risk-based approval workflows (low/medium/high)
- Success criteria: Client config changes trigger hot-reload without service restart

**Sprint 30 (Weeks 99-100): Human Agent Coordination**
- Config help request system (complex changes escalate to support)
- Agent assistance chat interface
- Automated GitHub ticket creation for new tool requests
- Success criteria: Complex config requests automatically create support tickets

**Sprint 31 (Weeks 101-102): Analytics & Monitoring**
- Client self-service config change metrics
- Experiment performance dashboards (CTR, conversion, session duration)
- Cohort transition analytics
- Rollback rate monitoring
- Success criteria: Platform team can monitor client config health and experiment lift

**Sprint 32 (Weeks 103-104): Production Hardening & Documentation**
- Load testing: 1000+ concurrent config changes
- Security review: permission enforcement, SQL injection prevention
- API documentation for Client Configuration Portal
- Client training materials and video tutorials
- Success criteria: 500+ clients can self-configure without platform support

### Success Metrics

**Operational:**
- 95% automation rate within 12 months
- 99.9% uptime SLA achievement
- <2s API response time (P95)
- <500ms voice latency (P95)

**Business:**
- 80% reduction in support costs
- 90%+ client satisfaction (CSAT >4.5)
- 50% reduction in time-to-deployment (PRD → production)
- 10× increase in concurrent client capacity

**Client Self-Service (Phase 6):**
- 80% of config changes done by clients without platform support
- <5 minutes average time for config change (request → applied)
- 95% config change success rate (no rollbacks needed)
- 30% improvement in engagement metrics via personalization
- 50+ A/B experiments running concurrently per organization

### Technical Debt Prevention

1. **Service Ownership:** Each service has a dedicated engineering team
2. **API Contracts:** OpenAPI specs, contract testing (Pact)
3. **Observability:** Comprehensive logging, tracing, metrics from day one
4. **Documentation:** Auto-generated API docs, architecture decision records (ADRs)
5. **Code Quality:** Pre-commit hooks, test coverage >80%, security scanning

---

## Additional Services

### Service 21: Agent Copilot Service

**Note**: Service 21 (Agent Copilot) is documented separately in `SERVICE_21_AGENT_COPILOT.md` due to its comprehensive scope and cross-cutting nature.

**Purpose**: AI-powered context management and action planning for human agents (Sales, Onboarding, Support, Success) based on role-specific objectives and client lifecycle stage.

**Key Features**:
- Unified agent dashboard (single pane of glass for all client context)
- AI action planner (daily prioritized task lists with next-best-action suggestions)
- Communication drafter (email, meeting agenda, QBR deck generation)
- Approval orchestration (intelligent routing based on type + risk level)
- CRM auto-update (Salesforce, HubSpot, Zendesk bi-directional sync)
- Village knowledge integration (best practices from similar clients)
- Performance dashboard (metrics vs. objectives, coaching suggestions)

**Integration Points**:
- Consumes events from all 20 services (auth, research, demo, PRD, config, conversations, support, customer success)
- Integrates with Service 0.5 (Human Agent Management) for role definitions and handoffs
- Integrates with Service 13 (Customer Success) for health scores and playbooks
- Integrates with Service 14 (Support Engine) for ticket management
- Integrates with Service 15 (CRM Integration) for Salesforce/HubSpot/Zendesk sync
- Integrates with Service 16 (LLM Gateway) for action plan generation
- Integrates with Service 17 (RAG Pipeline) for village knowledge retrieval

**For Complete Specification**: See `SERVICE_21_AGENT_COPILOT.md`

---

**This completes the comprehensive microservices architecture specification for the Complete Workflow Automation System.**

**Service Index**: For quick navigation to all 22 services across documents, see `SERVICE_INDEX.md`
